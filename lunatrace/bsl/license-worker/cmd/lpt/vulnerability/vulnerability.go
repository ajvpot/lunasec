// Copyright by LunaSec (owned by Refinery Labs, Inc)
//
// Licensed under the Business Source License v1.1 
// (the "License"); you may not use this file except in compliance with the
// License. You may obtain a copy of the License at
//
// https://github.com/lunasec-io/lunasec/blob/master/licenses/BSL-LunaTrace.txt
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
package vulnerability

import (
  "context"
  "github.com/lunasec-io/lunasec/lunatrace/bsl/license-worker/pkg/vulnerability"
  "github.com/rs/zerolog/log"
  "github.com/urfave/cli/v2"
  "go.uber.org/fx"
  "io/fs"
  "os"
  "path/filepath"

  "github.com/lunasec-io/lunasec/lunatrace/bsl/license-worker/pkg/clifx"
)

type Params struct {
  fx.In

  Loader vulnerability.Loader
}

func NewCommand(p Params) clifx.CommandResult {
  return clifx.CommandResult{
    Command: &cli.Command{
      Name: "vulnerability",
      Subcommands: []*cli.Command{
        {
          Name:  "ingest",
          Usage: "[file or directory]",
          Flags: []cli.Flag{
            &cli.StringFlag{
              Name:     "source",
              Usage:    "Where the vulnerabilities have been sourced from.",
              Required: true,
            },
          },
          Action: func(ctx *cli.Context) error {
            fileLocation := ctx.Args().First()

            fileInfo, err := os.Stat(fileLocation)
            if err != nil {
              log.Error().
                Err(err).
                Msg("unable to get file info for file location")
              return err
            }

            var files []string

            if fileInfo.IsDir() {
              err = filepath.WalkDir(fileLocation, func(path string, d fs.DirEntry, err error) error {
                if d.IsDir() {
                  return nil
                }
                files = append(files, path)
                return nil
              })
              if err != nil {
                log.Error().
                  Err(err).
                  Msg("unable to load files from directory file location")
                return err
              }
            } else {
              files = append(files, fileLocation)
            }

            loadCtx := context.Background()
            for _, filename := range files {
              err = p.Loader.Load(loadCtx, filename)
              if err != nil {
                log.Warn().
                  Err(err).
                  Str("filename", filename).
                  Msg("failed to load vulnerability")
                continue
              }
            }
            return nil
          },
        },
      },
    },
  }
}
