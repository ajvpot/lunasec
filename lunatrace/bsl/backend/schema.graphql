schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type PresignedUrlResponse {
  bucket: String!
  error: Boolean!
  error_message: String
  headers: String!
  key: String!
  url: String!
}

type SbomUploadUrlOutput {
  error: Boolean!
  uploadUrl: UploadUrl
}

type ScanManifestOutput {
  build_id: String!
  error: Boolean!
  error_message: String

  """An object relationship"""
  scan_build_id_relationship: builds!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type UploadUrl {
  headers: String!
  url: String!
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

"""
columns and relationships of "builds"
"""
type builds {
  agent_access_token: uuid!
  build_number: Int
  created_at: timestamp!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid!

  """An object relationship"""
  project: projects
  project_id: uuid
  s3_url: String

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """An aggregate relationship"""
  scans_aggregate(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): scans_aggregate!
}

"""
aggregated selection of "builds"
"""
type builds_aggregate {
  aggregate: builds_aggregate_fields
  nodes: [builds!]!
}

"""
aggregate fields of "builds"
"""
type builds_aggregate_fields {
  avg: builds_avg_fields
  count(columns: [builds_select_column!], distinct: Boolean): Int!
  max: builds_max_fields
  min: builds_min_fields
  stddev: builds_stddev_fields
  stddev_pop: builds_stddev_pop_fields
  stddev_samp: builds_stddev_samp_fields
  sum: builds_sum_fields
  var_pop: builds_var_pop_fields
  var_samp: builds_var_samp_fields
  variance: builds_variance_fields
}

"""
order by aggregate values of table "builds"
"""
input builds_aggregate_order_by {
  avg: builds_avg_order_by
  count: order_by
  max: builds_max_order_by
  min: builds_min_order_by
  stddev: builds_stddev_order_by
  stddev_pop: builds_stddev_pop_order_by
  stddev_samp: builds_stddev_samp_order_by
  sum: builds_sum_order_by
  var_pop: builds_var_pop_order_by
  var_samp: builds_var_samp_order_by
  variance: builds_variance_order_by
}

"""
input type for inserting array relation for remote table "builds"
"""
input builds_arr_rel_insert_input {
  data: [builds_insert_input!]!

  """upsert condition"""
  on_conflict: builds_on_conflict
}

"""aggregate avg on columns"""
type builds_avg_fields {
  build_number: Float
}

"""
order by avg() on columns of table "builds"
"""
input builds_avg_order_by {
  build_number: order_by
}

"""
Boolean expression to filter rows from the table "builds". All fields are combined with a logical 'AND'.
"""
input builds_bool_exp {
  _and: [builds_bool_exp!]
  _not: builds_bool_exp
  _or: [builds_bool_exp!]
  agent_access_token: uuid_comparison_exp
  build_number: Int_comparison_exp
  created_at: timestamp_comparison_exp
  findings: findings_bool_exp
  git_branch: String_comparison_exp
  git_hash: String_comparison_exp
  git_remote: String_comparison_exp
  id: uuid_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  s3_url: String_comparison_exp
  scans: scans_bool_exp
}

"""
unique or primary key constraints on table "builds"
"""
enum builds_constraint {
  """unique or primary key constraint"""
  builds_agent_access_token_key

  """unique or primary key constraint"""
  builds_build_number_project_id_key

  """unique or primary key constraint"""
  builds_pkey
}

"""
input type for incrementing numeric columns in table "builds"
"""
input builds_inc_input {
  build_number: Int
}

"""
input type for inserting data into table "builds"
"""
input builds_insert_input {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  findings: findings_arr_rel_insert_input
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project: projects_obj_rel_insert_input
  project_id: uuid
  s3_url: String
  scans: scans_arr_rel_insert_input
}

"""aggregate max on columns"""
type builds_max_fields {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project_id: uuid
  s3_url: String
}

"""
order by max() on columns of table "builds"
"""
input builds_max_order_by {
  agent_access_token: order_by
  build_number: order_by
  created_at: order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project_id: order_by
  s3_url: order_by
}

"""aggregate min on columns"""
type builds_min_fields {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project_id: uuid
  s3_url: String
}

"""
order by min() on columns of table "builds"
"""
input builds_min_order_by {
  agent_access_token: order_by
  build_number: order_by
  created_at: order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project_id: order_by
  s3_url: order_by
}

"""
response of any mutation on the table "builds"
"""
type builds_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [builds!]!
}

"""
input type for inserting object relation for remote table "builds"
"""
input builds_obj_rel_insert_input {
  data: builds_insert_input!

  """upsert condition"""
  on_conflict: builds_on_conflict
}

"""
on_conflict condition type for table "builds"
"""
input builds_on_conflict {
  constraint: builds_constraint!
  update_columns: [builds_update_column!]! = []
  where: builds_bool_exp
}

"""Ordering options when selecting data from "builds"."""
input builds_order_by {
  agent_access_token: order_by
  build_number: order_by
  created_at: order_by
  findings_aggregate: findings_aggregate_order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project: projects_order_by
  project_id: order_by
  s3_url: order_by
  scans_aggregate: scans_aggregate_order_by
}

"""primary key columns input for table: builds"""
input builds_pk_columns_input {
  id: uuid!
}

"""
select columns of table "builds"
"""
enum builds_select_column {
  """column name"""
  agent_access_token

  """column name"""
  build_number

  """column name"""
  created_at

  """column name"""
  git_branch

  """column name"""
  git_hash

  """column name"""
  git_remote

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  s3_url
}

"""
input type for updating data in table "builds"
"""
input builds_set_input {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project_id: uuid
  s3_url: String
}

"""aggregate stddev on columns"""
type builds_stddev_fields {
  build_number: Float
}

"""
order by stddev() on columns of table "builds"
"""
input builds_stddev_order_by {
  build_number: order_by
}

"""aggregate stddev_pop on columns"""
type builds_stddev_pop_fields {
  build_number: Float
}

"""
order by stddev_pop() on columns of table "builds"
"""
input builds_stddev_pop_order_by {
  build_number: order_by
}

"""aggregate stddev_samp on columns"""
type builds_stddev_samp_fields {
  build_number: Float
}

"""
order by stddev_samp() on columns of table "builds"
"""
input builds_stddev_samp_order_by {
  build_number: order_by
}

"""aggregate sum on columns"""
type builds_sum_fields {
  build_number: Int
}

"""
order by sum() on columns of table "builds"
"""
input builds_sum_order_by {
  build_number: order_by
}

"""
update columns of table "builds"
"""
enum builds_update_column {
  """column name"""
  agent_access_token

  """column name"""
  build_number

  """column name"""
  created_at

  """column name"""
  git_branch

  """column name"""
  git_hash

  """column name"""
  git_remote

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  s3_url
}

"""aggregate var_pop on columns"""
type builds_var_pop_fields {
  build_number: Float
}

"""
order by var_pop() on columns of table "builds"
"""
input builds_var_pop_order_by {
  build_number: order_by
}

"""aggregate var_samp on columns"""
type builds_var_samp_fields {
  build_number: Float
}

"""
order by var_samp() on columns of table "builds"
"""
input builds_var_samp_order_by {
  build_number: order_by
}

"""aggregate variance on columns"""
type builds_variance_fields {
  build_number: Float
}

"""
order by variance() on columns of table "builds"
"""
input builds_variance_order_by {
  build_number: order_by
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "findings"
"""
type findings {
  """An object relationship"""
  build: builds!
  build_id: uuid!
  created_at: timestamp!
  dedupe_slug: String!
  fix_state: fix_state_enum!
  fix_versions: _text
  id: uuid!
  language: String!
  locations: _text!
  matcher: String!
  package_name: String!

  """An object relationship"""
  package_version: package_versions
  package_version_id: uuid
  purl: String!

  """An object relationship"""
  scan: scans!
  scan_id: uuid!
  severity: severity_enum!
  type: String!
  updated_at: timestamptz!
  version: String!
  version_matcher: String!
  virtual_path: String

  """An object relationship"""
  vulnerability: vulnerabilities!
  vulnerability_id: uuid!

  """An object relationship"""
  vulnerability_package: vulnerability_packages
  vulnerability_package_id: uuid
}

"""
aggregated selection of "findings"
"""
type findings_aggregate {
  aggregate: findings_aggregate_fields
  nodes: [findings!]!
}

"""
aggregate fields of "findings"
"""
type findings_aggregate_fields {
  count(columns: [findings_select_column!], distinct: Boolean): Int!
  max: findings_max_fields
  min: findings_min_fields
}

"""
order by aggregate values of table "findings"
"""
input findings_aggregate_order_by {
  count: order_by
  max: findings_max_order_by
  min: findings_min_order_by
}

"""
input type for inserting array relation for remote table "findings"
"""
input findings_arr_rel_insert_input {
  data: [findings_insert_input!]!

  """upsert condition"""
  on_conflict: findings_on_conflict
}

"""
Boolean expression to filter rows from the table "findings". All fields are combined with a logical 'AND'.
"""
input findings_bool_exp {
  _and: [findings_bool_exp!]
  _not: findings_bool_exp
  _or: [findings_bool_exp!]
  build: builds_bool_exp
  build_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  dedupe_slug: String_comparison_exp
  fix_state: fix_state_enum_comparison_exp
  fix_versions: _text_comparison_exp
  id: uuid_comparison_exp
  language: String_comparison_exp
  locations: _text_comparison_exp
  matcher: String_comparison_exp
  package_name: String_comparison_exp
  package_version: package_versions_bool_exp
  package_version_id: uuid_comparison_exp
  purl: String_comparison_exp
  scan: scans_bool_exp
  scan_id: uuid_comparison_exp
  severity: severity_enum_comparison_exp
  type: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  version: String_comparison_exp
  version_matcher: String_comparison_exp
  virtual_path: String_comparison_exp
  vulnerability: vulnerabilities_bool_exp
  vulnerability_id: uuid_comparison_exp
  vulnerability_package: vulnerability_packages_bool_exp
  vulnerability_package_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "findings"
"""
enum findings_constraint {
  """unique or primary key constraint"""
  findings_pkey

  """unique or primary key constraint"""
  temp_dedupe_fix
}

"""
input type for inserting data into table "findings"
"""
input findings_insert_input {
  build: builds_obj_rel_insert_input
  build_id: uuid
  created_at: timestamp
  dedupe_slug: String
  fix_state: fix_state_enum
  fix_versions: _text
  id: uuid
  language: String
  locations: _text
  matcher: String
  package_name: String
  package_version: package_versions_obj_rel_insert_input
  package_version_id: uuid
  purl: String
  scan: scans_obj_rel_insert_input
  scan_id: uuid
  severity: severity_enum
  type: String
  updated_at: timestamptz
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability: vulnerabilities_obj_rel_insert_input
  vulnerability_id: uuid
  vulnerability_package: vulnerability_packages_obj_rel_insert_input
  vulnerability_package_id: uuid
}

"""aggregate max on columns"""
type findings_max_fields {
  build_id: uuid
  created_at: timestamp
  dedupe_slug: String
  id: uuid
  language: String
  matcher: String
  package_name: String
  package_version_id: uuid
  purl: String
  scan_id: uuid
  type: String
  updated_at: timestamptz
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability_id: uuid
  vulnerability_package_id: uuid
}

"""
order by max() on columns of table "findings"
"""
input findings_max_order_by {
  build_id: order_by
  created_at: order_by
  dedupe_slug: order_by
  id: order_by
  language: order_by
  matcher: order_by
  package_name: order_by
  package_version_id: order_by
  purl: order_by
  scan_id: order_by
  type: order_by
  updated_at: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability_id: order_by
  vulnerability_package_id: order_by
}

"""aggregate min on columns"""
type findings_min_fields {
  build_id: uuid
  created_at: timestamp
  dedupe_slug: String
  id: uuid
  language: String
  matcher: String
  package_name: String
  package_version_id: uuid
  purl: String
  scan_id: uuid
  type: String
  updated_at: timestamptz
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability_id: uuid
  vulnerability_package_id: uuid
}

"""
order by min() on columns of table "findings"
"""
input findings_min_order_by {
  build_id: order_by
  created_at: order_by
  dedupe_slug: order_by
  id: order_by
  language: order_by
  matcher: order_by
  package_name: order_by
  package_version_id: order_by
  purl: order_by
  scan_id: order_by
  type: order_by
  updated_at: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability_id: order_by
  vulnerability_package_id: order_by
}

"""
response of any mutation on the table "findings"
"""
type findings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [findings!]!
}

"""
on_conflict condition type for table "findings"
"""
input findings_on_conflict {
  constraint: findings_constraint!
  update_columns: [findings_update_column!]! = []
  where: findings_bool_exp
}

"""Ordering options when selecting data from "findings"."""
input findings_order_by {
  build: builds_order_by
  build_id: order_by
  created_at: order_by
  dedupe_slug: order_by
  fix_state: order_by
  fix_versions: order_by
  id: order_by
  language: order_by
  locations: order_by
  matcher: order_by
  package_name: order_by
  package_version: package_versions_order_by
  package_version_id: order_by
  purl: order_by
  scan: scans_order_by
  scan_id: order_by
  severity: order_by
  type: order_by
  updated_at: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability: vulnerabilities_order_by
  vulnerability_id: order_by
  vulnerability_package: vulnerability_packages_order_by
  vulnerability_package_id: order_by
}

"""primary key columns input for table: findings"""
input findings_pk_columns_input {
  id: uuid!
}

"""
select columns of table "findings"
"""
enum findings_select_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  dedupe_slug

  """column name"""
  fix_state

  """column name"""
  fix_versions

  """column name"""
  id

  """column name"""
  language

  """column name"""
  locations

  """column name"""
  matcher

  """column name"""
  package_name

  """column name"""
  package_version_id

  """column name"""
  purl

  """column name"""
  scan_id

  """column name"""
  severity

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  version

  """column name"""
  version_matcher

  """column name"""
  virtual_path

  """column name"""
  vulnerability_id

  """column name"""
  vulnerability_package_id
}

"""
input type for updating data in table "findings"
"""
input findings_set_input {
  build_id: uuid
  created_at: timestamp
  dedupe_slug: String
  fix_state: fix_state_enum
  fix_versions: _text
  id: uuid
  language: String
  locations: _text
  matcher: String
  package_name: String
  package_version_id: uuid
  purl: String
  scan_id: uuid
  severity: severity_enum
  type: String
  updated_at: timestamptz
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability_id: uuid
  vulnerability_package_id: uuid
}

"""
update columns of table "findings"
"""
enum findings_update_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  dedupe_slug

  """column name"""
  fix_state

  """column name"""
  fix_versions

  """column name"""
  id

  """column name"""
  language

  """column name"""
  locations

  """column name"""
  matcher

  """column name"""
  package_name

  """column name"""
  package_version_id

  """column name"""
  purl

  """column name"""
  scan_id

  """column name"""
  severity

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  version

  """column name"""
  version_matcher

  """column name"""
  virtual_path

  """column name"""
  vulnerability_id

  """column name"""
  vulnerability_package_id
}

scalar fix_state_enum

"""
Boolean expression to compare columns of type "fix_state_enum". All fields are combined with logical 'AND'.
"""
input fix_state_enum_comparison_exp {
  _eq: fix_state_enum
  _gt: fix_state_enum
  _gte: fix_state_enum
  _in: [fix_state_enum!]
  _is_null: Boolean
  _lt: fix_state_enum
  _lte: fix_state_enum
  _neq: fix_state_enum
  _nin: [fix_state_enum!]
}

"""An ISO-8601 encoded UTC date string."""
scalar github_DateTime

"""A string containing HTML code."""
scalar github_HTML

type github_Query {
  """Lookup a user by login."""
  user(
    """The user's login."""
    login: String!
  ): github_User

  """The currently authenticated user."""
  viewer: github_User!
}

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar github_URI

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type github_User {
  """A URL pointing to the user's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): github_URI!

  """The user's public profile bio."""
  bio: String

  """The user's public profile bio as HTML."""
  bioHTML: github_HTML!

  """The user's public profile company."""
  company: String

  """The user's public profile company as HTML."""
  companyHTML: github_HTML!

  """Identifies the date and time when the object was created."""
  createdAt: github_DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The user's publicly visible profile email."""
  email: String!

  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """True if this user/organization has a GitHub Sponsors listing."""
  hasSponsorsListing: Boolean!
  id: ID!

  """
  Whether or not this user is a participant in the GitHub Security Bug Bounty.
  """
  isBountyHunter: Boolean!

  """
  Whether or not this user is a participant in the GitHub Campus Experts Program.
  """
  isCampusExpert: Boolean!

  """Whether or not this user is a GitHub Developer Program member."""
  isDeveloperProgramMember: Boolean!

  """Whether or not this user is a GitHub employee."""
  isEmployee: Boolean!

  """
  Whether or not this user is following the viewer. Inverse of viewer_is_following
  """
  isFollowingViewer: Boolean!

  """Whether or not this user is a member of the GitHub Stars Program."""
  isGitHubStar: Boolean!

  """Whether or not the user has marked themselves as for hire."""
  isHireable: Boolean!

  """Whether or not this user is a site administrator."""
  isSiteAdmin: Boolean!

  """True if the viewer is sponsored by this user/organization."""
  isSponsoringViewer: Boolean!

  """Whether or not this user is the viewing user."""
  isViewer: Boolean!

  """The user's public profile location."""
  location: String

  """The username used to login."""
  login: String!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """The user's public profile name."""
  name: String

  """
  Verified email addresses that match verified domains for a specified organization the user is a member of.
  """
  organizationVerifiedDomainEmails(
    """The login of the organization to match verified domains from."""
    login: String!
  ): [String!]!

  """The HTTP path listing user's projects"""
  projectsResourcePath: github_URI!

  """The HTTP URL listing user's projects"""
  projectsUrl: github_URI!

  """The HTTP path for this user"""
  resourcePath: github_URI!

  """The user's Twitter username."""
  twitterUsername: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: github_DateTime!

  """The HTTP URL for this user"""
  url: github_URI!

  """Can the viewer pin repositories and gists to the profile?"""
  viewerCanChangePinnedItems: Boolean!

  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!

  """Whether or not the viewer is able to follow the user."""
  viewerCanFollow: Boolean!

  """Whether or not the viewer is able to sponsor this user/organization."""
  viewerCanSponsor: Boolean!

  """
  Whether or not this user is followed by the viewer. Inverse of is_following_viewer.
  """
  viewerIsFollowing: Boolean!

  """True if the viewer is sponsoring this user/organization."""
  viewerIsSponsoring: Boolean!

  """A URL pointing to the user's public website/blog."""
  websiteUrl: github_URI
}

"""
Metadata about a github repository and where to find it.


columns and relationships of "github_repositories"

"""
type github_repositories {
  api_response(
    """JSON select path"""
    path: String
  ): jsonb!
  git_url: String!
  github_id: Int!
  id: uuid!

  """An object relationship"""
  project: projects!
  project_id: uuid!
}

"""
aggregated selection of "github_repositories"
"""
type github_repositories_aggregate {
  aggregate: github_repositories_aggregate_fields
  nodes: [github_repositories!]!
}

"""
aggregate fields of "github_repositories"
"""
type github_repositories_aggregate_fields {
  avg: github_repositories_avg_fields
  count(columns: [github_repositories_select_column!], distinct: Boolean): Int!
  max: github_repositories_max_fields
  min: github_repositories_min_fields
  stddev: github_repositories_stddev_fields
  stddev_pop: github_repositories_stddev_pop_fields
  stddev_samp: github_repositories_stddev_samp_fields
  sum: github_repositories_sum_fields
  var_pop: github_repositories_var_pop_fields
  var_samp: github_repositories_var_samp_fields
  variance: github_repositories_variance_fields
}

"""
order by aggregate values of table "github_repositories"
"""
input github_repositories_aggregate_order_by {
  avg: github_repositories_avg_order_by
  count: order_by
  max: github_repositories_max_order_by
  min: github_repositories_min_order_by
  stddev: github_repositories_stddev_order_by
  stddev_pop: github_repositories_stddev_pop_order_by
  stddev_samp: github_repositories_stddev_samp_order_by
  sum: github_repositories_sum_order_by
  var_pop: github_repositories_var_pop_order_by
  var_samp: github_repositories_var_samp_order_by
  variance: github_repositories_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input github_repositories_append_input {
  api_response: jsonb
}

"""
input type for inserting array relation for remote table "github_repositories"
"""
input github_repositories_arr_rel_insert_input {
  data: [github_repositories_insert_input!]!

  """upsert condition"""
  on_conflict: github_repositories_on_conflict
}

"""aggregate avg on columns"""
type github_repositories_avg_fields {
  github_id: Float
}

"""
order by avg() on columns of table "github_repositories"
"""
input github_repositories_avg_order_by {
  github_id: order_by
}

"""
Boolean expression to filter rows from the table "github_repositories". All fields are combined with a logical 'AND'.
"""
input github_repositories_bool_exp {
  _and: [github_repositories_bool_exp!]
  _not: github_repositories_bool_exp
  _or: [github_repositories_bool_exp!]
  api_response: jsonb_comparison_exp
  git_url: String_comparison_exp
  github_id: Int_comparison_exp
  id: uuid_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "github_repositories"
"""
enum github_repositories_constraint {
  """unique or primary key constraint"""
  github_repositories_github_id_key

  """unique or primary key constraint"""
  github_repositories_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input github_repositories_delete_at_path_input {
  api_response: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input github_repositories_delete_elem_input {
  api_response: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input github_repositories_delete_key_input {
  api_response: String
}

"""
input type for incrementing numeric columns in table "github_repositories"
"""
input github_repositories_inc_input {
  github_id: Int
}

"""
input type for inserting data into table "github_repositories"
"""
input github_repositories_insert_input {
  api_response: jsonb
  git_url: String
  github_id: Int
  id: uuid
  project: projects_obj_rel_insert_input
  project_id: uuid
}

"""aggregate max on columns"""
type github_repositories_max_fields {
  git_url: String
  github_id: Int
  id: uuid
  project_id: uuid
}

"""
order by max() on columns of table "github_repositories"
"""
input github_repositories_max_order_by {
  git_url: order_by
  github_id: order_by
  id: order_by
  project_id: order_by
}

"""aggregate min on columns"""
type github_repositories_min_fields {
  git_url: String
  github_id: Int
  id: uuid
  project_id: uuid
}

"""
order by min() on columns of table "github_repositories"
"""
input github_repositories_min_order_by {
  git_url: order_by
  github_id: order_by
  id: order_by
  project_id: order_by
}

"""
response of any mutation on the table "github_repositories"
"""
type github_repositories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [github_repositories!]!
}

"""
on_conflict condition type for table "github_repositories"
"""
input github_repositories_on_conflict {
  constraint: github_repositories_constraint!
  update_columns: [github_repositories_update_column!]! = []
  where: github_repositories_bool_exp
}

"""Ordering options when selecting data from "github_repositories"."""
input github_repositories_order_by {
  api_response: order_by
  git_url: order_by
  github_id: order_by
  id: order_by
  project: projects_order_by
  project_id: order_by
}

"""primary key columns input for table: github_repositories"""
input github_repositories_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input github_repositories_prepend_input {
  api_response: jsonb
}

"""
select columns of table "github_repositories"
"""
enum github_repositories_select_column {
  """column name"""
  api_response

  """column name"""
  git_url

  """column name"""
  github_id

  """column name"""
  id

  """column name"""
  project_id
}

"""
input type for updating data in table "github_repositories"
"""
input github_repositories_set_input {
  api_response: jsonb
  git_url: String
  github_id: Int
  id: uuid
  project_id: uuid
}

"""aggregate stddev on columns"""
type github_repositories_stddev_fields {
  github_id: Float
}

"""
order by stddev() on columns of table "github_repositories"
"""
input github_repositories_stddev_order_by {
  github_id: order_by
}

"""aggregate stddev_pop on columns"""
type github_repositories_stddev_pop_fields {
  github_id: Float
}

"""
order by stddev_pop() on columns of table "github_repositories"
"""
input github_repositories_stddev_pop_order_by {
  github_id: order_by
}

"""aggregate stddev_samp on columns"""
type github_repositories_stddev_samp_fields {
  github_id: Float
}

"""
order by stddev_samp() on columns of table "github_repositories"
"""
input github_repositories_stddev_samp_order_by {
  github_id: order_by
}

"""aggregate sum on columns"""
type github_repositories_sum_fields {
  github_id: Int
}

"""
order by sum() on columns of table "github_repositories"
"""
input github_repositories_sum_order_by {
  github_id: order_by
}

"""
update columns of table "github_repositories"
"""
enum github_repositories_update_column {
  """column name"""
  api_response

  """column name"""
  git_url

  """column name"""
  github_id

  """column name"""
  id

  """column name"""
  project_id
}

"""aggregate var_pop on columns"""
type github_repositories_var_pop_fields {
  github_id: Float
}

"""
order by var_pop() on columns of table "github_repositories"
"""
input github_repositories_var_pop_order_by {
  github_id: order_by
}

"""aggregate var_samp on columns"""
type github_repositories_var_samp_fields {
  github_id: Float
}

"""
order by var_samp() on columns of table "github_repositories"
"""
input github_repositories_var_samp_order_by {
  github_id: order_by
}

"""aggregate variance on columns"""
type github_repositories_variance_fields {
  github_id: Float
}

"""
order by variance() on columns of table "github_repositories"
"""
input github_repositories_variance_order_by {
  github_id: order_by
}

"""
columns and relationships of "identities"
"""
type identities {
  created_at: timestamp!
  id: uuid!

  """An array relationship"""
  identity_verifiable_addresses(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): [identity_verifiable_addresses!]!

  """An aggregate relationship"""
  identity_verifiable_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): identity_verifiable_addresses_aggregate!
  nid: uuid

  """An array relationship"""
  organization_users(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """An aggregate relationship"""
  organization_users_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): organization_user_aggregate!
  schema_id: String!
  state: String!
  state_changed_at: timestamp
  traits(
    """JSON select path"""
    path: String
  ): jsonb!
  updated_at: timestamp!
}

"""
aggregated selection of "identities"
"""
type identities_aggregate {
  aggregate: identities_aggregate_fields
  nodes: [identities!]!
}

"""
aggregate fields of "identities"
"""
type identities_aggregate_fields {
  count(columns: [identities_select_column!], distinct: Boolean): Int!
  max: identities_max_fields
  min: identities_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input identities_append_input {
  traits: jsonb
}

"""
Boolean expression to filter rows from the table "identities". All fields are combined with a logical 'AND'.
"""
input identities_bool_exp {
  _and: [identities_bool_exp!]
  _not: identities_bool_exp
  _or: [identities_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  identity_verifiable_addresses: identity_verifiable_addresses_bool_exp
  nid: uuid_comparison_exp
  organization_users: organization_user_bool_exp
  schema_id: String_comparison_exp
  state: String_comparison_exp
  state_changed_at: timestamp_comparison_exp
  traits: jsonb_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "identities"
"""
enum identities_constraint {
  """unique or primary key constraint"""
  identities_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input identities_delete_at_path_input {
  traits: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input identities_delete_elem_input {
  traits: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input identities_delete_key_input {
  traits: String
}

"""
input type for inserting data into table "identities"
"""
input identities_insert_input {
  created_at: timestamp
  id: uuid
  identity_verifiable_addresses: identity_verifiable_addresses_arr_rel_insert_input
  nid: uuid
  organization_users: organization_user_arr_rel_insert_input
  schema_id: String
  state: String
  state_changed_at: timestamp
  traits: jsonb
  updated_at: timestamp
}

"""aggregate max on columns"""
type identities_max_fields {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  updated_at: timestamp
}

"""aggregate min on columns"""
type identities_min_fields {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  updated_at: timestamp
}

"""
response of any mutation on the table "identities"
"""
type identities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identities!]!
}

"""
input type for inserting object relation for remote table "identities"
"""
input identities_obj_rel_insert_input {
  data: identities_insert_input!

  """upsert condition"""
  on_conflict: identities_on_conflict
}

"""
on_conflict condition type for table "identities"
"""
input identities_on_conflict {
  constraint: identities_constraint!
  update_columns: [identities_update_column!]! = []
  where: identities_bool_exp
}

"""Ordering options when selecting data from "identities"."""
input identities_order_by {
  created_at: order_by
  id: order_by
  identity_verifiable_addresses_aggregate: identity_verifiable_addresses_aggregate_order_by
  nid: order_by
  organization_users_aggregate: organization_user_aggregate_order_by
  schema_id: order_by
  state: order_by
  state_changed_at: order_by
  traits: order_by
  updated_at: order_by
}

"""primary key columns input for table: identities"""
input identities_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input identities_prepend_input {
  traits: jsonb
}

"""
select columns of table "identities"
"""
enum identities_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nid

  """column name"""
  schema_id

  """column name"""
  state

  """column name"""
  state_changed_at

  """column name"""
  traits

  """column name"""
  updated_at
}

"""
input type for updating data in table "identities"
"""
input identities_set_input {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  traits: jsonb
  updated_at: timestamp
}

"""
update columns of table "identities"
"""
enum identities_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nid

  """column name"""
  schema_id

  """column name"""
  state

  """column name"""
  state_changed_at

  """column name"""
  traits

  """column name"""
  updated_at
}

"""
columns and relationships of "identity_credential_identifiers"
"""
type identity_credential_identifiers {
  created_at: timestamp!
  id: uuid!
  identifier: String!
  identity_credential_id: uuid!
  identity_credential_type_id: uuid!
  nid: uuid
  updated_at: timestamp!
}

"""
aggregated selection of "identity_credential_identifiers"
"""
type identity_credential_identifiers_aggregate {
  aggregate: identity_credential_identifiers_aggregate_fields
  nodes: [identity_credential_identifiers!]!
}

"""
aggregate fields of "identity_credential_identifiers"
"""
type identity_credential_identifiers_aggregate_fields {
  count(columns: [identity_credential_identifiers_select_column!], distinct: Boolean): Int!
  max: identity_credential_identifiers_max_fields
  min: identity_credential_identifiers_min_fields
}

"""
Boolean expression to filter rows from the table "identity_credential_identifiers". All fields are combined with a logical 'AND'.
"""
input identity_credential_identifiers_bool_exp {
  _and: [identity_credential_identifiers_bool_exp!]
  _not: identity_credential_identifiers_bool_exp
  _or: [identity_credential_identifiers_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  identifier: String_comparison_exp
  identity_credential_id: uuid_comparison_exp
  identity_credential_type_id: uuid_comparison_exp
  nid: uuid_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "identity_credential_identifiers"
"""
enum identity_credential_identifiers_constraint {
  """unique or primary key constraint"""
  identity_credential_identifiers_identifier_nid_type_uq_idx

  """unique or primary key constraint"""
  identity_credential_identifiers_pkey
}

"""
input type for inserting data into table "identity_credential_identifiers"
"""
input identity_credential_identifiers_insert_input {
  created_at: timestamp
  id: uuid
  identifier: String
  identity_credential_id: uuid
  identity_credential_type_id: uuid
  nid: uuid
  updated_at: timestamp
}

"""aggregate max on columns"""
type identity_credential_identifiers_max_fields {
  created_at: timestamp
  id: uuid
  identifier: String
  identity_credential_id: uuid
  identity_credential_type_id: uuid
  nid: uuid
  updated_at: timestamp
}

"""aggregate min on columns"""
type identity_credential_identifiers_min_fields {
  created_at: timestamp
  id: uuid
  identifier: String
  identity_credential_id: uuid
  identity_credential_type_id: uuid
  nid: uuid
  updated_at: timestamp
}

"""
response of any mutation on the table "identity_credential_identifiers"
"""
type identity_credential_identifiers_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identity_credential_identifiers!]!
}

"""
on_conflict condition type for table "identity_credential_identifiers"
"""
input identity_credential_identifiers_on_conflict {
  constraint: identity_credential_identifiers_constraint!
  update_columns: [identity_credential_identifiers_update_column!]! = []
  where: identity_credential_identifiers_bool_exp
}

"""
Ordering options when selecting data from "identity_credential_identifiers".
"""
input identity_credential_identifiers_order_by {
  created_at: order_by
  id: order_by
  identifier: order_by
  identity_credential_id: order_by
  identity_credential_type_id: order_by
  nid: order_by
  updated_at: order_by
}

"""primary key columns input for table: identity_credential_identifiers"""
input identity_credential_identifiers_pk_columns_input {
  id: uuid!
}

"""
select columns of table "identity_credential_identifiers"
"""
enum identity_credential_identifiers_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  identifier

  """column name"""
  identity_credential_id

  """column name"""
  identity_credential_type_id

  """column name"""
  nid

  """column name"""
  updated_at
}

"""
input type for updating data in table "identity_credential_identifiers"
"""
input identity_credential_identifiers_set_input {
  created_at: timestamp
  id: uuid
  identifier: String
  identity_credential_id: uuid
  identity_credential_type_id: uuid
  nid: uuid
  updated_at: timestamp
}

"""
update columns of table "identity_credential_identifiers"
"""
enum identity_credential_identifiers_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  identifier

  """column name"""
  identity_credential_id

  """column name"""
  identity_credential_type_id

  """column name"""
  nid

  """column name"""
  updated_at
}

"""
columns and relationships of "identity_credential_types"
"""
type identity_credential_types {
  id: uuid!
  name: String!
}

"""
aggregated selection of "identity_credential_types"
"""
type identity_credential_types_aggregate {
  aggregate: identity_credential_types_aggregate_fields
  nodes: [identity_credential_types!]!
}

"""
aggregate fields of "identity_credential_types"
"""
type identity_credential_types_aggregate_fields {
  count(columns: [identity_credential_types_select_column!], distinct: Boolean): Int!
  max: identity_credential_types_max_fields
  min: identity_credential_types_min_fields
}

"""
Boolean expression to filter rows from the table "identity_credential_types". All fields are combined with a logical 'AND'.
"""
input identity_credential_types_bool_exp {
  _and: [identity_credential_types_bool_exp!]
  _not: identity_credential_types_bool_exp
  _or: [identity_credential_types_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "identity_credential_types"
"""
enum identity_credential_types_constraint {
  """unique or primary key constraint"""
  identity_credential_types_name_idx

  """unique or primary key constraint"""
  identity_credential_types_pkey
}

"""
input type for inserting data into table "identity_credential_types"
"""
input identity_credential_types_insert_input {
  id: uuid
  name: String
}

"""aggregate max on columns"""
type identity_credential_types_max_fields {
  id: uuid
  name: String
}

"""aggregate min on columns"""
type identity_credential_types_min_fields {
  id: uuid
  name: String
}

"""
response of any mutation on the table "identity_credential_types"
"""
type identity_credential_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identity_credential_types!]!
}

"""
on_conflict condition type for table "identity_credential_types"
"""
input identity_credential_types_on_conflict {
  constraint: identity_credential_types_constraint!
  update_columns: [identity_credential_types_update_column!]! = []
  where: identity_credential_types_bool_exp
}

"""Ordering options when selecting data from "identity_credential_types"."""
input identity_credential_types_order_by {
  id: order_by
  name: order_by
}

"""primary key columns input for table: identity_credential_types"""
input identity_credential_types_pk_columns_input {
  id: uuid!
}

"""
select columns of table "identity_credential_types"
"""
enum identity_credential_types_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "identity_credential_types"
"""
input identity_credential_types_set_input {
  id: uuid
  name: String
}

"""
update columns of table "identity_credential_types"
"""
enum identity_credential_types_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""
columns and relationships of "identity_credentials"
"""
type identity_credentials {
  config(
    """JSON select path"""
    path: String
  ): jsonb!
  created_at: timestamp!
  id: uuid!
  identity_credential_type_id: uuid!
  identity_id: uuid!
  nid: uuid
  updated_at: timestamp!
}

"""
aggregated selection of "identity_credentials"
"""
type identity_credentials_aggregate {
  aggregate: identity_credentials_aggregate_fields
  nodes: [identity_credentials!]!
}

"""
aggregate fields of "identity_credentials"
"""
type identity_credentials_aggregate_fields {
  count(columns: [identity_credentials_select_column!], distinct: Boolean): Int!
  max: identity_credentials_max_fields
  min: identity_credentials_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input identity_credentials_append_input {
  config: jsonb
}

"""
Boolean expression to filter rows from the table "identity_credentials". All fields are combined with a logical 'AND'.
"""
input identity_credentials_bool_exp {
  _and: [identity_credentials_bool_exp!]
  _not: identity_credentials_bool_exp
  _or: [identity_credentials_bool_exp!]
  config: jsonb_comparison_exp
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  identity_credential_type_id: uuid_comparison_exp
  identity_id: uuid_comparison_exp
  nid: uuid_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "identity_credentials"
"""
enum identity_credentials_constraint {
  """unique or primary key constraint"""
  identity_credentials_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input identity_credentials_delete_at_path_input {
  config: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input identity_credentials_delete_elem_input {
  config: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input identity_credentials_delete_key_input {
  config: String
}

"""
input type for inserting data into table "identity_credentials"
"""
input identity_credentials_insert_input {
  config: jsonb
  created_at: timestamp
  id: uuid
  identity_credential_type_id: uuid
  identity_id: uuid
  nid: uuid
  updated_at: timestamp
}

"""aggregate max on columns"""
type identity_credentials_max_fields {
  created_at: timestamp
  id: uuid
  identity_credential_type_id: uuid
  identity_id: uuid
  nid: uuid
  updated_at: timestamp
}

"""aggregate min on columns"""
type identity_credentials_min_fields {
  created_at: timestamp
  id: uuid
  identity_credential_type_id: uuid
  identity_id: uuid
  nid: uuid
  updated_at: timestamp
}

"""
response of any mutation on the table "identity_credentials"
"""
type identity_credentials_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identity_credentials!]!
}

"""
on_conflict condition type for table "identity_credentials"
"""
input identity_credentials_on_conflict {
  constraint: identity_credentials_constraint!
  update_columns: [identity_credentials_update_column!]! = []
  where: identity_credentials_bool_exp
}

"""Ordering options when selecting data from "identity_credentials"."""
input identity_credentials_order_by {
  config: order_by
  created_at: order_by
  id: order_by
  identity_credential_type_id: order_by
  identity_id: order_by
  nid: order_by
  updated_at: order_by
}

"""primary key columns input for table: identity_credentials"""
input identity_credentials_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input identity_credentials_prepend_input {
  config: jsonb
}

"""
select columns of table "identity_credentials"
"""
enum identity_credentials_select_column {
  """column name"""
  config

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  identity_credential_type_id

  """column name"""
  identity_id

  """column name"""
  nid

  """column name"""
  updated_at
}

"""
input type for updating data in table "identity_credentials"
"""
input identity_credentials_set_input {
  config: jsonb
  created_at: timestamp
  id: uuid
  identity_credential_type_id: uuid
  identity_id: uuid
  nid: uuid
  updated_at: timestamp
}

"""
update columns of table "identity_credentials"
"""
enum identity_credentials_update_column {
  """column name"""
  config

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  identity_credential_type_id

  """column name"""
  identity_id

  """column name"""
  nid

  """column name"""
  updated_at
}

"""
columns and relationships of "identity_verifiable_addresses"
"""
type identity_verifiable_addresses {
  created_at: timestamp!
  id: uuid!

  """An object relationship"""
  identity: identities!
  identity_id: uuid!
  nid: uuid
  status: String!
  updated_at: timestamp!
  value: String!
  verified: Boolean!
  verified_at: timestamp
  via: String!
}

"""
aggregated selection of "identity_verifiable_addresses"
"""
type identity_verifiable_addresses_aggregate {
  aggregate: identity_verifiable_addresses_aggregate_fields
  nodes: [identity_verifiable_addresses!]!
}

"""
aggregate fields of "identity_verifiable_addresses"
"""
type identity_verifiable_addresses_aggregate_fields {
  count(columns: [identity_verifiable_addresses_select_column!], distinct: Boolean): Int!
  max: identity_verifiable_addresses_max_fields
  min: identity_verifiable_addresses_min_fields
}

"""
order by aggregate values of table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_aggregate_order_by {
  count: order_by
  max: identity_verifiable_addresses_max_order_by
  min: identity_verifiable_addresses_min_order_by
}

"""
input type for inserting array relation for remote table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_arr_rel_insert_input {
  data: [identity_verifiable_addresses_insert_input!]!

  """upsert condition"""
  on_conflict: identity_verifiable_addresses_on_conflict
}

"""
Boolean expression to filter rows from the table "identity_verifiable_addresses". All fields are combined with a logical 'AND'.
"""
input identity_verifiable_addresses_bool_exp {
  _and: [identity_verifiable_addresses_bool_exp!]
  _not: identity_verifiable_addresses_bool_exp
  _or: [identity_verifiable_addresses_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  identity: identities_bool_exp
  identity_id: uuid_comparison_exp
  nid: uuid_comparison_exp
  status: String_comparison_exp
  updated_at: timestamp_comparison_exp
  value: String_comparison_exp
  verified: Boolean_comparison_exp
  verified_at: timestamp_comparison_exp
  via: String_comparison_exp
}

"""
unique or primary key constraints on table "identity_verifiable_addresses"
"""
enum identity_verifiable_addresses_constraint {
  """unique or primary key constraint"""
  identity_verifiable_addresses_pkey

  """unique or primary key constraint"""
  identity_verifiable_addresses_status_via_uq_idx
}

"""
input type for inserting data into table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_insert_input {
  created_at: timestamp
  id: uuid
  identity: identities_obj_rel_insert_input
  identity_id: uuid
  nid: uuid
  status: String
  updated_at: timestamp
  value: String
  verified: Boolean
  verified_at: timestamp
  via: String
}

"""aggregate max on columns"""
type identity_verifiable_addresses_max_fields {
  created_at: timestamp
  id: uuid
  identity_id: uuid
  nid: uuid
  status: String
  updated_at: timestamp
  value: String
  verified_at: timestamp
  via: String
}

"""
order by max() on columns of table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_max_order_by {
  created_at: order_by
  id: order_by
  identity_id: order_by
  nid: order_by
  status: order_by
  updated_at: order_by
  value: order_by
  verified_at: order_by
  via: order_by
}

"""aggregate min on columns"""
type identity_verifiable_addresses_min_fields {
  created_at: timestamp
  id: uuid
  identity_id: uuid
  nid: uuid
  status: String
  updated_at: timestamp
  value: String
  verified_at: timestamp
  via: String
}

"""
order by min() on columns of table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_min_order_by {
  created_at: order_by
  id: order_by
  identity_id: order_by
  nid: order_by
  status: order_by
  updated_at: order_by
  value: order_by
  verified_at: order_by
  via: order_by
}

"""
response of any mutation on the table "identity_verifiable_addresses"
"""
type identity_verifiable_addresses_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identity_verifiable_addresses!]!
}

"""
on_conflict condition type for table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_on_conflict {
  constraint: identity_verifiable_addresses_constraint!
  update_columns: [identity_verifiable_addresses_update_column!]! = []
  where: identity_verifiable_addresses_bool_exp
}

"""
Ordering options when selecting data from "identity_verifiable_addresses".
"""
input identity_verifiable_addresses_order_by {
  created_at: order_by
  id: order_by
  identity: identities_order_by
  identity_id: order_by
  nid: order_by
  status: order_by
  updated_at: order_by
  value: order_by
  verified: order_by
  verified_at: order_by
  via: order_by
}

"""primary key columns input for table: identity_verifiable_addresses"""
input identity_verifiable_addresses_pk_columns_input {
  id: uuid!
}

"""
select columns of table "identity_verifiable_addresses"
"""
enum identity_verifiable_addresses_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  identity_id

  """column name"""
  nid

  """column name"""
  status

  """column name"""
  updated_at

  """column name"""
  value

  """column name"""
  verified

  """column name"""
  verified_at

  """column name"""
  via
}

"""
input type for updating data in table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_set_input {
  created_at: timestamp
  id: uuid
  identity_id: uuid
  nid: uuid
  status: String
  updated_at: timestamp
  value: String
  verified: Boolean
  verified_at: timestamp
  via: String
}

"""
update columns of table "identity_verifiable_addresses"
"""
enum identity_verifiable_addresses_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  identity_id

  """column name"""
  nid

  """column name"""
  status

  """column name"""
  updated_at

  """column name"""
  value

  """column name"""
  verified

  """column name"""
  verified_at

  """column name"""
  via
}

"""
columns and relationships of "ignored_vulnerabilities"
"""
type ignored_vulnerabilities {
  """An object relationship"""
  creator: identities
  creator_id: uuid
  id: uuid!
  locations(
    """JSON select path"""
    path: String
  ): jsonb!
  note: String!

  """An object relationship"""
  project: projects!
  project_id: uuid!

  """An object relationship"""
  vulnerability: vulnerabilities!
  vulnerability_id: uuid!
}

"""
aggregated selection of "ignored_vulnerabilities"
"""
type ignored_vulnerabilities_aggregate {
  aggregate: ignored_vulnerabilities_aggregate_fields
  nodes: [ignored_vulnerabilities!]!
}

"""
aggregate fields of "ignored_vulnerabilities"
"""
type ignored_vulnerabilities_aggregate_fields {
  count(columns: [ignored_vulnerabilities_select_column!], distinct: Boolean): Int!
  max: ignored_vulnerabilities_max_fields
  min: ignored_vulnerabilities_min_fields
}

"""
order by aggregate values of table "ignored_vulnerabilities"
"""
input ignored_vulnerabilities_aggregate_order_by {
  count: order_by
  max: ignored_vulnerabilities_max_order_by
  min: ignored_vulnerabilities_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input ignored_vulnerabilities_append_input {
  locations: jsonb
}

"""
input type for inserting array relation for remote table "ignored_vulnerabilities"
"""
input ignored_vulnerabilities_arr_rel_insert_input {
  data: [ignored_vulnerabilities_insert_input!]!

  """upsert condition"""
  on_conflict: ignored_vulnerabilities_on_conflict
}

"""
Boolean expression to filter rows from the table "ignored_vulnerabilities". All fields are combined with a logical 'AND'.
"""
input ignored_vulnerabilities_bool_exp {
  _and: [ignored_vulnerabilities_bool_exp!]
  _not: ignored_vulnerabilities_bool_exp
  _or: [ignored_vulnerabilities_bool_exp!]
  creator: identities_bool_exp
  creator_id: uuid_comparison_exp
  id: uuid_comparison_exp
  locations: jsonb_comparison_exp
  note: String_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  vulnerability: vulnerabilities_bool_exp
  vulnerability_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "ignored_vulnerabilities"
"""
enum ignored_vulnerabilities_constraint {
  """unique or primary key constraint"""
  ignored_vulnerabilities_pkey

  """unique or primary key constraint"""
  ignored_vulnerabilities_project_id_vulnerability_id_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input ignored_vulnerabilities_delete_at_path_input {
  locations: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input ignored_vulnerabilities_delete_elem_input {
  locations: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input ignored_vulnerabilities_delete_key_input {
  locations: String
}

"""
input type for inserting data into table "ignored_vulnerabilities"
"""
input ignored_vulnerabilities_insert_input {
  creator: identities_obj_rel_insert_input
  creator_id: uuid
  id: uuid
  locations: jsonb
  note: String
  project: projects_obj_rel_insert_input
  project_id: uuid
  vulnerability: vulnerabilities_obj_rel_insert_input
  vulnerability_id: uuid
}

"""aggregate max on columns"""
type ignored_vulnerabilities_max_fields {
  creator_id: uuid
  id: uuid
  note: String
  project_id: uuid
  vulnerability_id: uuid
}

"""
order by max() on columns of table "ignored_vulnerabilities"
"""
input ignored_vulnerabilities_max_order_by {
  creator_id: order_by
  id: order_by
  note: order_by
  project_id: order_by
  vulnerability_id: order_by
}

"""aggregate min on columns"""
type ignored_vulnerabilities_min_fields {
  creator_id: uuid
  id: uuid
  note: String
  project_id: uuid
  vulnerability_id: uuid
}

"""
order by min() on columns of table "ignored_vulnerabilities"
"""
input ignored_vulnerabilities_min_order_by {
  creator_id: order_by
  id: order_by
  note: order_by
  project_id: order_by
  vulnerability_id: order_by
}

"""
response of any mutation on the table "ignored_vulnerabilities"
"""
type ignored_vulnerabilities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ignored_vulnerabilities!]!
}

"""
on_conflict condition type for table "ignored_vulnerabilities"
"""
input ignored_vulnerabilities_on_conflict {
  constraint: ignored_vulnerabilities_constraint!
  update_columns: [ignored_vulnerabilities_update_column!]! = []
  where: ignored_vulnerabilities_bool_exp
}

"""Ordering options when selecting data from "ignored_vulnerabilities"."""
input ignored_vulnerabilities_order_by {
  creator: identities_order_by
  creator_id: order_by
  id: order_by
  locations: order_by
  note: order_by
  project: projects_order_by
  project_id: order_by
  vulnerability: vulnerabilities_order_by
  vulnerability_id: order_by
}

"""primary key columns input for table: ignored_vulnerabilities"""
input ignored_vulnerabilities_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input ignored_vulnerabilities_prepend_input {
  locations: jsonb
}

"""
select columns of table "ignored_vulnerabilities"
"""
enum ignored_vulnerabilities_select_column {
  """column name"""
  creator_id

  """column name"""
  id

  """column name"""
  locations

  """column name"""
  note

  """column name"""
  project_id

  """column name"""
  vulnerability_id
}

"""
input type for updating data in table "ignored_vulnerabilities"
"""
input ignored_vulnerabilities_set_input {
  creator_id: uuid
  id: uuid
  locations: jsonb
  note: String
  project_id: uuid
  vulnerability_id: uuid
}

"""
update columns of table "ignored_vulnerabilities"
"""
enum ignored_vulnerabilities_update_column {
  """column name"""
  creator_id

  """column name"""
  id

  """column name"""
  locations

  """column name"""
  note

  """column name"""
  project_id

  """column name"""
  vulnerability_id
}

"""
columns and relationships of "instances"
"""
type instances {
  agent_access_token: uuid

  """An object relationship"""
  build: builds
  created_at: timestamp!
  instance_id: uuid!
  last_heartbeat: timestamp!
}

"""
aggregated selection of "instances"
"""
type instances_aggregate {
  aggregate: instances_aggregate_fields
  nodes: [instances!]!
}

"""
aggregate fields of "instances"
"""
type instances_aggregate_fields {
  count(columns: [instances_select_column!], distinct: Boolean): Int!
  max: instances_max_fields
  min: instances_min_fields
}

"""
Boolean expression to filter rows from the table "instances". All fields are combined with a logical 'AND'.
"""
input instances_bool_exp {
  _and: [instances_bool_exp!]
  _not: instances_bool_exp
  _or: [instances_bool_exp!]
  agent_access_token: uuid_comparison_exp
  build: builds_bool_exp
  created_at: timestamp_comparison_exp
  instance_id: uuid_comparison_exp
  last_heartbeat: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "instances"
"""
enum instances_constraint {
  """unique or primary key constraint"""
  instances_pkey
}

"""
input type for inserting data into table "instances"
"""
input instances_insert_input {
  agent_access_token: uuid
  build: builds_obj_rel_insert_input
  created_at: timestamp
  instance_id: uuid
  last_heartbeat: timestamp
}

"""aggregate max on columns"""
type instances_max_fields {
  agent_access_token: uuid
  created_at: timestamp
  instance_id: uuid
  last_heartbeat: timestamp
}

"""aggregate min on columns"""
type instances_min_fields {
  agent_access_token: uuid
  created_at: timestamp
  instance_id: uuid
  last_heartbeat: timestamp
}

"""
response of any mutation on the table "instances"
"""
type instances_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [instances!]!
}

"""
on_conflict condition type for table "instances"
"""
input instances_on_conflict {
  constraint: instances_constraint!
  update_columns: [instances_update_column!]! = []
  where: instances_bool_exp
}

"""Ordering options when selecting data from "instances"."""
input instances_order_by {
  agent_access_token: order_by
  build: builds_order_by
  created_at: order_by
  instance_id: order_by
  last_heartbeat: order_by
}

"""primary key columns input for table: instances"""
input instances_pk_columns_input {
  instance_id: uuid!
}

"""
select columns of table "instances"
"""
enum instances_select_column {
  """column name"""
  agent_access_token

  """column name"""
  created_at

  """column name"""
  instance_id

  """column name"""
  last_heartbeat
}

"""
input type for updating data in table "instances"
"""
input instances_set_input {
  agent_access_token: uuid
  created_at: timestamp
  instance_id: uuid
  last_heartbeat: timestamp
}

"""
update columns of table "instances"
"""
enum instances_update_column {
  """column name"""
  agent_access_token

  """column name"""
  created_at

  """column name"""
  instance_id

  """column name"""
  last_heartbeat
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "manifests"
"""
type manifests {
  """An object relationship"""
  build: builds
  build_id: uuid
  created_at: timestamp!
  filename: String!
  id: uuid!
  message: String

  """An object relationship"""
  project: projects!
  project_id: uuid!
  s3_key: String!
  s3_url: String!
  status: String
}

"""
aggregated selection of "manifests"
"""
type manifests_aggregate {
  aggregate: manifests_aggregate_fields
  nodes: [manifests!]!
}

"""
aggregate fields of "manifests"
"""
type manifests_aggregate_fields {
  count(columns: [manifests_select_column!], distinct: Boolean): Int!
  max: manifests_max_fields
  min: manifests_min_fields
}

"""
order by aggregate values of table "manifests"
"""
input manifests_aggregate_order_by {
  count: order_by
  max: manifests_max_order_by
  min: manifests_min_order_by
}

"""
input type for inserting array relation for remote table "manifests"
"""
input manifests_arr_rel_insert_input {
  data: [manifests_insert_input!]!

  """upsert condition"""
  on_conflict: manifests_on_conflict
}

"""
Boolean expression to filter rows from the table "manifests". All fields are combined with a logical 'AND'.
"""
input manifests_bool_exp {
  _and: [manifests_bool_exp!]
  _not: manifests_bool_exp
  _or: [manifests_bool_exp!]
  build: builds_bool_exp
  build_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  filename: String_comparison_exp
  id: uuid_comparison_exp
  message: String_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  s3_key: String_comparison_exp
  s3_url: String_comparison_exp
  status: String_comparison_exp
}

"""
unique or primary key constraints on table "manifests"
"""
enum manifests_constraint {
  """unique or primary key constraint"""
  manifests_pkey

  """unique or primary key constraint"""
  manifests_s3_url_key
}

"""
input type for inserting data into table "manifests"
"""
input manifests_insert_input {
  build: builds_obj_rel_insert_input
  build_id: uuid
  created_at: timestamp
  filename: String
  id: uuid
  message: String
  project: projects_obj_rel_insert_input
  project_id: uuid
  s3_key: String
  s3_url: String
  status: String
}

"""aggregate max on columns"""
type manifests_max_fields {
  build_id: uuid
  created_at: timestamp
  filename: String
  id: uuid
  message: String
  project_id: uuid
  s3_key: String
  s3_url: String
  status: String
}

"""
order by max() on columns of table "manifests"
"""
input manifests_max_order_by {
  build_id: order_by
  created_at: order_by
  filename: order_by
  id: order_by
  message: order_by
  project_id: order_by
  s3_key: order_by
  s3_url: order_by
  status: order_by
}

"""aggregate min on columns"""
type manifests_min_fields {
  build_id: uuid
  created_at: timestamp
  filename: String
  id: uuid
  message: String
  project_id: uuid
  s3_key: String
  s3_url: String
  status: String
}

"""
order by min() on columns of table "manifests"
"""
input manifests_min_order_by {
  build_id: order_by
  created_at: order_by
  filename: order_by
  id: order_by
  message: order_by
  project_id: order_by
  s3_key: order_by
  s3_url: order_by
  status: order_by
}

"""
response of any mutation on the table "manifests"
"""
type manifests_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [manifests!]!
}

"""
on_conflict condition type for table "manifests"
"""
input manifests_on_conflict {
  constraint: manifests_constraint!
  update_columns: [manifests_update_column!]! = []
  where: manifests_bool_exp
}

"""Ordering options when selecting data from "manifests"."""
input manifests_order_by {
  build: builds_order_by
  build_id: order_by
  created_at: order_by
  filename: order_by
  id: order_by
  message: order_by
  project: projects_order_by
  project_id: order_by
  s3_key: order_by
  s3_url: order_by
  status: order_by
}

"""primary key columns input for table: manifests"""
input manifests_pk_columns_input {
  id: uuid!
}

"""
select columns of table "manifests"
"""
enum manifests_select_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  filename

  """column name"""
  id

  """column name"""
  message

  """column name"""
  project_id

  """column name"""
  s3_key

  """column name"""
  s3_url

  """column name"""
  status
}

"""
input type for updating data in table "manifests"
"""
input manifests_set_input {
  build_id: uuid
  created_at: timestamp
  filename: String
  id: uuid
  message: String
  project_id: uuid
  s3_key: String
  s3_url: String
  status: String
}

"""
update columns of table "manifests"
"""
enum manifests_update_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  filename

  """column name"""
  id

  """column name"""
  message

  """column name"""
  project_id

  """column name"""
  s3_key

  """column name"""
  s3_url

  """column name"""
  status
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "builds"
  """
  delete_builds(
    """filter the rows which have to be deleted"""
    where: builds_bool_exp!
  ): builds_mutation_response

  """
  delete single row from the table: "builds"
  """
  delete_builds_by_pk(id: uuid!): builds

  """
  delete data from the table: "findings"
  """
  delete_findings(
    """filter the rows which have to be deleted"""
    where: findings_bool_exp!
  ): findings_mutation_response

  """
  delete single row from the table: "findings"
  """
  delete_findings_by_pk(id: uuid!): findings

  """
  delete data from the table: "github_repositories"
  """
  delete_github_repositories(
    """filter the rows which have to be deleted"""
    where: github_repositories_bool_exp!
  ): github_repositories_mutation_response

  """
  delete single row from the table: "github_repositories"
  """
  delete_github_repositories_by_pk(id: uuid!): github_repositories

  """
  delete data from the table: "identities"
  """
  delete_identities(
    """filter the rows which have to be deleted"""
    where: identities_bool_exp!
  ): identities_mutation_response

  """
  delete single row from the table: "identities"
  """
  delete_identities_by_pk(id: uuid!): identities

  """
  delete data from the table: "identity_credential_identifiers"
  """
  delete_identity_credential_identifiers(
    """filter the rows which have to be deleted"""
    where: identity_credential_identifiers_bool_exp!
  ): identity_credential_identifiers_mutation_response

  """
  delete single row from the table: "identity_credential_identifiers"
  """
  delete_identity_credential_identifiers_by_pk(id: uuid!): identity_credential_identifiers

  """
  delete data from the table: "identity_credential_types"
  """
  delete_identity_credential_types(
    """filter the rows which have to be deleted"""
    where: identity_credential_types_bool_exp!
  ): identity_credential_types_mutation_response

  """
  delete single row from the table: "identity_credential_types"
  """
  delete_identity_credential_types_by_pk(id: uuid!): identity_credential_types

  """
  delete data from the table: "identity_credentials"
  """
  delete_identity_credentials(
    """filter the rows which have to be deleted"""
    where: identity_credentials_bool_exp!
  ): identity_credentials_mutation_response

  """
  delete single row from the table: "identity_credentials"
  """
  delete_identity_credentials_by_pk(id: uuid!): identity_credentials

  """
  delete data from the table: "identity_verifiable_addresses"
  """
  delete_identity_verifiable_addresses(
    """filter the rows which have to be deleted"""
    where: identity_verifiable_addresses_bool_exp!
  ): identity_verifiable_addresses_mutation_response

  """
  delete single row from the table: "identity_verifiable_addresses"
  """
  delete_identity_verifiable_addresses_by_pk(id: uuid!): identity_verifiable_addresses

  """
  delete data from the table: "ignored_vulnerabilities"
  """
  delete_ignored_vulnerabilities(
    """filter the rows which have to be deleted"""
    where: ignored_vulnerabilities_bool_exp!
  ): ignored_vulnerabilities_mutation_response

  """
  delete single row from the table: "ignored_vulnerabilities"
  """
  delete_ignored_vulnerabilities_by_pk(id: uuid!): ignored_vulnerabilities

  """
  delete data from the table: "instances"
  """
  delete_instances(
    """filter the rows which have to be deleted"""
    where: instances_bool_exp!
  ): instances_mutation_response

  """
  delete single row from the table: "instances"
  """
  delete_instances_by_pk(instance_id: uuid!): instances

  """
  delete data from the table: "manifests"
  """
  delete_manifests(
    """filter the rows which have to be deleted"""
    where: manifests_bool_exp!
  ): manifests_mutation_response

  """
  delete single row from the table: "manifests"
  """
  delete_manifests_by_pk(id: uuid!): manifests

  """
  delete data from the table: "organization_user"
  """
  delete_organization_user(
    """filter the rows which have to be deleted"""
    where: organization_user_bool_exp!
  ): organization_user_mutation_response

  """
  delete single row from the table: "organization_user"
  """
  delete_organization_user_by_pk(id: uuid!): organization_user

  """
  delete data from the table: "organizations"
  """
  delete_organizations(
    """filter the rows which have to be deleted"""
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  delete single row from the table: "organizations"
  """
  delete_organizations_by_pk(id: uuid!): organizations

  """
  delete data from the table: "package_versions"
  """
  delete_package_versions(
    """filter the rows which have to be deleted"""
    where: package_versions_bool_exp!
  ): package_versions_mutation_response

  """
  delete single row from the table: "package_versions"
  """
  delete_package_versions_by_pk(id: uuid!): package_versions

  """
  delete data from the table: "project_access_tokens"
  """
  delete_project_access_tokens(
    """filter the rows which have to be deleted"""
    where: project_access_tokens_bool_exp!
  ): project_access_tokens_mutation_response

  """
  delete single row from the table: "project_access_tokens"
  """
  delete_project_access_tokens_by_pk(id: uuid!): project_access_tokens

  """
  delete data from the table: "projects"
  """
  delete_projects(
    """filter the rows which have to be deleted"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  delete single row from the table: "projects"
  """
  delete_projects_by_pk(id: uuid!): projects

  """
  delete data from the table: "related_vulnerabilities"
  """
  delete_related_vulnerabilities(
    """filter the rows which have to be deleted"""
    where: related_vulnerabilities_bool_exp!
  ): related_vulnerabilities_mutation_response

  """
  delete single row from the table: "related_vulnerabilities"
  """
  delete_related_vulnerabilities_by_pk(id: uuid!): related_vulnerabilities

  """
  delete data from the table: "scans"
  """
  delete_scans(
    """filter the rows which have to be deleted"""
    where: scans_bool_exp!
  ): scans_mutation_response

  """
  delete single row from the table: "scans"
  """
  delete_scans_by_pk(id: uuid!): scans

  """
  delete data from the table: "settings"
  """
  delete_settings(
    """filter the rows which have to be deleted"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  delete single row from the table: "settings"
  """
  delete_settings_by_pk(id: uuid!): settings

  """
  delete data from the table: "vulnerabilities"
  """
  delete_vulnerabilities(
    """filter the rows which have to be deleted"""
    where: vulnerabilities_bool_exp!
  ): vulnerabilities_mutation_response

  """
  delete single row from the table: "vulnerabilities"
  """
  delete_vulnerabilities_by_pk(id: uuid!): vulnerabilities

  """
  delete data from the table: "vulnerability_packages"
  """
  delete_vulnerability_packages(
    """filter the rows which have to be deleted"""
    where: vulnerability_packages_bool_exp!
  ): vulnerability_packages_mutation_response

  """
  delete single row from the table: "vulnerability_packages"
  """
  delete_vulnerability_packages_by_pk(id: uuid!): vulnerability_packages

  """
  insert data into the table: "builds"
  """
  insert_builds(
    """the rows to be inserted"""
    objects: [builds_insert_input!]!

    """upsert condition"""
    on_conflict: builds_on_conflict
  ): builds_mutation_response

  """
  insert a single row into the table: "builds"
  """
  insert_builds_one(
    """the row to be inserted"""
    object: builds_insert_input!

    """upsert condition"""
    on_conflict: builds_on_conflict
  ): builds

  """
  insert data into the table: "findings"
  """
  insert_findings(
    """the rows to be inserted"""
    objects: [findings_insert_input!]!

    """upsert condition"""
    on_conflict: findings_on_conflict
  ): findings_mutation_response

  """
  insert a single row into the table: "findings"
  """
  insert_findings_one(
    """the row to be inserted"""
    object: findings_insert_input!

    """upsert condition"""
    on_conflict: findings_on_conflict
  ): findings

  """
  insert data into the table: "github_repositories"
  """
  insert_github_repositories(
    """the rows to be inserted"""
    objects: [github_repositories_insert_input!]!

    """upsert condition"""
    on_conflict: github_repositories_on_conflict
  ): github_repositories_mutation_response

  """
  insert a single row into the table: "github_repositories"
  """
  insert_github_repositories_one(
    """the row to be inserted"""
    object: github_repositories_insert_input!

    """upsert condition"""
    on_conflict: github_repositories_on_conflict
  ): github_repositories

  """
  insert data into the table: "identities"
  """
  insert_identities(
    """the rows to be inserted"""
    objects: [identities_insert_input!]!

    """upsert condition"""
    on_conflict: identities_on_conflict
  ): identities_mutation_response

  """
  insert a single row into the table: "identities"
  """
  insert_identities_one(
    """the row to be inserted"""
    object: identities_insert_input!

    """upsert condition"""
    on_conflict: identities_on_conflict
  ): identities

  """
  insert data into the table: "identity_credential_identifiers"
  """
  insert_identity_credential_identifiers(
    """the rows to be inserted"""
    objects: [identity_credential_identifiers_insert_input!]!

    """upsert condition"""
    on_conflict: identity_credential_identifiers_on_conflict
  ): identity_credential_identifiers_mutation_response

  """
  insert a single row into the table: "identity_credential_identifiers"
  """
  insert_identity_credential_identifiers_one(
    """the row to be inserted"""
    object: identity_credential_identifiers_insert_input!

    """upsert condition"""
    on_conflict: identity_credential_identifiers_on_conflict
  ): identity_credential_identifiers

  """
  insert data into the table: "identity_credential_types"
  """
  insert_identity_credential_types(
    """the rows to be inserted"""
    objects: [identity_credential_types_insert_input!]!

    """upsert condition"""
    on_conflict: identity_credential_types_on_conflict
  ): identity_credential_types_mutation_response

  """
  insert a single row into the table: "identity_credential_types"
  """
  insert_identity_credential_types_one(
    """the row to be inserted"""
    object: identity_credential_types_insert_input!

    """upsert condition"""
    on_conflict: identity_credential_types_on_conflict
  ): identity_credential_types

  """
  insert data into the table: "identity_credentials"
  """
  insert_identity_credentials(
    """the rows to be inserted"""
    objects: [identity_credentials_insert_input!]!

    """upsert condition"""
    on_conflict: identity_credentials_on_conflict
  ): identity_credentials_mutation_response

  """
  insert a single row into the table: "identity_credentials"
  """
  insert_identity_credentials_one(
    """the row to be inserted"""
    object: identity_credentials_insert_input!

    """upsert condition"""
    on_conflict: identity_credentials_on_conflict
  ): identity_credentials

  """
  insert data into the table: "identity_verifiable_addresses"
  """
  insert_identity_verifiable_addresses(
    """the rows to be inserted"""
    objects: [identity_verifiable_addresses_insert_input!]!

    """upsert condition"""
    on_conflict: identity_verifiable_addresses_on_conflict
  ): identity_verifiable_addresses_mutation_response

  """
  insert a single row into the table: "identity_verifiable_addresses"
  """
  insert_identity_verifiable_addresses_one(
    """the row to be inserted"""
    object: identity_verifiable_addresses_insert_input!

    """upsert condition"""
    on_conflict: identity_verifiable_addresses_on_conflict
  ): identity_verifiable_addresses

  """
  insert data into the table: "ignored_vulnerabilities"
  """
  insert_ignored_vulnerabilities(
    """the rows to be inserted"""
    objects: [ignored_vulnerabilities_insert_input!]!

    """upsert condition"""
    on_conflict: ignored_vulnerabilities_on_conflict
  ): ignored_vulnerabilities_mutation_response

  """
  insert a single row into the table: "ignored_vulnerabilities"
  """
  insert_ignored_vulnerabilities_one(
    """the row to be inserted"""
    object: ignored_vulnerabilities_insert_input!

    """upsert condition"""
    on_conflict: ignored_vulnerabilities_on_conflict
  ): ignored_vulnerabilities

  """
  insert data into the table: "instances"
  """
  insert_instances(
    """the rows to be inserted"""
    objects: [instances_insert_input!]!

    """upsert condition"""
    on_conflict: instances_on_conflict
  ): instances_mutation_response

  """
  insert a single row into the table: "instances"
  """
  insert_instances_one(
    """the row to be inserted"""
    object: instances_insert_input!

    """upsert condition"""
    on_conflict: instances_on_conflict
  ): instances

  """
  insert data into the table: "manifests"
  """
  insert_manifests(
    """the rows to be inserted"""
    objects: [manifests_insert_input!]!

    """upsert condition"""
    on_conflict: manifests_on_conflict
  ): manifests_mutation_response

  """
  insert a single row into the table: "manifests"
  """
  insert_manifests_one(
    """the row to be inserted"""
    object: manifests_insert_input!

    """upsert condition"""
    on_conflict: manifests_on_conflict
  ): manifests

  """
  insert data into the table: "organization_user"
  """
  insert_organization_user(
    """the rows to be inserted"""
    objects: [organization_user_insert_input!]!

    """upsert condition"""
    on_conflict: organization_user_on_conflict
  ): organization_user_mutation_response

  """
  insert a single row into the table: "organization_user"
  """
  insert_organization_user_one(
    """the row to be inserted"""
    object: organization_user_insert_input!

    """upsert condition"""
    on_conflict: organization_user_on_conflict
  ): organization_user

  """
  insert data into the table: "organizations"
  """
  insert_organizations(
    """the rows to be inserted"""
    objects: [organizations_insert_input!]!

    """upsert condition"""
    on_conflict: organizations_on_conflict
  ): organizations_mutation_response

  """
  insert a single row into the table: "organizations"
  """
  insert_organizations_one(
    """the row to be inserted"""
    object: organizations_insert_input!

    """upsert condition"""
    on_conflict: organizations_on_conflict
  ): organizations

  """
  insert data into the table: "package_versions"
  """
  insert_package_versions(
    """the rows to be inserted"""
    objects: [package_versions_insert_input!]!

    """upsert condition"""
    on_conflict: package_versions_on_conflict
  ): package_versions_mutation_response

  """
  insert a single row into the table: "package_versions"
  """
  insert_package_versions_one(
    """the row to be inserted"""
    object: package_versions_insert_input!

    """upsert condition"""
    on_conflict: package_versions_on_conflict
  ): package_versions

  """
  insert data into the table: "project_access_tokens"
  """
  insert_project_access_tokens(
    """the rows to be inserted"""
    objects: [project_access_tokens_insert_input!]!

    """upsert condition"""
    on_conflict: project_access_tokens_on_conflict
  ): project_access_tokens_mutation_response

  """
  insert a single row into the table: "project_access_tokens"
  """
  insert_project_access_tokens_one(
    """the row to be inserted"""
    object: project_access_tokens_insert_input!

    """upsert condition"""
    on_conflict: project_access_tokens_on_conflict
  ): project_access_tokens

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """upsert condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """upsert condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  insert data into the table: "related_vulnerabilities"
  """
  insert_related_vulnerabilities(
    """the rows to be inserted"""
    objects: [related_vulnerabilities_insert_input!]!

    """upsert condition"""
    on_conflict: related_vulnerabilities_on_conflict
  ): related_vulnerabilities_mutation_response

  """
  insert a single row into the table: "related_vulnerabilities"
  """
  insert_related_vulnerabilities_one(
    """the row to be inserted"""
    object: related_vulnerabilities_insert_input!

    """upsert condition"""
    on_conflict: related_vulnerabilities_on_conflict
  ): related_vulnerabilities

  """
  insert data into the table: "scans"
  """
  insert_scans(
    """the rows to be inserted"""
    objects: [scans_insert_input!]!

    """upsert condition"""
    on_conflict: scans_on_conflict
  ): scans_mutation_response

  """
  insert a single row into the table: "scans"
  """
  insert_scans_one(
    """the row to be inserted"""
    object: scans_insert_input!

    """upsert condition"""
    on_conflict: scans_on_conflict
  ): scans

  """
  insert data into the table: "settings"
  """
  insert_settings(
    """the rows to be inserted"""
    objects: [settings_insert_input!]!

    """upsert condition"""
    on_conflict: settings_on_conflict
  ): settings_mutation_response

  """
  insert a single row into the table: "settings"
  """
  insert_settings_one(
    """the row to be inserted"""
    object: settings_insert_input!

    """upsert condition"""
    on_conflict: settings_on_conflict
  ): settings

  """
  insert data into the table: "vulnerabilities"
  """
  insert_vulnerabilities(
    """the rows to be inserted"""
    objects: [vulnerabilities_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerabilities_on_conflict
  ): vulnerabilities_mutation_response

  """
  insert a single row into the table: "vulnerabilities"
  """
  insert_vulnerabilities_one(
    """the row to be inserted"""
    object: vulnerabilities_insert_input!

    """upsert condition"""
    on_conflict: vulnerabilities_on_conflict
  ): vulnerabilities

  """
  insert data into the table: "vulnerability_packages"
  """
  insert_vulnerability_packages(
    """the rows to be inserted"""
    objects: [vulnerability_packages_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerability_packages_on_conflict
  ): vulnerability_packages_mutation_response

  """
  insert a single row into the table: "vulnerability_packages"
  """
  insert_vulnerability_packages_one(
    """the row to be inserted"""
    object: vulnerability_packages_insert_input!

    """upsert condition"""
    on_conflict: vulnerability_packages_on_conflict
  ): vulnerability_packages

  """get s3 presigned url for manifest upload, used only by the frontend"""
  presignManifestUpload(project_id: uuid!): PresignedUrlResponse

  """
  This performs the manifest sbom generation and creates the first build from the manifest
  """
  scanManifest(bucket: String!, key: String!): ScanManifestOutput

  """
  update data of the table: "builds"
  """
  update_builds(
    """increments the numeric columns with given value of the filtered values"""
    _inc: builds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: builds_set_input

    """filter the rows which have to be updated"""
    where: builds_bool_exp!
  ): builds_mutation_response

  """
  update single row of the table: "builds"
  """
  update_builds_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: builds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: builds_set_input
    pk_columns: builds_pk_columns_input!
  ): builds

  """
  update data of the table: "findings"
  """
  update_findings(
    """sets the columns of the filtered rows to the given values"""
    _set: findings_set_input

    """filter the rows which have to be updated"""
    where: findings_bool_exp!
  ): findings_mutation_response

  """
  update single row of the table: "findings"
  """
  update_findings_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: findings_set_input
    pk_columns: findings_pk_columns_input!
  ): findings

  """
  update data of the table: "github_repositories"
  """
  update_github_repositories(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: github_repositories_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: github_repositories_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: github_repositories_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: github_repositories_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: github_repositories_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: github_repositories_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: github_repositories_set_input

    """filter the rows which have to be updated"""
    where: github_repositories_bool_exp!
  ): github_repositories_mutation_response

  """
  update single row of the table: "github_repositories"
  """
  update_github_repositories_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: github_repositories_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: github_repositories_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: github_repositories_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: github_repositories_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: github_repositories_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: github_repositories_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: github_repositories_set_input
    pk_columns: github_repositories_pk_columns_input!
  ): github_repositories

  """
  update data of the table: "identities"
  """
  update_identities(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: identities_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: identities_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: identities_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: identities_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: identities_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: identities_set_input

    """filter the rows which have to be updated"""
    where: identities_bool_exp!
  ): identities_mutation_response

  """
  update single row of the table: "identities"
  """
  update_identities_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: identities_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: identities_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: identities_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: identities_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: identities_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: identities_set_input
    pk_columns: identities_pk_columns_input!
  ): identities

  """
  update data of the table: "identity_credential_identifiers"
  """
  update_identity_credential_identifiers(
    """sets the columns of the filtered rows to the given values"""
    _set: identity_credential_identifiers_set_input

    """filter the rows which have to be updated"""
    where: identity_credential_identifiers_bool_exp!
  ): identity_credential_identifiers_mutation_response

  """
  update single row of the table: "identity_credential_identifiers"
  """
  update_identity_credential_identifiers_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: identity_credential_identifiers_set_input
    pk_columns: identity_credential_identifiers_pk_columns_input!
  ): identity_credential_identifiers

  """
  update data of the table: "identity_credential_types"
  """
  update_identity_credential_types(
    """sets the columns of the filtered rows to the given values"""
    _set: identity_credential_types_set_input

    """filter the rows which have to be updated"""
    where: identity_credential_types_bool_exp!
  ): identity_credential_types_mutation_response

  """
  update single row of the table: "identity_credential_types"
  """
  update_identity_credential_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: identity_credential_types_set_input
    pk_columns: identity_credential_types_pk_columns_input!
  ): identity_credential_types

  """
  update data of the table: "identity_credentials"
  """
  update_identity_credentials(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: identity_credentials_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: identity_credentials_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: identity_credentials_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: identity_credentials_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: identity_credentials_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: identity_credentials_set_input

    """filter the rows which have to be updated"""
    where: identity_credentials_bool_exp!
  ): identity_credentials_mutation_response

  """
  update single row of the table: "identity_credentials"
  """
  update_identity_credentials_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: identity_credentials_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: identity_credentials_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: identity_credentials_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: identity_credentials_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: identity_credentials_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: identity_credentials_set_input
    pk_columns: identity_credentials_pk_columns_input!
  ): identity_credentials

  """
  update data of the table: "identity_verifiable_addresses"
  """
  update_identity_verifiable_addresses(
    """sets the columns of the filtered rows to the given values"""
    _set: identity_verifiable_addresses_set_input

    """filter the rows which have to be updated"""
    where: identity_verifiable_addresses_bool_exp!
  ): identity_verifiable_addresses_mutation_response

  """
  update single row of the table: "identity_verifiable_addresses"
  """
  update_identity_verifiable_addresses_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: identity_verifiable_addresses_set_input
    pk_columns: identity_verifiable_addresses_pk_columns_input!
  ): identity_verifiable_addresses

  """
  update data of the table: "ignored_vulnerabilities"
  """
  update_ignored_vulnerabilities(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: ignored_vulnerabilities_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: ignored_vulnerabilities_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: ignored_vulnerabilities_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: ignored_vulnerabilities_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: ignored_vulnerabilities_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: ignored_vulnerabilities_set_input

    """filter the rows which have to be updated"""
    where: ignored_vulnerabilities_bool_exp!
  ): ignored_vulnerabilities_mutation_response

  """
  update single row of the table: "ignored_vulnerabilities"
  """
  update_ignored_vulnerabilities_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: ignored_vulnerabilities_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: ignored_vulnerabilities_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: ignored_vulnerabilities_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: ignored_vulnerabilities_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: ignored_vulnerabilities_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: ignored_vulnerabilities_set_input
    pk_columns: ignored_vulnerabilities_pk_columns_input!
  ): ignored_vulnerabilities

  """
  update data of the table: "instances"
  """
  update_instances(
    """sets the columns of the filtered rows to the given values"""
    _set: instances_set_input

    """filter the rows which have to be updated"""
    where: instances_bool_exp!
  ): instances_mutation_response

  """
  update single row of the table: "instances"
  """
  update_instances_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: instances_set_input
    pk_columns: instances_pk_columns_input!
  ): instances

  """
  update data of the table: "manifests"
  """
  update_manifests(
    """sets the columns of the filtered rows to the given values"""
    _set: manifests_set_input

    """filter the rows which have to be updated"""
    where: manifests_bool_exp!
  ): manifests_mutation_response

  """
  update single row of the table: "manifests"
  """
  update_manifests_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: manifests_set_input
    pk_columns: manifests_pk_columns_input!
  ): manifests

  """
  update data of the table: "organization_user"
  """
  update_organization_user(
    """sets the columns of the filtered rows to the given values"""
    _set: organization_user_set_input

    """filter the rows which have to be updated"""
    where: organization_user_bool_exp!
  ): organization_user_mutation_response

  """
  update single row of the table: "organization_user"
  """
  update_organization_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: organization_user_set_input
    pk_columns: organization_user_pk_columns_input!
  ): organization_user

  """
  update data of the table: "organizations"
  """
  update_organizations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: organizations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organizations_set_input

    """filter the rows which have to be updated"""
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  update single row of the table: "organizations"
  """
  update_organizations_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: organizations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organizations_set_input
    pk_columns: organizations_pk_columns_input!
  ): organizations

  """
  update data of the table: "package_versions"
  """
  update_package_versions(
    """sets the columns of the filtered rows to the given values"""
    _set: package_versions_set_input

    """filter the rows which have to be updated"""
    where: package_versions_bool_exp!
  ): package_versions_mutation_response

  """
  update single row of the table: "package_versions"
  """
  update_package_versions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: package_versions_set_input
    pk_columns: package_versions_pk_columns_input!
  ): package_versions

  """
  update data of the table: "project_access_tokens"
  """
  update_project_access_tokens(
    """sets the columns of the filtered rows to the given values"""
    _set: project_access_tokens_set_input

    """filter the rows which have to be updated"""
    where: project_access_tokens_bool_exp!
  ): project_access_tokens_mutation_response

  """
  update single row of the table: "project_access_tokens"
  """
  update_project_access_tokens_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: project_access_tokens_set_input
    pk_columns: project_access_tokens_pk_columns_input!
  ): project_access_tokens

  """
  update data of the table: "projects"
  """
  update_projects(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input

    """filter the rows which have to be updated"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  update single row of the table: "projects"
  """
  update_projects_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input
    pk_columns: projects_pk_columns_input!
  ): projects

  """
  update data of the table: "related_vulnerabilities"
  """
  update_related_vulnerabilities(
    """sets the columns of the filtered rows to the given values"""
    _set: related_vulnerabilities_set_input

    """filter the rows which have to be updated"""
    where: related_vulnerabilities_bool_exp!
  ): related_vulnerabilities_mutation_response

  """
  update single row of the table: "related_vulnerabilities"
  """
  update_related_vulnerabilities_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: related_vulnerabilities_set_input
    pk_columns: related_vulnerabilities_pk_columns_input!
  ): related_vulnerabilities

  """
  update data of the table: "scans"
  """
  update_scans(
    """increments the numeric columns with given value of the filtered values"""
    _inc: scans_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: scans_set_input

    """filter the rows which have to be updated"""
    where: scans_bool_exp!
  ): scans_mutation_response

  """
  update single row of the table: "scans"
  """
  update_scans_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: scans_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: scans_set_input
    pk_columns: scans_pk_columns_input!
  ): scans

  """
  update data of the table: "settings"
  """
  update_settings(
    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input

    """filter the rows which have to be updated"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  update single row of the table: "settings"
  """
  update_settings_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input
    pk_columns: settings_pk_columns_input!
  ): settings

  """
  update data of the table: "vulnerabilities"
  """
  update_vulnerabilities(
    """increments the numeric columns with given value of the filtered values"""
    _inc: vulnerabilities_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerabilities_set_input

    """filter the rows which have to be updated"""
    where: vulnerabilities_bool_exp!
  ): vulnerabilities_mutation_response

  """
  update single row of the table: "vulnerabilities"
  """
  update_vulnerabilities_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: vulnerabilities_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerabilities_set_input
    pk_columns: vulnerabilities_pk_columns_input!
  ): vulnerabilities

  """
  update data of the table: "vulnerability_packages"
  """
  update_vulnerability_packages(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_packages_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_packages_bool_exp!
  ): vulnerability_packages_mutation_response

  """
  update single row of the table: "vulnerability_packages"
  """
  update_vulnerability_packages_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_packages_set_input
    pk_columns: vulnerability_packages_pk_columns_input!
  ): vulnerability_packages
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
join table


columns and relationships of "organization_user"

"""
type organization_user {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  organization: organizations!
  organization_id: uuid!
  role: organization_user_role!
  updated_at: timestamptz!

  """An object relationship"""
  user: identities!
  user_id: uuid!
}

"""
aggregated selection of "organization_user"
"""
type organization_user_aggregate {
  aggregate: organization_user_aggregate_fields
  nodes: [organization_user!]!
}

"""
aggregate fields of "organization_user"
"""
type organization_user_aggregate_fields {
  count(columns: [organization_user_select_column!], distinct: Boolean): Int!
  max: organization_user_max_fields
  min: organization_user_min_fields
}

"""
order by aggregate values of table "organization_user"
"""
input organization_user_aggregate_order_by {
  count: order_by
  max: organization_user_max_order_by
  min: organization_user_min_order_by
}

"""
input type for inserting array relation for remote table "organization_user"
"""
input organization_user_arr_rel_insert_input {
  data: [organization_user_insert_input!]!

  """upsert condition"""
  on_conflict: organization_user_on_conflict
}

"""
Boolean expression to filter rows from the table "organization_user". All fields are combined with a logical 'AND'.
"""
input organization_user_bool_exp {
  _and: [organization_user_bool_exp!]
  _not: organization_user_bool_exp
  _or: [organization_user_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  organization: organizations_bool_exp
  organization_id: uuid_comparison_exp
  role: organization_user_role_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: identities_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "organization_user"
"""
enum organization_user_constraint {
  """unique or primary key constraint"""
  organization_user_pkey

  """unique or primary key constraint"""
  organization_user_user_id_organization_id_key
}

"""
input type for inserting data into table "organization_user"
"""
input organization_user_insert_input {
  created_at: timestamptz
  id: uuid
  organization: organizations_obj_rel_insert_input
  organization_id: uuid
  role: organization_user_role
  updated_at: timestamptz
  user: identities_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type organization_user_max_fields {
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "organization_user"
"""
input organization_user_max_order_by {
  created_at: order_by
  id: order_by
  organization_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type organization_user_min_fields {
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "organization_user"
"""
input organization_user_min_order_by {
  created_at: order_by
  id: order_by
  organization_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "organization_user"
"""
type organization_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [organization_user!]!
}

"""
on_conflict condition type for table "organization_user"
"""
input organization_user_on_conflict {
  constraint: organization_user_constraint!
  update_columns: [organization_user_update_column!]! = []
  where: organization_user_bool_exp
}

"""Ordering options when selecting data from "organization_user"."""
input organization_user_order_by {
  created_at: order_by
  id: order_by
  organization: organizations_order_by
  organization_id: order_by
  role: order_by
  updated_at: order_by
  user: identities_order_by
  user_id: order_by
}

"""primary key columns input for table: organization_user"""
input organization_user_pk_columns_input {
  id: uuid!
}

scalar organization_user_role

"""
Boolean expression to compare columns of type "organization_user_role". All fields are combined with logical 'AND'.
"""
input organization_user_role_comparison_exp {
  _eq: organization_user_role
  _gt: organization_user_role
  _gte: organization_user_role
  _in: [organization_user_role!]
  _is_null: Boolean
  _lt: organization_user_role
  _lte: organization_user_role
  _neq: organization_user_role
  _nin: [organization_user_role!]
}

"""
select columns of table "organization_user"
"""
enum organization_user_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  organization_id

  """column name"""
  role

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "organization_user"
"""
input organization_user_set_input {
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  role: organization_user_role
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "organization_user"
"""
enum organization_user_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  organization_id

  """column name"""
  role

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
columns and relationships of "organizations"
"""
type organizations {
  createdAt: timestamp!
  creator_id: uuid
  github_id: Int
  id: uuid!
  installation_id: Int
  name: String!

  """An array relationship"""
  organization_users(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """An aggregate relationship"""
  organization_users_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): organization_user_aggregate!

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!
  settings_id: uuid
}

"""
aggregated selection of "organizations"
"""
type organizations_aggregate {
  aggregate: organizations_aggregate_fields
  nodes: [organizations!]!
}

"""
aggregate fields of "organizations"
"""
type organizations_aggregate_fields {
  avg: organizations_avg_fields
  count(columns: [organizations_select_column!], distinct: Boolean): Int!
  max: organizations_max_fields
  min: organizations_min_fields
  stddev: organizations_stddev_fields
  stddev_pop: organizations_stddev_pop_fields
  stddev_samp: organizations_stddev_samp_fields
  sum: organizations_sum_fields
  var_pop: organizations_var_pop_fields
  var_samp: organizations_var_samp_fields
  variance: organizations_variance_fields
}

"""aggregate avg on columns"""
type organizations_avg_fields {
  github_id: Float
  installation_id: Float
}

"""
Boolean expression to filter rows from the table "organizations". All fields are combined with a logical 'AND'.
"""
input organizations_bool_exp {
  _and: [organizations_bool_exp!]
  _not: organizations_bool_exp
  _or: [organizations_bool_exp!]
  createdAt: timestamp_comparison_exp
  creator_id: uuid_comparison_exp
  github_id: Int_comparison_exp
  id: uuid_comparison_exp
  installation_id: Int_comparison_exp
  name: String_comparison_exp
  organization_users: organization_user_bool_exp
  projects: projects_bool_exp
  settings_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "organizations"
"""
enum organizations_constraint {
  """unique or primary key constraint"""
  organizations_github_id_key

  """unique or primary key constraint"""
  organizations_pkey
}

"""
input type for incrementing numeric columns in table "organizations"
"""
input organizations_inc_input {
  github_id: Int
  installation_id: Int
}

"""
input type for inserting data into table "organizations"
"""
input organizations_insert_input {
  createdAt: timestamp
  creator_id: uuid
  github_id: Int
  id: uuid
  installation_id: Int
  name: String
  organization_users: organization_user_arr_rel_insert_input
  projects: projects_arr_rel_insert_input
  settings_id: uuid
}

"""aggregate max on columns"""
type organizations_max_fields {
  createdAt: timestamp
  creator_id: uuid
  github_id: Int
  id: uuid
  installation_id: Int
  name: String
  settings_id: uuid
}

"""aggregate min on columns"""
type organizations_min_fields {
  createdAt: timestamp
  creator_id: uuid
  github_id: Int
  id: uuid
  installation_id: Int
  name: String
  settings_id: uuid
}

"""
response of any mutation on the table "organizations"
"""
type organizations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [organizations!]!
}

"""
input type for inserting object relation for remote table "organizations"
"""
input organizations_obj_rel_insert_input {
  data: organizations_insert_input!

  """upsert condition"""
  on_conflict: organizations_on_conflict
}

"""
on_conflict condition type for table "organizations"
"""
input organizations_on_conflict {
  constraint: organizations_constraint!
  update_columns: [organizations_update_column!]! = []
  where: organizations_bool_exp
}

"""Ordering options when selecting data from "organizations"."""
input organizations_order_by {
  createdAt: order_by
  creator_id: order_by
  github_id: order_by
  id: order_by
  installation_id: order_by
  name: order_by
  organization_users_aggregate: organization_user_aggregate_order_by
  projects_aggregate: projects_aggregate_order_by
  settings_id: order_by
}

"""primary key columns input for table: organizations"""
input organizations_pk_columns_input {
  id: uuid!
}

"""
select columns of table "organizations"
"""
enum organizations_select_column {
  """column name"""
  createdAt

  """column name"""
  creator_id

  """column name"""
  github_id

  """column name"""
  id

  """column name"""
  installation_id

  """column name"""
  name

  """column name"""
  settings_id
}

"""
input type for updating data in table "organizations"
"""
input organizations_set_input {
  createdAt: timestamp
  creator_id: uuid
  github_id: Int
  id: uuid
  installation_id: Int
  name: String
  settings_id: uuid
}

"""aggregate stddev on columns"""
type organizations_stddev_fields {
  github_id: Float
  installation_id: Float
}

"""aggregate stddev_pop on columns"""
type organizations_stddev_pop_fields {
  github_id: Float
  installation_id: Float
}

"""aggregate stddev_samp on columns"""
type organizations_stddev_samp_fields {
  github_id: Float
  installation_id: Float
}

"""aggregate sum on columns"""
type organizations_sum_fields {
  github_id: Int
  installation_id: Int
}

"""
update columns of table "organizations"
"""
enum organizations_update_column {
  """column name"""
  createdAt

  """column name"""
  creator_id

  """column name"""
  github_id

  """column name"""
  id

  """column name"""
  installation_id

  """column name"""
  name

  """column name"""
  settings_id
}

"""aggregate var_pop on columns"""
type organizations_var_pop_fields {
  github_id: Float
  installation_id: Float
}

"""aggregate var_samp on columns"""
type organizations_var_samp_fields {
  github_id: Float
  installation_id: Float
}

"""aggregate variance on columns"""
type organizations_variance_fields {
  github_id: Float
  installation_id: Float
}

"""
columns and relationships of "package_versions"
"""
type package_versions {
  cpes: _text!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!
  fix_state: String!
  fixed_in_versions: _text!
  id: uuid!
  pkg_slug: String!
  slug: String!
  version_constraint: String!
  version_format: String!

  """An object relationship"""
  vulnerability_package: vulnerability_packages!
}

"""
aggregated selection of "package_versions"
"""
type package_versions_aggregate {
  aggregate: package_versions_aggregate_fields
  nodes: [package_versions!]!
}

"""
aggregate fields of "package_versions"
"""
type package_versions_aggregate_fields {
  count(columns: [package_versions_select_column!], distinct: Boolean): Int!
  max: package_versions_max_fields
  min: package_versions_min_fields
}

"""
order by aggregate values of table "package_versions"
"""
input package_versions_aggregate_order_by {
  count: order_by
  max: package_versions_max_order_by
  min: package_versions_min_order_by
}

"""
input type for inserting array relation for remote table "package_versions"
"""
input package_versions_arr_rel_insert_input {
  data: [package_versions_insert_input!]!

  """upsert condition"""
  on_conflict: package_versions_on_conflict
}

"""
Boolean expression to filter rows from the table "package_versions". All fields are combined with a logical 'AND'.
"""
input package_versions_bool_exp {
  _and: [package_versions_bool_exp!]
  _not: package_versions_bool_exp
  _or: [package_versions_bool_exp!]
  cpes: _text_comparison_exp
  findings: findings_bool_exp
  fix_state: String_comparison_exp
  fixed_in_versions: _text_comparison_exp
  id: uuid_comparison_exp
  pkg_slug: String_comparison_exp
  slug: String_comparison_exp
  version_constraint: String_comparison_exp
  version_format: String_comparison_exp
  vulnerability_package: vulnerability_packages_bool_exp
}

"""
unique or primary key constraints on table "package_versions"
"""
enum package_versions_constraint {
  """unique or primary key constraint"""
  package_versions_pkey

  """unique or primary key constraint"""
  package_versions_slug_key
}

"""
input type for inserting data into table "package_versions"
"""
input package_versions_insert_input {
  cpes: _text
  findings: findings_arr_rel_insert_input
  fix_state: String
  fixed_in_versions: _text
  id: uuid
  pkg_slug: String
  slug: String
  version_constraint: String
  version_format: String
  vulnerability_package: vulnerability_packages_obj_rel_insert_input
}

"""aggregate max on columns"""
type package_versions_max_fields {
  fix_state: String
  id: uuid
  pkg_slug: String
  slug: String
  version_constraint: String
  version_format: String
}

"""
order by max() on columns of table "package_versions"
"""
input package_versions_max_order_by {
  fix_state: order_by
  id: order_by
  pkg_slug: order_by
  slug: order_by
  version_constraint: order_by
  version_format: order_by
}

"""aggregate min on columns"""
type package_versions_min_fields {
  fix_state: String
  id: uuid
  pkg_slug: String
  slug: String
  version_constraint: String
  version_format: String
}

"""
order by min() on columns of table "package_versions"
"""
input package_versions_min_order_by {
  fix_state: order_by
  id: order_by
  pkg_slug: order_by
  slug: order_by
  version_constraint: order_by
  version_format: order_by
}

"""
response of any mutation on the table "package_versions"
"""
type package_versions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [package_versions!]!
}

"""
input type for inserting object relation for remote table "package_versions"
"""
input package_versions_obj_rel_insert_input {
  data: package_versions_insert_input!

  """upsert condition"""
  on_conflict: package_versions_on_conflict
}

"""
on_conflict condition type for table "package_versions"
"""
input package_versions_on_conflict {
  constraint: package_versions_constraint!
  update_columns: [package_versions_update_column!]! = []
  where: package_versions_bool_exp
}

"""Ordering options when selecting data from "package_versions"."""
input package_versions_order_by {
  cpes: order_by
  findings_aggregate: findings_aggregate_order_by
  fix_state: order_by
  fixed_in_versions: order_by
  id: order_by
  pkg_slug: order_by
  slug: order_by
  version_constraint: order_by
  version_format: order_by
  vulnerability_package: vulnerability_packages_order_by
}

"""primary key columns input for table: package_versions"""
input package_versions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "package_versions"
"""
enum package_versions_select_column {
  """column name"""
  cpes

  """column name"""
  fix_state

  """column name"""
  fixed_in_versions

  """column name"""
  id

  """column name"""
  pkg_slug

  """column name"""
  slug

  """column name"""
  version_constraint

  """column name"""
  version_format
}

"""
input type for updating data in table "package_versions"
"""
input package_versions_set_input {
  cpes: _text
  fix_state: String
  fixed_in_versions: _text
  id: uuid
  pkg_slug: String
  slug: String
  version_constraint: String
  version_format: String
}

"""
update columns of table "package_versions"
"""
enum package_versions_update_column {
  """column name"""
  cpes

  """column name"""
  fix_state

  """column name"""
  fixed_in_versions

  """column name"""
  id

  """column name"""
  pkg_slug

  """column name"""
  slug

  """column name"""
  version_constraint

  """column name"""
  version_format
}

"""
columns and relationships of "project_access_tokens"
"""
type project_access_tokens {
  access_token: uuid!
  created_at: timestamp!

  """An object relationship"""
  created_by_user: identities
  created_by_user_id: uuid
  id: uuid!
  last_used: timestamp
  name: String

  """An object relationship"""
  project: projects!
  project_uuid: uuid!
}

"""
aggregated selection of "project_access_tokens"
"""
type project_access_tokens_aggregate {
  aggregate: project_access_tokens_aggregate_fields
  nodes: [project_access_tokens!]!
}

"""
aggregate fields of "project_access_tokens"
"""
type project_access_tokens_aggregate_fields {
  count(columns: [project_access_tokens_select_column!], distinct: Boolean): Int!
  max: project_access_tokens_max_fields
  min: project_access_tokens_min_fields
}

"""
order by aggregate values of table "project_access_tokens"
"""
input project_access_tokens_aggregate_order_by {
  count: order_by
  max: project_access_tokens_max_order_by
  min: project_access_tokens_min_order_by
}

"""
input type for inserting array relation for remote table "project_access_tokens"
"""
input project_access_tokens_arr_rel_insert_input {
  data: [project_access_tokens_insert_input!]!

  """upsert condition"""
  on_conflict: project_access_tokens_on_conflict
}

"""
Boolean expression to filter rows from the table "project_access_tokens". All fields are combined with a logical 'AND'.
"""
input project_access_tokens_bool_exp {
  _and: [project_access_tokens_bool_exp!]
  _not: project_access_tokens_bool_exp
  _or: [project_access_tokens_bool_exp!]
  access_token: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  created_by_user: identities_bool_exp
  created_by_user_id: uuid_comparison_exp
  id: uuid_comparison_exp
  last_used: timestamp_comparison_exp
  name: String_comparison_exp
  project: projects_bool_exp
  project_uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "project_access_tokens"
"""
enum project_access_tokens_constraint {
  """unique or primary key constraint"""
  project_access_tokens_access_token_key

  """unique or primary key constraint"""
  project_access_tokens_pkey
}

"""
input type for inserting data into table "project_access_tokens"
"""
input project_access_tokens_insert_input {
  access_token: uuid
  created_at: timestamp
  created_by_user: identities_obj_rel_insert_input
  created_by_user_id: uuid
  id: uuid
  last_used: timestamp
  name: String
  project: projects_obj_rel_insert_input
  project_uuid: uuid
}

"""aggregate max on columns"""
type project_access_tokens_max_fields {
  access_token: uuid
  created_at: timestamp
  created_by_user_id: uuid
  id: uuid
  last_used: timestamp
  name: String
  project_uuid: uuid
}

"""
order by max() on columns of table "project_access_tokens"
"""
input project_access_tokens_max_order_by {
  access_token: order_by
  created_at: order_by
  created_by_user_id: order_by
  id: order_by
  last_used: order_by
  name: order_by
  project_uuid: order_by
}

"""aggregate min on columns"""
type project_access_tokens_min_fields {
  access_token: uuid
  created_at: timestamp
  created_by_user_id: uuid
  id: uuid
  last_used: timestamp
  name: String
  project_uuid: uuid
}

"""
order by min() on columns of table "project_access_tokens"
"""
input project_access_tokens_min_order_by {
  access_token: order_by
  created_at: order_by
  created_by_user_id: order_by
  id: order_by
  last_used: order_by
  name: order_by
  project_uuid: order_by
}

"""
response of any mutation on the table "project_access_tokens"
"""
type project_access_tokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [project_access_tokens!]!
}

"""
on_conflict condition type for table "project_access_tokens"
"""
input project_access_tokens_on_conflict {
  constraint: project_access_tokens_constraint!
  update_columns: [project_access_tokens_update_column!]! = []
  where: project_access_tokens_bool_exp
}

"""Ordering options when selecting data from "project_access_tokens"."""
input project_access_tokens_order_by {
  access_token: order_by
  created_at: order_by
  created_by_user: identities_order_by
  created_by_user_id: order_by
  id: order_by
  last_used: order_by
  name: order_by
  project: projects_order_by
  project_uuid: order_by
}

"""primary key columns input for table: project_access_tokens"""
input project_access_tokens_pk_columns_input {
  id: uuid!
}

"""
select columns of table "project_access_tokens"
"""
enum project_access_tokens_select_column {
  """column name"""
  access_token

  """column name"""
  created_at

  """column name"""
  created_by_user_id

  """column name"""
  id

  """column name"""
  last_used

  """column name"""
  name

  """column name"""
  project_uuid
}

"""
input type for updating data in table "project_access_tokens"
"""
input project_access_tokens_set_input {
  access_token: uuid
  created_at: timestamp
  created_by_user_id: uuid
  id: uuid
  last_used: timestamp
  name: String
  project_uuid: uuid
}

"""
update columns of table "project_access_tokens"
"""
enum project_access_tokens_update_column {
  """column name"""
  access_token

  """column name"""
  created_at

  """column name"""
  created_by_user_id

  """column name"""
  id

  """column name"""
  last_used

  """column name"""
  name

  """column name"""
  project_uuid
}

"""
columns and relationships of "projects"
"""
type projects {
  """An array relationship"""
  builds(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): [builds!]!

  """An aggregate relationship"""
  builds_aggregate(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): builds_aggregate!
  created_at: timestamp!

  """
  fetch data from the table: "github_repositories"
  """
  github_repositories(
    """distinct select on columns"""
    distinct_on: [github_repositories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [github_repositories_order_by!]

    """filter the rows returned"""
    where: github_repositories_bool_exp
  ): [github_repositories!]!

  """An aggregate relationship"""
  github_repositories_aggregate(
    """distinct select on columns"""
    distinct_on: [github_repositories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [github_repositories_order_by!]

    """filter the rows returned"""
    where: github_repositories_bool_exp
  ): github_repositories_aggregate!
  id: uuid!

  """An array relationship"""
  ignored_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): [ignored_vulnerabilities!]!

  """An aggregate relationship"""
  ignored_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): ignored_vulnerabilities_aggregate!

  """An array relationship"""
  manifests(
    """distinct select on columns"""
    distinct_on: [manifests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifests_order_by!]

    """filter the rows returned"""
    where: manifests_bool_exp
  ): [manifests!]!

  """An aggregate relationship"""
  manifests_aggregate(
    """distinct select on columns"""
    distinct_on: [manifests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifests_order_by!]

    """filter the rows returned"""
    where: manifests_bool_exp
  ): manifests_aggregate!
  name: String!

  """An object relationship"""
  organization: organizations
  organization_id: uuid

  """An array relationship"""
  project_access_tokens(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): [project_access_tokens!]!

  """An aggregate relationship"""
  project_access_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): project_access_tokens_aggregate!
  repo: String

  """An array relationship"""
  reports(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): [project_access_tokens!]!

  """An aggregate relationship"""
  reports_aggregate(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): project_access_tokens_aggregate!
  settings_id: uuid
}

"""
aggregated selection of "projects"
"""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

"""
aggregate fields of "projects"
"""
type projects_aggregate_fields {
  count(columns: [projects_select_column!], distinct: Boolean): Int!
  max: projects_max_fields
  min: projects_min_fields
}

"""
order by aggregate values of table "projects"
"""
input projects_aggregate_order_by {
  count: order_by
  max: projects_max_order_by
  min: projects_min_order_by
}

"""
input type for inserting array relation for remote table "projects"
"""
input projects_arr_rel_insert_input {
  data: [projects_insert_input!]!

  """upsert condition"""
  on_conflict: projects_on_conflict
}

"""
Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
"""
input projects_bool_exp {
  _and: [projects_bool_exp!]
  _not: projects_bool_exp
  _or: [projects_bool_exp!]
  builds: builds_bool_exp
  created_at: timestamp_comparison_exp
  github_repositories: github_repositories_bool_exp
  id: uuid_comparison_exp
  ignored_vulnerabilities: ignored_vulnerabilities_bool_exp
  manifests: manifests_bool_exp
  name: String_comparison_exp
  organization: organizations_bool_exp
  organization_id: uuid_comparison_exp
  project_access_tokens: project_access_tokens_bool_exp
  repo: String_comparison_exp
  reports: project_access_tokens_bool_exp
  settings_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "projects"
"""
enum projects_constraint {
  """unique or primary key constraint"""
  projects_name_organization_id_key

  """unique or primary key constraint"""
  projects_pkey
}

"""
input type for inserting data into table "projects"
"""
input projects_insert_input {
  builds: builds_arr_rel_insert_input
  created_at: timestamp
  github_repositories: github_repositories_arr_rel_insert_input
  id: uuid
  ignored_vulnerabilities: ignored_vulnerabilities_arr_rel_insert_input
  manifests: manifests_arr_rel_insert_input
  name: String
  organization: organizations_obj_rel_insert_input
  organization_id: uuid
  project_access_tokens: project_access_tokens_arr_rel_insert_input
  repo: String
  reports: project_access_tokens_arr_rel_insert_input
  settings_id: uuid
}

"""aggregate max on columns"""
type projects_max_fields {
  created_at: timestamp
  id: uuid
  name: String
  organization_id: uuid
  repo: String
  settings_id: uuid
}

"""
order by max() on columns of table "projects"
"""
input projects_max_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  organization_id: order_by
  repo: order_by
  settings_id: order_by
}

"""aggregate min on columns"""
type projects_min_fields {
  created_at: timestamp
  id: uuid
  name: String
  organization_id: uuid
  repo: String
  settings_id: uuid
}

"""
order by min() on columns of table "projects"
"""
input projects_min_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  organization_id: order_by
  repo: order_by
  settings_id: order_by
}

"""
response of any mutation on the table "projects"
"""
type projects_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [projects!]!
}

"""
input type for inserting object relation for remote table "projects"
"""
input projects_obj_rel_insert_input {
  data: projects_insert_input!

  """upsert condition"""
  on_conflict: projects_on_conflict
}

"""
on_conflict condition type for table "projects"
"""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]! = []
  where: projects_bool_exp
}

"""Ordering options when selecting data from "projects"."""
input projects_order_by {
  builds_aggregate: builds_aggregate_order_by
  created_at: order_by
  github_repositories_aggregate: github_repositories_aggregate_order_by
  id: order_by
  ignored_vulnerabilities_aggregate: ignored_vulnerabilities_aggregate_order_by
  manifests_aggregate: manifests_aggregate_order_by
  name: order_by
  organization: organizations_order_by
  organization_id: order_by
  project_access_tokens_aggregate: project_access_tokens_aggregate_order_by
  repo: order_by
  reports_aggregate: project_access_tokens_aggregate_order_by
  settings_id: order_by
}

"""primary key columns input for table: projects"""
input projects_pk_columns_input {
  id: uuid!
}

"""
select columns of table "projects"
"""
enum projects_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organization_id

  """column name"""
  repo

  """column name"""
  settings_id
}

"""
input type for updating data in table "projects"
"""
input projects_set_input {
  created_at: timestamp
  id: uuid
  name: String
  organization_id: uuid
  repo: String
  settings_id: uuid
}

"""
update columns of table "projects"
"""
enum projects_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organization_id

  """column name"""
  repo

  """column name"""
  settings_id
}

type query_root {
  """An array relationship"""
  builds(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): [builds!]!

  """An aggregate relationship"""
  builds_aggregate(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): builds_aggregate!

  """fetch data from the table: "builds" using primary key columns"""
  builds_by_pk(id: uuid!): builds

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!

  """fetch data from the table: "findings" using primary key columns"""
  findings_by_pk(id: uuid!): findings
  github: github_Query

  """
  fetch data from the table: "github_repositories"
  """
  github_repositories(
    """distinct select on columns"""
    distinct_on: [github_repositories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [github_repositories_order_by!]

    """filter the rows returned"""
    where: github_repositories_bool_exp
  ): [github_repositories!]!

  """An aggregate relationship"""
  github_repositories_aggregate(
    """distinct select on columns"""
    distinct_on: [github_repositories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [github_repositories_order_by!]

    """filter the rows returned"""
    where: github_repositories_bool_exp
  ): github_repositories_aggregate!

  """
  fetch data from the table: "github_repositories" using primary key columns
  """
  github_repositories_by_pk(id: uuid!): github_repositories

  """
  fetch data from the table: "identities"
  """
  identities(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): [identities!]!

  """
  fetch aggregated fields from the table: "identities"
  """
  identities_aggregate(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): identities_aggregate!

  """fetch data from the table: "identities" using primary key columns"""
  identities_by_pk(id: uuid!): identities

  """
  fetch data from the table: "identity_credential_identifiers"
  """
  identity_credential_identifiers(
    """distinct select on columns"""
    distinct_on: [identity_credential_identifiers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credential_identifiers_order_by!]

    """filter the rows returned"""
    where: identity_credential_identifiers_bool_exp
  ): [identity_credential_identifiers!]!

  """
  fetch aggregated fields from the table: "identity_credential_identifiers"
  """
  identity_credential_identifiers_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_credential_identifiers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credential_identifiers_order_by!]

    """filter the rows returned"""
    where: identity_credential_identifiers_bool_exp
  ): identity_credential_identifiers_aggregate!

  """
  fetch data from the table: "identity_credential_identifiers" using primary key columns
  """
  identity_credential_identifiers_by_pk(id: uuid!): identity_credential_identifiers

  """
  fetch data from the table: "identity_credential_types"
  """
  identity_credential_types(
    """distinct select on columns"""
    distinct_on: [identity_credential_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credential_types_order_by!]

    """filter the rows returned"""
    where: identity_credential_types_bool_exp
  ): [identity_credential_types!]!

  """
  fetch aggregated fields from the table: "identity_credential_types"
  """
  identity_credential_types_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_credential_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credential_types_order_by!]

    """filter the rows returned"""
    where: identity_credential_types_bool_exp
  ): identity_credential_types_aggregate!

  """
  fetch data from the table: "identity_credential_types" using primary key columns
  """
  identity_credential_types_by_pk(id: uuid!): identity_credential_types

  """
  fetch data from the table: "identity_credentials"
  """
  identity_credentials(
    """distinct select on columns"""
    distinct_on: [identity_credentials_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credentials_order_by!]

    """filter the rows returned"""
    where: identity_credentials_bool_exp
  ): [identity_credentials!]!

  """
  fetch aggregated fields from the table: "identity_credentials"
  """
  identity_credentials_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_credentials_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credentials_order_by!]

    """filter the rows returned"""
    where: identity_credentials_bool_exp
  ): identity_credentials_aggregate!

  """
  fetch data from the table: "identity_credentials" using primary key columns
  """
  identity_credentials_by_pk(id: uuid!): identity_credentials

  """An array relationship"""
  identity_verifiable_addresses(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): [identity_verifiable_addresses!]!

  """An aggregate relationship"""
  identity_verifiable_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): identity_verifiable_addresses_aggregate!

  """
  fetch data from the table: "identity_verifiable_addresses" using primary key columns
  """
  identity_verifiable_addresses_by_pk(id: uuid!): identity_verifiable_addresses

  """An array relationship"""
  ignored_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): [ignored_vulnerabilities!]!

  """An aggregate relationship"""
  ignored_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): ignored_vulnerabilities_aggregate!

  """
  fetch data from the table: "ignored_vulnerabilities" using primary key columns
  """
  ignored_vulnerabilities_by_pk(id: uuid!): ignored_vulnerabilities

  """
  fetch data from the table: "instances"
  """
  instances(
    """distinct select on columns"""
    distinct_on: [instances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [instances_order_by!]

    """filter the rows returned"""
    where: instances_bool_exp
  ): [instances!]!

  """
  fetch aggregated fields from the table: "instances"
  """
  instances_aggregate(
    """distinct select on columns"""
    distinct_on: [instances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [instances_order_by!]

    """filter the rows returned"""
    where: instances_bool_exp
  ): instances_aggregate!

  """fetch data from the table: "instances" using primary key columns"""
  instances_by_pk(instance_id: uuid!): instances

  """An array relationship"""
  manifests(
    """distinct select on columns"""
    distinct_on: [manifests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifests_order_by!]

    """filter the rows returned"""
    where: manifests_bool_exp
  ): [manifests!]!

  """An aggregate relationship"""
  manifests_aggregate(
    """distinct select on columns"""
    distinct_on: [manifests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifests_order_by!]

    """filter the rows returned"""
    where: manifests_bool_exp
  ): manifests_aggregate!

  """fetch data from the table: "manifests" using primary key columns"""
  manifests_by_pk(id: uuid!): manifests

  """
  fetch data from the table: "organization_user"
  """
  organization_user(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """
  fetch aggregated fields from the table: "organization_user"
  """
  organization_user_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): organization_user_aggregate!

  """
  fetch data from the table: "organization_user" using primary key columns
  """
  organization_user_by_pk(id: uuid!): organization_user

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): organizations_aggregate!

  """fetch data from the table: "organizations" using primary key columns"""
  organizations_by_pk(id: uuid!): organizations

  """An array relationship"""
  package_versions(
    """distinct select on columns"""
    distinct_on: [package_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_versions_order_by!]

    """filter the rows returned"""
    where: package_versions_bool_exp
  ): [package_versions!]!

  """An aggregate relationship"""
  package_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [package_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_versions_order_by!]

    """filter the rows returned"""
    where: package_versions_bool_exp
  ): package_versions_aggregate!

  """
  fetch data from the table: "package_versions" using primary key columns
  """
  package_versions_by_pk(id: uuid!): package_versions

  """get s3 presigned url for manifest upload, used by the CLI"""
  presignSbomUpload(buildId: uuid!, orgId: uuid!): SbomUploadUrlOutput

  """An array relationship"""
  project_access_tokens(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): [project_access_tokens!]!

  """An aggregate relationship"""
  project_access_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): project_access_tokens_aggregate!

  """
  fetch data from the table: "project_access_tokens" using primary key columns
  """
  project_access_tokens_by_pk(id: uuid!): project_access_tokens

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: uuid!): projects

  """An array relationship"""
  related_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): [related_vulnerabilities!]!

  """An aggregate relationship"""
  related_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): related_vulnerabilities_aggregate!

  """
  fetch data from the table: "related_vulnerabilities" using primary key columns
  """
  related_vulnerabilities_by_pk(id: uuid!): related_vulnerabilities

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """An aggregate relationship"""
  scans_aggregate(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): scans_aggregate!

  """fetch data from the table: "scans" using primary key columns"""
  scans_by_pk(id: uuid!): scans

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch aggregated fields from the table: "settings"
  """
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(id: uuid!): settings

  """
  fetch data from the table: "vulnerabilities"
  """
  vulnerabilities(
    """distinct select on columns"""
    distinct_on: [vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerabilities_order_by!]

    """filter the rows returned"""
    where: vulnerabilities_bool_exp
  ): [vulnerabilities!]!

  """
  fetch aggregated fields from the table: "vulnerabilities"
  """
  vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerabilities_order_by!]

    """filter the rows returned"""
    where: vulnerabilities_bool_exp
  ): vulnerabilities_aggregate!

  """fetch data from the table: "vulnerabilities" using primary key columns"""
  vulnerabilities_by_pk(id: uuid!): vulnerabilities

  """An array relationship"""
  vulnerability_packages(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): [vulnerability_packages!]!

  """An aggregate relationship"""
  vulnerability_packages_aggregate(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): vulnerability_packages_aggregate!

  """
  fetch data from the table: "vulnerability_packages" using primary key columns
  """
  vulnerability_packages_by_pk(id: uuid!): vulnerability_packages
}

"""
join table for adding holding additional vulns on a finding


columns and relationships of "related_vulnerabilities"

"""
type related_vulnerabilities {
  id: uuid!

  """An object relationship"""
  parent: vulnerabilities!
  related_vulnerability_slug: String!

  """An object relationship"""
  vulnerability: vulnerabilities!

  """An object relationship"""
  vulnerabilityByVulnerabilitySlug: vulnerabilities!
  vulnerability_slug: String!
}

"""
aggregated selection of "related_vulnerabilities"
"""
type related_vulnerabilities_aggregate {
  aggregate: related_vulnerabilities_aggregate_fields
  nodes: [related_vulnerabilities!]!
}

"""
aggregate fields of "related_vulnerabilities"
"""
type related_vulnerabilities_aggregate_fields {
  count(columns: [related_vulnerabilities_select_column!], distinct: Boolean): Int!
  max: related_vulnerabilities_max_fields
  min: related_vulnerabilities_min_fields
}

"""
order by aggregate values of table "related_vulnerabilities"
"""
input related_vulnerabilities_aggregate_order_by {
  count: order_by
  max: related_vulnerabilities_max_order_by
  min: related_vulnerabilities_min_order_by
}

"""
input type for inserting array relation for remote table "related_vulnerabilities"
"""
input related_vulnerabilities_arr_rel_insert_input {
  data: [related_vulnerabilities_insert_input!]!

  """upsert condition"""
  on_conflict: related_vulnerabilities_on_conflict
}

"""
Boolean expression to filter rows from the table "related_vulnerabilities". All fields are combined with a logical 'AND'.
"""
input related_vulnerabilities_bool_exp {
  _and: [related_vulnerabilities_bool_exp!]
  _not: related_vulnerabilities_bool_exp
  _or: [related_vulnerabilities_bool_exp!]
  id: uuid_comparison_exp
  parent: vulnerabilities_bool_exp
  related_vulnerability_slug: String_comparison_exp
  vulnerability: vulnerabilities_bool_exp
  vulnerabilityByVulnerabilitySlug: vulnerabilities_bool_exp
  vulnerability_slug: String_comparison_exp
}

"""
unique or primary key constraints on table "related_vulnerabilities"
"""
enum related_vulnerabilities_constraint {
  """unique or primary key constraint"""
  related_vulnerabilities_pkey

  """unique or primary key constraint"""
  related_vulnerabilities_vulnerability_slug_related_vulnerab_key
}

"""
input type for inserting data into table "related_vulnerabilities"
"""
input related_vulnerabilities_insert_input {
  id: uuid
  parent: vulnerabilities_obj_rel_insert_input
  related_vulnerability_slug: String
  vulnerability: vulnerabilities_obj_rel_insert_input
  vulnerabilityByVulnerabilitySlug: vulnerabilities_obj_rel_insert_input
  vulnerability_slug: String
}

"""aggregate max on columns"""
type related_vulnerabilities_max_fields {
  id: uuid
  related_vulnerability_slug: String
  vulnerability_slug: String
}

"""
order by max() on columns of table "related_vulnerabilities"
"""
input related_vulnerabilities_max_order_by {
  id: order_by
  related_vulnerability_slug: order_by
  vulnerability_slug: order_by
}

"""aggregate min on columns"""
type related_vulnerabilities_min_fields {
  id: uuid
  related_vulnerability_slug: String
  vulnerability_slug: String
}

"""
order by min() on columns of table "related_vulnerabilities"
"""
input related_vulnerabilities_min_order_by {
  id: order_by
  related_vulnerability_slug: order_by
  vulnerability_slug: order_by
}

"""
response of any mutation on the table "related_vulnerabilities"
"""
type related_vulnerabilities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [related_vulnerabilities!]!
}

"""
on_conflict condition type for table "related_vulnerabilities"
"""
input related_vulnerabilities_on_conflict {
  constraint: related_vulnerabilities_constraint!
  update_columns: [related_vulnerabilities_update_column!]! = []
  where: related_vulnerabilities_bool_exp
}

"""Ordering options when selecting data from "related_vulnerabilities"."""
input related_vulnerabilities_order_by {
  id: order_by
  parent: vulnerabilities_order_by
  related_vulnerability_slug: order_by
  vulnerability: vulnerabilities_order_by
  vulnerabilityByVulnerabilitySlug: vulnerabilities_order_by
  vulnerability_slug: order_by
}

"""primary key columns input for table: related_vulnerabilities"""
input related_vulnerabilities_pk_columns_input {
  id: uuid!
}

"""
select columns of table "related_vulnerabilities"
"""
enum related_vulnerabilities_select_column {
  """column name"""
  id

  """column name"""
  related_vulnerability_slug

  """column name"""
  vulnerability_slug
}

"""
input type for updating data in table "related_vulnerabilities"
"""
input related_vulnerabilities_set_input {
  id: uuid
  related_vulnerability_slug: String
  vulnerability_slug: String
}

"""
update columns of table "related_vulnerabilities"
"""
enum related_vulnerabilities_update_column {
  """column name"""
  id

  """column name"""
  related_vulnerability_slug

  """column name"""
  vulnerability_slug
}

"""
An individual time a scan was run on a build


columns and relationships of "scans"

"""
type scans {
  """An object relationship"""
  build: builds!
  build_id: uuid!
  created_at: timestamp!
  db_date: date!
  distro_name: String!
  distro_version: String!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!
  grype_version: String!
  id: uuid!
  scan_number: Int
  source_type: String!
  target: String!
}

"""
aggregated selection of "scans"
"""
type scans_aggregate {
  aggregate: scans_aggregate_fields
  nodes: [scans!]!
}

"""
aggregate fields of "scans"
"""
type scans_aggregate_fields {
  avg: scans_avg_fields
  count(columns: [scans_select_column!], distinct: Boolean): Int!
  max: scans_max_fields
  min: scans_min_fields
  stddev: scans_stddev_fields
  stddev_pop: scans_stddev_pop_fields
  stddev_samp: scans_stddev_samp_fields
  sum: scans_sum_fields
  var_pop: scans_var_pop_fields
  var_samp: scans_var_samp_fields
  variance: scans_variance_fields
}

"""
order by aggregate values of table "scans"
"""
input scans_aggregate_order_by {
  avg: scans_avg_order_by
  count: order_by
  max: scans_max_order_by
  min: scans_min_order_by
  stddev: scans_stddev_order_by
  stddev_pop: scans_stddev_pop_order_by
  stddev_samp: scans_stddev_samp_order_by
  sum: scans_sum_order_by
  var_pop: scans_var_pop_order_by
  var_samp: scans_var_samp_order_by
  variance: scans_variance_order_by
}

"""
input type for inserting array relation for remote table "scans"
"""
input scans_arr_rel_insert_input {
  data: [scans_insert_input!]!

  """upsert condition"""
  on_conflict: scans_on_conflict
}

"""aggregate avg on columns"""
type scans_avg_fields {
  scan_number: Float
}

"""
order by avg() on columns of table "scans"
"""
input scans_avg_order_by {
  scan_number: order_by
}

"""
Boolean expression to filter rows from the table "scans". All fields are combined with a logical 'AND'.
"""
input scans_bool_exp {
  _and: [scans_bool_exp!]
  _not: scans_bool_exp
  _or: [scans_bool_exp!]
  build: builds_bool_exp
  build_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  db_date: date_comparison_exp
  distro_name: String_comparison_exp
  distro_version: String_comparison_exp
  findings: findings_bool_exp
  grype_version: String_comparison_exp
  id: uuid_comparison_exp
  scan_number: Int_comparison_exp
  source_type: String_comparison_exp
  target: String_comparison_exp
}

"""
unique or primary key constraints on table "scans"
"""
enum scans_constraint {
  """unique or primary key constraint"""
  scans_pkey

  """unique or primary key constraint"""
  scans_scan_number_build_id_key
}

"""
input type for incrementing numeric columns in table "scans"
"""
input scans_inc_input {
  scan_number: Int
}

"""
input type for inserting data into table "scans"
"""
input scans_insert_input {
  build: builds_obj_rel_insert_input
  build_id: uuid
  created_at: timestamp
  db_date: date
  distro_name: String
  distro_version: String
  findings: findings_arr_rel_insert_input
  grype_version: String
  id: uuid
  scan_number: Int
  source_type: String
  target: String
}

"""aggregate max on columns"""
type scans_max_fields {
  build_id: uuid
  created_at: timestamp
  db_date: date
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  scan_number: Int
  source_type: String
  target: String
}

"""
order by max() on columns of table "scans"
"""
input scans_max_order_by {
  build_id: order_by
  created_at: order_by
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  grype_version: order_by
  id: order_by
  scan_number: order_by
  source_type: order_by
  target: order_by
}

"""aggregate min on columns"""
type scans_min_fields {
  build_id: uuid
  created_at: timestamp
  db_date: date
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  scan_number: Int
  source_type: String
  target: String
}

"""
order by min() on columns of table "scans"
"""
input scans_min_order_by {
  build_id: order_by
  created_at: order_by
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  grype_version: order_by
  id: order_by
  scan_number: order_by
  source_type: order_by
  target: order_by
}

"""
response of any mutation on the table "scans"
"""
type scans_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [scans!]!
}

"""
input type for inserting object relation for remote table "scans"
"""
input scans_obj_rel_insert_input {
  data: scans_insert_input!

  """upsert condition"""
  on_conflict: scans_on_conflict
}

"""
on_conflict condition type for table "scans"
"""
input scans_on_conflict {
  constraint: scans_constraint!
  update_columns: [scans_update_column!]! = []
  where: scans_bool_exp
}

"""Ordering options when selecting data from "scans"."""
input scans_order_by {
  build: builds_order_by
  build_id: order_by
  created_at: order_by
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  findings_aggregate: findings_aggregate_order_by
  grype_version: order_by
  id: order_by
  scan_number: order_by
  source_type: order_by
  target: order_by
}

"""primary key columns input for table: scans"""
input scans_pk_columns_input {
  id: uuid!
}

"""
select columns of table "scans"
"""
enum scans_select_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  db_date

  """column name"""
  distro_name

  """column name"""
  distro_version

  """column name"""
  grype_version

  """column name"""
  id

  """column name"""
  scan_number

  """column name"""
  source_type

  """column name"""
  target
}

"""
input type for updating data in table "scans"
"""
input scans_set_input {
  build_id: uuid
  created_at: timestamp
  db_date: date
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  scan_number: Int
  source_type: String
  target: String
}

"""aggregate stddev on columns"""
type scans_stddev_fields {
  scan_number: Float
}

"""
order by stddev() on columns of table "scans"
"""
input scans_stddev_order_by {
  scan_number: order_by
}

"""aggregate stddev_pop on columns"""
type scans_stddev_pop_fields {
  scan_number: Float
}

"""
order by stddev_pop() on columns of table "scans"
"""
input scans_stddev_pop_order_by {
  scan_number: order_by
}

"""aggregate stddev_samp on columns"""
type scans_stddev_samp_fields {
  scan_number: Float
}

"""
order by stddev_samp() on columns of table "scans"
"""
input scans_stddev_samp_order_by {
  scan_number: order_by
}

"""aggregate sum on columns"""
type scans_sum_fields {
  scan_number: Int
}

"""
order by sum() on columns of table "scans"
"""
input scans_sum_order_by {
  scan_number: order_by
}

"""
update columns of table "scans"
"""
enum scans_update_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  db_date

  """column name"""
  distro_name

  """column name"""
  distro_version

  """column name"""
  grype_version

  """column name"""
  id

  """column name"""
  scan_number

  """column name"""
  source_type

  """column name"""
  target
}

"""aggregate var_pop on columns"""
type scans_var_pop_fields {
  scan_number: Float
}

"""
order by var_pop() on columns of table "scans"
"""
input scans_var_pop_order_by {
  scan_number: order_by
}

"""aggregate var_samp on columns"""
type scans_var_samp_fields {
  scan_number: Float
}

"""
order by var_samp() on columns of table "scans"
"""
input scans_var_samp_order_by {
  scan_number: order_by
}

"""aggregate variance on columns"""
type scans_variance_fields {
  scan_number: Float
}

"""
order by variance() on columns of table "scans"
"""
input scans_variance_order_by {
  scan_number: order_by
}

"""
columns and relationships of "settings"
"""
type settings {
  created_at: timestamp!
  id: uuid!
  is_org_settings: Boolean
}

"""
aggregated selection of "settings"
"""
type settings_aggregate {
  aggregate: settings_aggregate_fields
  nodes: [settings!]!
}

"""
aggregate fields of "settings"
"""
type settings_aggregate_fields {
  count(columns: [settings_select_column!], distinct: Boolean): Int!
  max: settings_max_fields
  min: settings_min_fields
}

"""
Boolean expression to filter rows from the table "settings". All fields are combined with a logical 'AND'.
"""
input settings_bool_exp {
  _and: [settings_bool_exp!]
  _not: settings_bool_exp
  _or: [settings_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  is_org_settings: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "settings"
"""
enum settings_constraint {
  """unique or primary key constraint"""
  settings_pkey
}

"""
input type for inserting data into table "settings"
"""
input settings_insert_input {
  created_at: timestamp
  id: uuid
  is_org_settings: Boolean
}

"""aggregate max on columns"""
type settings_max_fields {
  created_at: timestamp
  id: uuid
}

"""aggregate min on columns"""
type settings_min_fields {
  created_at: timestamp
  id: uuid
}

"""
response of any mutation on the table "settings"
"""
type settings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [settings!]!
}

"""
on_conflict condition type for table "settings"
"""
input settings_on_conflict {
  constraint: settings_constraint!
  update_columns: [settings_update_column!]! = []
  where: settings_bool_exp
}

"""Ordering options when selecting data from "settings"."""
input settings_order_by {
  created_at: order_by
  id: order_by
  is_org_settings: order_by
}

"""primary key columns input for table: settings"""
input settings_pk_columns_input {
  id: uuid!
}

"""
select columns of table "settings"
"""
enum settings_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_org_settings
}

"""
input type for updating data in table "settings"
"""
input settings_set_input {
  created_at: timestamp
  id: uuid
  is_org_settings: Boolean
}

"""
update columns of table "settings"
"""
enum settings_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_org_settings
}

scalar severity_enum

"""
Boolean expression to compare columns of type "severity_enum". All fields are combined with logical 'AND'.
"""
input severity_enum_comparison_exp {
  _eq: severity_enum
  _gt: severity_enum
  _gte: severity_enum
  _in: [severity_enum!]
  _is_null: Boolean
  _lt: severity_enum
  _lte: severity_enum
  _neq: severity_enum
  _nin: [severity_enum!]
}

type subscription_root {
  """An array relationship"""
  builds(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): [builds!]!

  """An aggregate relationship"""
  builds_aggregate(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): builds_aggregate!

  """fetch data from the table: "builds" using primary key columns"""
  builds_by_pk(id: uuid!): builds

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!

  """fetch data from the table: "findings" using primary key columns"""
  findings_by_pk(id: uuid!): findings

  """
  fetch data from the table: "github_repositories"
  """
  github_repositories(
    """distinct select on columns"""
    distinct_on: [github_repositories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [github_repositories_order_by!]

    """filter the rows returned"""
    where: github_repositories_bool_exp
  ): [github_repositories!]!

  """An aggregate relationship"""
  github_repositories_aggregate(
    """distinct select on columns"""
    distinct_on: [github_repositories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [github_repositories_order_by!]

    """filter the rows returned"""
    where: github_repositories_bool_exp
  ): github_repositories_aggregate!

  """
  fetch data from the table: "github_repositories" using primary key columns
  """
  github_repositories_by_pk(id: uuid!): github_repositories

  """
  fetch data from the table: "identities"
  """
  identities(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): [identities!]!

  """
  fetch aggregated fields from the table: "identities"
  """
  identities_aggregate(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): identities_aggregate!

  """fetch data from the table: "identities" using primary key columns"""
  identities_by_pk(id: uuid!): identities

  """
  fetch data from the table: "identity_credential_identifiers"
  """
  identity_credential_identifiers(
    """distinct select on columns"""
    distinct_on: [identity_credential_identifiers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credential_identifiers_order_by!]

    """filter the rows returned"""
    where: identity_credential_identifiers_bool_exp
  ): [identity_credential_identifiers!]!

  """
  fetch aggregated fields from the table: "identity_credential_identifiers"
  """
  identity_credential_identifiers_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_credential_identifiers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credential_identifiers_order_by!]

    """filter the rows returned"""
    where: identity_credential_identifiers_bool_exp
  ): identity_credential_identifiers_aggregate!

  """
  fetch data from the table: "identity_credential_identifiers" using primary key columns
  """
  identity_credential_identifiers_by_pk(id: uuid!): identity_credential_identifiers

  """
  fetch data from the table: "identity_credential_types"
  """
  identity_credential_types(
    """distinct select on columns"""
    distinct_on: [identity_credential_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credential_types_order_by!]

    """filter the rows returned"""
    where: identity_credential_types_bool_exp
  ): [identity_credential_types!]!

  """
  fetch aggregated fields from the table: "identity_credential_types"
  """
  identity_credential_types_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_credential_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credential_types_order_by!]

    """filter the rows returned"""
    where: identity_credential_types_bool_exp
  ): identity_credential_types_aggregate!

  """
  fetch data from the table: "identity_credential_types" using primary key columns
  """
  identity_credential_types_by_pk(id: uuid!): identity_credential_types

  """
  fetch data from the table: "identity_credentials"
  """
  identity_credentials(
    """distinct select on columns"""
    distinct_on: [identity_credentials_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credentials_order_by!]

    """filter the rows returned"""
    where: identity_credentials_bool_exp
  ): [identity_credentials!]!

  """
  fetch aggregated fields from the table: "identity_credentials"
  """
  identity_credentials_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_credentials_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_credentials_order_by!]

    """filter the rows returned"""
    where: identity_credentials_bool_exp
  ): identity_credentials_aggregate!

  """
  fetch data from the table: "identity_credentials" using primary key columns
  """
  identity_credentials_by_pk(id: uuid!): identity_credentials

  """An array relationship"""
  identity_verifiable_addresses(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): [identity_verifiable_addresses!]!

  """An aggregate relationship"""
  identity_verifiable_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): identity_verifiable_addresses_aggregate!

  """
  fetch data from the table: "identity_verifiable_addresses" using primary key columns
  """
  identity_verifiable_addresses_by_pk(id: uuid!): identity_verifiable_addresses

  """An array relationship"""
  ignored_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): [ignored_vulnerabilities!]!

  """An aggregate relationship"""
  ignored_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): ignored_vulnerabilities_aggregate!

  """
  fetch data from the table: "ignored_vulnerabilities" using primary key columns
  """
  ignored_vulnerabilities_by_pk(id: uuid!): ignored_vulnerabilities

  """
  fetch data from the table: "instances"
  """
  instances(
    """distinct select on columns"""
    distinct_on: [instances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [instances_order_by!]

    """filter the rows returned"""
    where: instances_bool_exp
  ): [instances!]!

  """
  fetch aggregated fields from the table: "instances"
  """
  instances_aggregate(
    """distinct select on columns"""
    distinct_on: [instances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [instances_order_by!]

    """filter the rows returned"""
    where: instances_bool_exp
  ): instances_aggregate!

  """fetch data from the table: "instances" using primary key columns"""
  instances_by_pk(instance_id: uuid!): instances

  """An array relationship"""
  manifests(
    """distinct select on columns"""
    distinct_on: [manifests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifests_order_by!]

    """filter the rows returned"""
    where: manifests_bool_exp
  ): [manifests!]!

  """An aggregate relationship"""
  manifests_aggregate(
    """distinct select on columns"""
    distinct_on: [manifests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifests_order_by!]

    """filter the rows returned"""
    where: manifests_bool_exp
  ): manifests_aggregate!

  """fetch data from the table: "manifests" using primary key columns"""
  manifests_by_pk(id: uuid!): manifests

  """
  fetch data from the table: "organization_user"
  """
  organization_user(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """
  fetch aggregated fields from the table: "organization_user"
  """
  organization_user_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): organization_user_aggregate!

  """
  fetch data from the table: "organization_user" using primary key columns
  """
  organization_user_by_pk(id: uuid!): organization_user

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): organizations_aggregate!

  """fetch data from the table: "organizations" using primary key columns"""
  organizations_by_pk(id: uuid!): organizations

  """An array relationship"""
  package_versions(
    """distinct select on columns"""
    distinct_on: [package_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_versions_order_by!]

    """filter the rows returned"""
    where: package_versions_bool_exp
  ): [package_versions!]!

  """An aggregate relationship"""
  package_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [package_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_versions_order_by!]

    """filter the rows returned"""
    where: package_versions_bool_exp
  ): package_versions_aggregate!

  """
  fetch data from the table: "package_versions" using primary key columns
  """
  package_versions_by_pk(id: uuid!): package_versions

  """An array relationship"""
  project_access_tokens(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): [project_access_tokens!]!

  """An aggregate relationship"""
  project_access_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): project_access_tokens_aggregate!

  """
  fetch data from the table: "project_access_tokens" using primary key columns
  """
  project_access_tokens_by_pk(id: uuid!): project_access_tokens

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: uuid!): projects

  """An array relationship"""
  related_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): [related_vulnerabilities!]!

  """An aggregate relationship"""
  related_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): related_vulnerabilities_aggregate!

  """
  fetch data from the table: "related_vulnerabilities" using primary key columns
  """
  related_vulnerabilities_by_pk(id: uuid!): related_vulnerabilities

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """An aggregate relationship"""
  scans_aggregate(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): scans_aggregate!

  """fetch data from the table: "scans" using primary key columns"""
  scans_by_pk(id: uuid!): scans

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch aggregated fields from the table: "settings"
  """
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(id: uuid!): settings

  """
  fetch data from the table: "vulnerabilities"
  """
  vulnerabilities(
    """distinct select on columns"""
    distinct_on: [vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerabilities_order_by!]

    """filter the rows returned"""
    where: vulnerabilities_bool_exp
  ): [vulnerabilities!]!

  """
  fetch aggregated fields from the table: "vulnerabilities"
  """
  vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerabilities_order_by!]

    """filter the rows returned"""
    where: vulnerabilities_bool_exp
  ): vulnerabilities_aggregate!

  """fetch data from the table: "vulnerabilities" using primary key columns"""
  vulnerabilities_by_pk(id: uuid!): vulnerabilities

  """An array relationship"""
  vulnerability_packages(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): [vulnerability_packages!]!

  """An aggregate relationship"""
  vulnerability_packages_aggregate(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): vulnerability_packages_aggregate!

  """
  fetch data from the table: "vulnerability_packages" using primary key columns
  """
  vulnerability_packages_by_pk(id: uuid!): vulnerability_packages
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "vulnerabilities"
"""
type vulnerabilities {
  created_at: timestamp!
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_inferred: Boolean
  cvss_score: numeric
  cvss_version: String
  data_source: String!
  description: String

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!
  id: uuid!

  """An array relationship"""
  ignored_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): [ignored_vulnerabilities!]!

  """An aggregate relationship"""
  ignored_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): ignored_vulnerabilities_aggregate!
  name: String!
  namespace: String!
  record_source: String

  """An array relationship"""
  related_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): [related_vulnerabilities!]!

  """An aggregate relationship"""
  related_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): related_vulnerabilities_aggregate!

  """An array relationship"""
  reverse_related_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): [related_vulnerabilities!]!

  """An aggregate relationship"""
  reverse_related_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): related_vulnerabilities_aggregate!
  severity: severity_enum!
  slug: String!
  topic_id: uuid
  urls: _text

  """An array relationship"""
  vulnerability_packages(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): [vulnerability_packages!]!

  """An aggregate relationship"""
  vulnerability_packages_aggregate(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): vulnerability_packages_aggregate!
}

"""
aggregated selection of "vulnerabilities"
"""
type vulnerabilities_aggregate {
  aggregate: vulnerabilities_aggregate_fields
  nodes: [vulnerabilities!]!
}

"""
aggregate fields of "vulnerabilities"
"""
type vulnerabilities_aggregate_fields {
  avg: vulnerabilities_avg_fields
  count(columns: [vulnerabilities_select_column!], distinct: Boolean): Int!
  max: vulnerabilities_max_fields
  min: vulnerabilities_min_fields
  stddev: vulnerabilities_stddev_fields
  stddev_pop: vulnerabilities_stddev_pop_fields
  stddev_samp: vulnerabilities_stddev_samp_fields
  sum: vulnerabilities_sum_fields
  var_pop: vulnerabilities_var_pop_fields
  var_samp: vulnerabilities_var_samp_fields
  variance: vulnerabilities_variance_fields
}

"""aggregate avg on columns"""
type vulnerabilities_avg_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""
Boolean expression to filter rows from the table "vulnerabilities". All fields are combined with a logical 'AND'.
"""
input vulnerabilities_bool_exp {
  _and: [vulnerabilities_bool_exp!]
  _not: vulnerabilities_bool_exp
  _or: [vulnerabilities_bool_exp!]
  created_at: timestamp_comparison_exp
  cvss_exploitability_score: numeric_comparison_exp
  cvss_impact_score: numeric_comparison_exp
  cvss_inferred: Boolean_comparison_exp
  cvss_score: numeric_comparison_exp
  cvss_version: String_comparison_exp
  data_source: String_comparison_exp
  description: String_comparison_exp
  findings: findings_bool_exp
  id: uuid_comparison_exp
  ignored_vulnerabilities: ignored_vulnerabilities_bool_exp
  name: String_comparison_exp
  namespace: String_comparison_exp
  record_source: String_comparison_exp
  related_vulnerabilities: related_vulnerabilities_bool_exp
  reverse_related_vulnerabilities: related_vulnerabilities_bool_exp
  severity: severity_enum_comparison_exp
  slug: String_comparison_exp
  topic_id: uuid_comparison_exp
  urls: _text_comparison_exp
  vulnerability_packages: vulnerability_packages_bool_exp
}

"""
unique or primary key constraints on table "vulnerabilities"
"""
enum vulnerabilities_constraint {
  """unique or primary key constraint"""
  vulnerabilities_pkey

  """unique or primary key constraint"""
  vulnerabilities_slug_key
}

"""
input type for incrementing numeric columns in table "vulnerabilities"
"""
input vulnerabilities_inc_input {
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_score: numeric
}

"""
input type for inserting data into table "vulnerabilities"
"""
input vulnerabilities_insert_input {
  created_at: timestamp
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_inferred: Boolean
  cvss_score: numeric
  cvss_version: String
  data_source: String
  description: String
  findings: findings_arr_rel_insert_input
  id: uuid
  ignored_vulnerabilities: ignored_vulnerabilities_arr_rel_insert_input
  name: String
  namespace: String
  record_source: String
  related_vulnerabilities: related_vulnerabilities_arr_rel_insert_input
  reverse_related_vulnerabilities: related_vulnerabilities_arr_rel_insert_input
  severity: severity_enum
  slug: String
  topic_id: uuid
  urls: _text
  vulnerability_packages: vulnerability_packages_arr_rel_insert_input
}

"""aggregate max on columns"""
type vulnerabilities_max_fields {
  created_at: timestamp
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_score: numeric
  cvss_version: String
  data_source: String
  description: String
  id: uuid
  name: String
  namespace: String
  record_source: String
  slug: String
  topic_id: uuid
}

"""aggregate min on columns"""
type vulnerabilities_min_fields {
  created_at: timestamp
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_score: numeric
  cvss_version: String
  data_source: String
  description: String
  id: uuid
  name: String
  namespace: String
  record_source: String
  slug: String
  topic_id: uuid
}

"""
response of any mutation on the table "vulnerabilities"
"""
type vulnerabilities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerabilities!]!
}

"""
input type for inserting object relation for remote table "vulnerabilities"
"""
input vulnerabilities_obj_rel_insert_input {
  data: vulnerabilities_insert_input!

  """upsert condition"""
  on_conflict: vulnerabilities_on_conflict
}

"""
on_conflict condition type for table "vulnerabilities"
"""
input vulnerabilities_on_conflict {
  constraint: vulnerabilities_constraint!
  update_columns: [vulnerabilities_update_column!]! = []
  where: vulnerabilities_bool_exp
}

"""Ordering options when selecting data from "vulnerabilities"."""
input vulnerabilities_order_by {
  created_at: order_by
  cvss_exploitability_score: order_by
  cvss_impact_score: order_by
  cvss_inferred: order_by
  cvss_score: order_by
  cvss_version: order_by
  data_source: order_by
  description: order_by
  findings_aggregate: findings_aggregate_order_by
  id: order_by
  ignored_vulnerabilities_aggregate: ignored_vulnerabilities_aggregate_order_by
  name: order_by
  namespace: order_by
  record_source: order_by
  related_vulnerabilities_aggregate: related_vulnerabilities_aggregate_order_by
  reverse_related_vulnerabilities_aggregate: related_vulnerabilities_aggregate_order_by
  severity: order_by
  slug: order_by
  topic_id: order_by
  urls: order_by
  vulnerability_packages_aggregate: vulnerability_packages_aggregate_order_by
}

"""primary key columns input for table: vulnerabilities"""
input vulnerabilities_pk_columns_input {
  id: uuid!
}

"""
select columns of table "vulnerabilities"
"""
enum vulnerabilities_select_column {
  """column name"""
  created_at

  """column name"""
  cvss_exploitability_score

  """column name"""
  cvss_impact_score

  """column name"""
  cvss_inferred

  """column name"""
  cvss_score

  """column name"""
  cvss_version

  """column name"""
  data_source

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  namespace

  """column name"""
  record_source

  """column name"""
  severity

  """column name"""
  slug

  """column name"""
  topic_id

  """column name"""
  urls
}

"""
input type for updating data in table "vulnerabilities"
"""
input vulnerabilities_set_input {
  created_at: timestamp
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_inferred: Boolean
  cvss_score: numeric
  cvss_version: String
  data_source: String
  description: String
  id: uuid
  name: String
  namespace: String
  record_source: String
  severity: severity_enum
  slug: String
  topic_id: uuid
  urls: _text
}

"""aggregate stddev on columns"""
type vulnerabilities_stddev_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""aggregate stddev_pop on columns"""
type vulnerabilities_stddev_pop_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""aggregate stddev_samp on columns"""
type vulnerabilities_stddev_samp_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""aggregate sum on columns"""
type vulnerabilities_sum_fields {
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_score: numeric
}

"""
update columns of table "vulnerabilities"
"""
enum vulnerabilities_update_column {
  """column name"""
  created_at

  """column name"""
  cvss_exploitability_score

  """column name"""
  cvss_impact_score

  """column name"""
  cvss_inferred

  """column name"""
  cvss_score

  """column name"""
  cvss_version

  """column name"""
  data_source

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  namespace

  """column name"""
  record_source

  """column name"""
  severity

  """column name"""
  slug

  """column name"""
  topic_id

  """column name"""
  urls
}

"""aggregate var_pop on columns"""
type vulnerabilities_var_pop_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""aggregate var_samp on columns"""
type vulnerabilities_var_samp_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""aggregate variance on columns"""
type vulnerabilities_variance_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""
All of the package vulnerabilities belonging to a given vulnerability


columns and relationships of "vulnerability_packages"

"""
type vulnerability_packages {
  advisories: String!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!
  id: uuid!
  name: String

  """An array relationship"""
  package_versions(
    """distinct select on columns"""
    distinct_on: [package_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_versions_order_by!]

    """filter the rows returned"""
    where: package_versions_bool_exp
  ): [package_versions!]!

  """An aggregate relationship"""
  package_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [package_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_versions_order_by!]

    """filter the rows returned"""
    where: package_versions_bool_exp
  ): package_versions_aggregate!
  slug: String!
  vuln_slug: String!

  """An object relationship"""
  vulnerability: vulnerabilities!
}

"""
aggregated selection of "vulnerability_packages"
"""
type vulnerability_packages_aggregate {
  aggregate: vulnerability_packages_aggregate_fields
  nodes: [vulnerability_packages!]!
}

"""
aggregate fields of "vulnerability_packages"
"""
type vulnerability_packages_aggregate_fields {
  count(columns: [vulnerability_packages_select_column!], distinct: Boolean): Int!
  max: vulnerability_packages_max_fields
  min: vulnerability_packages_min_fields
}

"""
order by aggregate values of table "vulnerability_packages"
"""
input vulnerability_packages_aggregate_order_by {
  count: order_by
  max: vulnerability_packages_max_order_by
  min: vulnerability_packages_min_order_by
}

"""
input type for inserting array relation for remote table "vulnerability_packages"
"""
input vulnerability_packages_arr_rel_insert_input {
  data: [vulnerability_packages_insert_input!]!

  """upsert condition"""
  on_conflict: vulnerability_packages_on_conflict
}

"""
Boolean expression to filter rows from the table "vulnerability_packages". All fields are combined with a logical 'AND'.
"""
input vulnerability_packages_bool_exp {
  _and: [vulnerability_packages_bool_exp!]
  _not: vulnerability_packages_bool_exp
  _or: [vulnerability_packages_bool_exp!]
  advisories: String_comparison_exp
  findings: findings_bool_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  package_versions: package_versions_bool_exp
  slug: String_comparison_exp
  vuln_slug: String_comparison_exp
  vulnerability: vulnerabilities_bool_exp
}

"""
unique or primary key constraints on table "vulnerability_packages"
"""
enum vulnerability_packages_constraint {
  """unique or primary key constraint"""
  vulnerability_packages_pkey

  """unique or primary key constraint"""
  vulnerability_packages_slug_key
}

"""
input type for inserting data into table "vulnerability_packages"
"""
input vulnerability_packages_insert_input {
  advisories: String
  findings: findings_arr_rel_insert_input
  id: uuid
  name: String
  package_versions: package_versions_arr_rel_insert_input
  slug: String
  vuln_slug: String
  vulnerability: vulnerabilities_obj_rel_insert_input
}

"""aggregate max on columns"""
type vulnerability_packages_max_fields {
  advisories: String
  id: uuid
  name: String
  slug: String
  vuln_slug: String
}

"""
order by max() on columns of table "vulnerability_packages"
"""
input vulnerability_packages_max_order_by {
  advisories: order_by
  id: order_by
  name: order_by
  slug: order_by
  vuln_slug: order_by
}

"""aggregate min on columns"""
type vulnerability_packages_min_fields {
  advisories: String
  id: uuid
  name: String
  slug: String
  vuln_slug: String
}

"""
order by min() on columns of table "vulnerability_packages"
"""
input vulnerability_packages_min_order_by {
  advisories: order_by
  id: order_by
  name: order_by
  slug: order_by
  vuln_slug: order_by
}

"""
response of any mutation on the table "vulnerability_packages"
"""
type vulnerability_packages_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability_packages!]!
}

"""
input type for inserting object relation for remote table "vulnerability_packages"
"""
input vulnerability_packages_obj_rel_insert_input {
  data: vulnerability_packages_insert_input!

  """upsert condition"""
  on_conflict: vulnerability_packages_on_conflict
}

"""
on_conflict condition type for table "vulnerability_packages"
"""
input vulnerability_packages_on_conflict {
  constraint: vulnerability_packages_constraint!
  update_columns: [vulnerability_packages_update_column!]! = []
  where: vulnerability_packages_bool_exp
}

"""Ordering options when selecting data from "vulnerability_packages"."""
input vulnerability_packages_order_by {
  advisories: order_by
  findings_aggregate: findings_aggregate_order_by
  id: order_by
  name: order_by
  package_versions_aggregate: package_versions_aggregate_order_by
  slug: order_by
  vuln_slug: order_by
  vulnerability: vulnerabilities_order_by
}

"""primary key columns input for table: vulnerability_packages"""
input vulnerability_packages_pk_columns_input {
  id: uuid!
}

"""
select columns of table "vulnerability_packages"
"""
enum vulnerability_packages_select_column {
  """column name"""
  advisories

  """column name"""
  id

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  vuln_slug
}

"""
input type for updating data in table "vulnerability_packages"
"""
input vulnerability_packages_set_input {
  advisories: String
  id: uuid
  name: String
  slug: String
  vuln_slug: String
}

"""
update columns of table "vulnerability_packages"
"""
enum vulnerability_packages_update_column {
  """column name"""
  advisories

  """column name"""
  id

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  vuln_slug
}

