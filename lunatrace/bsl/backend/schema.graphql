schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type PresignedUrlResponse {
  bucket: String!
  error: Boolean!
  error_message: String
  headers: String!
  key: String!
  url: String!
}

type SbomUploadUrlOutput {
  error: Boolean!
  uploadUrl: UploadUrl
}

type ScanManifestOutput {
  build_id: String!
  error: Boolean!
  error_message: String
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type UploadUrl {
  headers: String!
  url: String!
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

"""
columns and relationships of "builds"
"""
type builds {
  agent_access_token: uuid!
  build_number: Int
  created_at: timestamp!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid!

  """An object relationship"""
  project: projects
  project_id: uuid
  s3_url: String

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """An aggregate relationship"""
  scans_aggregate(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): scans_aggregate!
}

"""
aggregated selection of "builds"
"""
type builds_aggregate {
  aggregate: builds_aggregate_fields
  nodes: [builds!]!
}

"""
aggregate fields of "builds"
"""
type builds_aggregate_fields {
  avg: builds_avg_fields
  count(columns: [builds_select_column!], distinct: Boolean): Int!
  max: builds_max_fields
  min: builds_min_fields
  stddev: builds_stddev_fields
  stddev_pop: builds_stddev_pop_fields
  stddev_samp: builds_stddev_samp_fields
  sum: builds_sum_fields
  var_pop: builds_var_pop_fields
  var_samp: builds_var_samp_fields
  variance: builds_variance_fields
}

"""
order by aggregate values of table "builds"
"""
input builds_aggregate_order_by {
  avg: builds_avg_order_by
  count: order_by
  max: builds_max_order_by
  min: builds_min_order_by
  stddev: builds_stddev_order_by
  stddev_pop: builds_stddev_pop_order_by
  stddev_samp: builds_stddev_samp_order_by
  sum: builds_sum_order_by
  var_pop: builds_var_pop_order_by
  var_samp: builds_var_samp_order_by
  variance: builds_variance_order_by
}

"""
input type for inserting array relation for remote table "builds"
"""
input builds_arr_rel_insert_input {
  data: [builds_insert_input!]!

  """upsert condition"""
  on_conflict: builds_on_conflict
}

"""aggregate avg on columns"""
type builds_avg_fields {
  build_number: Float
}

"""
order by avg() on columns of table "builds"
"""
input builds_avg_order_by {
  build_number: order_by
}

"""
Boolean expression to filter rows from the table "builds". All fields are combined with a logical 'AND'.
"""
input builds_bool_exp {
  _and: [builds_bool_exp!]
  _not: builds_bool_exp
  _or: [builds_bool_exp!]
  agent_access_token: uuid_comparison_exp
  build_number: Int_comparison_exp
  created_at: timestamp_comparison_exp
  findings: findings_bool_exp
  git_branch: String_comparison_exp
  git_hash: String_comparison_exp
  git_remote: String_comparison_exp
  id: uuid_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  s3_url: String_comparison_exp
  scans: scans_bool_exp
}

"""
unique or primary key constraints on table "builds"
"""
enum builds_constraint {
  """unique or primary key constraint"""
  builds_agent_access_token_key

  """unique or primary key constraint"""
  builds_build_number_project_id_key

  """unique or primary key constraint"""
  builds_pkey
}

"""
input type for incrementing numeric columns in table "builds"
"""
input builds_inc_input {
  build_number: Int
}

"""
input type for inserting data into table "builds"
"""
input builds_insert_input {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  findings: findings_arr_rel_insert_input
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project: projects_obj_rel_insert_input
  project_id: uuid
  s3_url: String
  scans: scans_arr_rel_insert_input
}

"""aggregate max on columns"""
type builds_max_fields {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project_id: uuid
  s3_url: String
}

"""
order by max() on columns of table "builds"
"""
input builds_max_order_by {
  agent_access_token: order_by
  build_number: order_by
  created_at: order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project_id: order_by
  s3_url: order_by
}

"""aggregate min on columns"""
type builds_min_fields {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project_id: uuid
  s3_url: String
}

"""
order by min() on columns of table "builds"
"""
input builds_min_order_by {
  agent_access_token: order_by
  build_number: order_by
  created_at: order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project_id: order_by
  s3_url: order_by
}

"""
response of any mutation on the table "builds"
"""
type builds_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [builds!]!
}

"""
input type for inserting object relation for remote table "builds"
"""
input builds_obj_rel_insert_input {
  data: builds_insert_input!

  """upsert condition"""
  on_conflict: builds_on_conflict
}

"""
on_conflict condition type for table "builds"
"""
input builds_on_conflict {
  constraint: builds_constraint!
  update_columns: [builds_update_column!]! = []
  where: builds_bool_exp
}

"""Ordering options when selecting data from "builds"."""
input builds_order_by {
  agent_access_token: order_by
  build_number: order_by
  created_at: order_by
  findings_aggregate: findings_aggregate_order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project: projects_order_by
  project_id: order_by
  s3_url: order_by
  scans_aggregate: scans_aggregate_order_by
}

"""primary key columns input for table: builds"""
input builds_pk_columns_input {
  id: uuid!
}

"""
select columns of table "builds"
"""
enum builds_select_column {
  """column name"""
  agent_access_token

  """column name"""
  build_number

  """column name"""
  created_at

  """column name"""
  git_branch

  """column name"""
  git_hash

  """column name"""
  git_remote

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  s3_url
}

"""
input type for updating data in table "builds"
"""
input builds_set_input {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project_id: uuid
  s3_url: String
}

"""aggregate stddev on columns"""
type builds_stddev_fields {
  build_number: Float
}

"""
order by stddev() on columns of table "builds"
"""
input builds_stddev_order_by {
  build_number: order_by
}

"""aggregate stddev_pop on columns"""
type builds_stddev_pop_fields {
  build_number: Float
}

"""
order by stddev_pop() on columns of table "builds"
"""
input builds_stddev_pop_order_by {
  build_number: order_by
}

"""aggregate stddev_samp on columns"""
type builds_stddev_samp_fields {
  build_number: Float
}

"""
order by stddev_samp() on columns of table "builds"
"""
input builds_stddev_samp_order_by {
  build_number: order_by
}

"""aggregate sum on columns"""
type builds_sum_fields {
  build_number: Int
}

"""
order by sum() on columns of table "builds"
"""
input builds_sum_order_by {
  build_number: order_by
}

"""
update columns of table "builds"
"""
enum builds_update_column {
  """column name"""
  agent_access_token

  """column name"""
  build_number

  """column name"""
  created_at

  """column name"""
  git_branch

  """column name"""
  git_hash

  """column name"""
  git_remote

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  s3_url
}

"""aggregate var_pop on columns"""
type builds_var_pop_fields {
  build_number: Float
}

"""
order by var_pop() on columns of table "builds"
"""
input builds_var_pop_order_by {
  build_number: order_by
}

"""aggregate var_samp on columns"""
type builds_var_samp_fields {
  build_number: Float
}

"""
order by var_samp() on columns of table "builds"
"""
input builds_var_samp_order_by {
  build_number: order_by
}

"""aggregate variance on columns"""
type builds_variance_fields {
  build_number: Float
}

"""
order by variance() on columns of table "builds"
"""
input builds_variance_order_by {
  build_number: order_by
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "findings"
"""
type findings {
  """An object relationship"""
  build: builds!
  build_id: uuid!
  created_at: timestamp!
  dedupe_slug: String!
  fix_state: fix_state_enum!
  fix_versions: _text
  id: uuid!
  language: String!
  locations: _text!
  matcher: String!
  package_name: String!

  """An object relationship"""
  package_version: package_versions
  package_version_id: uuid
  purl: String!

  """An object relationship"""
  scan: scans!
  scan_id: uuid!
  severity: severity_enum!
  type: String!
  updated_at: timestamptz!
  version: String!
  version_matcher: String!
  virtual_path: String

  """An object relationship"""
  vulnerability: vulnerabilities!
  vulnerability_id: uuid!

  """An object relationship"""
  vulnerability_package: vulnerability_packages
  vulnerability_package_id: uuid
}

"""
aggregated selection of "findings"
"""
type findings_aggregate {
  aggregate: findings_aggregate_fields
  nodes: [findings!]!
}

"""
aggregate fields of "findings"
"""
type findings_aggregate_fields {
  count(columns: [findings_select_column!], distinct: Boolean): Int!
  max: findings_max_fields
  min: findings_min_fields
}

"""
order by aggregate values of table "findings"
"""
input findings_aggregate_order_by {
  count: order_by
  max: findings_max_order_by
  min: findings_min_order_by
}

"""
input type for inserting array relation for remote table "findings"
"""
input findings_arr_rel_insert_input {
  data: [findings_insert_input!]!

  """upsert condition"""
  on_conflict: findings_on_conflict
}

"""
Boolean expression to filter rows from the table "findings". All fields are combined with a logical 'AND'.
"""
input findings_bool_exp {
  _and: [findings_bool_exp!]
  _not: findings_bool_exp
  _or: [findings_bool_exp!]
  build: builds_bool_exp
  build_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  dedupe_slug: String_comparison_exp
  fix_state: fix_state_enum_comparison_exp
  fix_versions: _text_comparison_exp
  id: uuid_comparison_exp
  language: String_comparison_exp
  locations: _text_comparison_exp
  matcher: String_comparison_exp
  package_name: String_comparison_exp
  package_version: package_versions_bool_exp
  package_version_id: uuid_comparison_exp
  purl: String_comparison_exp
  scan: scans_bool_exp
  scan_id: uuid_comparison_exp
  severity: severity_enum_comparison_exp
  type: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  version: String_comparison_exp
  version_matcher: String_comparison_exp
  virtual_path: String_comparison_exp
  vulnerability: vulnerabilities_bool_exp
  vulnerability_id: uuid_comparison_exp
  vulnerability_package: vulnerability_packages_bool_exp
  vulnerability_package_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "findings"
"""
enum findings_constraint {
  """unique or primary key constraint"""
  findings_dedupe_slug_build_id_key

  """unique or primary key constraint"""
  findings_pkey
}

"""
input type for inserting data into table "findings"
"""
input findings_insert_input {
  build: builds_obj_rel_insert_input
  build_id: uuid
  created_at: timestamp
  dedupe_slug: String
  fix_state: fix_state_enum
  fix_versions: _text
  id: uuid
  language: String
  locations: _text
  matcher: String
  package_name: String
  package_version: package_versions_obj_rel_insert_input
  package_version_id: uuid
  purl: String
  scan: scans_obj_rel_insert_input
  scan_id: uuid
  severity: severity_enum
  type: String
  updated_at: timestamptz
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability: vulnerabilities_obj_rel_insert_input
  vulnerability_id: uuid
  vulnerability_package: vulnerability_packages_obj_rel_insert_input
  vulnerability_package_id: uuid
}

"""aggregate max on columns"""
type findings_max_fields {
  build_id: uuid
  created_at: timestamp
  dedupe_slug: String
  id: uuid
  language: String
  matcher: String
  package_name: String
  package_version_id: uuid
  purl: String
  scan_id: uuid
  type: String
  updated_at: timestamptz
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability_id: uuid
  vulnerability_package_id: uuid
}

"""
order by max() on columns of table "findings"
"""
input findings_max_order_by {
  build_id: order_by
  created_at: order_by
  dedupe_slug: order_by
  id: order_by
  language: order_by
  matcher: order_by
  package_name: order_by
  package_version_id: order_by
  purl: order_by
  scan_id: order_by
  type: order_by
  updated_at: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability_id: order_by
  vulnerability_package_id: order_by
}

"""aggregate min on columns"""
type findings_min_fields {
  build_id: uuid
  created_at: timestamp
  dedupe_slug: String
  id: uuid
  language: String
  matcher: String
  package_name: String
  package_version_id: uuid
  purl: String
  scan_id: uuid
  type: String
  updated_at: timestamptz
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability_id: uuid
  vulnerability_package_id: uuid
}

"""
order by min() on columns of table "findings"
"""
input findings_min_order_by {
  build_id: order_by
  created_at: order_by
  dedupe_slug: order_by
  id: order_by
  language: order_by
  matcher: order_by
  package_name: order_by
  package_version_id: order_by
  purl: order_by
  scan_id: order_by
  type: order_by
  updated_at: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability_id: order_by
  vulnerability_package_id: order_by
}

"""
response of any mutation on the table "findings"
"""
type findings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [findings!]!
}

"""
on_conflict condition type for table "findings"
"""
input findings_on_conflict {
  constraint: findings_constraint!
  update_columns: [findings_update_column!]! = []
  where: findings_bool_exp
}

"""Ordering options when selecting data from "findings"."""
input findings_order_by {
  build: builds_order_by
  build_id: order_by
  created_at: order_by
  dedupe_slug: order_by
  fix_state: order_by
  fix_versions: order_by
  id: order_by
  language: order_by
  locations: order_by
  matcher: order_by
  package_name: order_by
  package_version: package_versions_order_by
  package_version_id: order_by
  purl: order_by
  scan: scans_order_by
  scan_id: order_by
  severity: order_by
  type: order_by
  updated_at: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability: vulnerabilities_order_by
  vulnerability_id: order_by
  vulnerability_package: vulnerability_packages_order_by
  vulnerability_package_id: order_by
}

"""primary key columns input for table: findings"""
input findings_pk_columns_input {
  id: uuid!
}

"""
select columns of table "findings"
"""
enum findings_select_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  dedupe_slug

  """column name"""
  fix_state

  """column name"""
  fix_versions

  """column name"""
  id

  """column name"""
  language

  """column name"""
  locations

  """column name"""
  matcher

  """column name"""
  package_name

  """column name"""
  package_version_id

  """column name"""
  purl

  """column name"""
  scan_id

  """column name"""
  severity

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  version

  """column name"""
  version_matcher

  """column name"""
  virtual_path

  """column name"""
  vulnerability_id

  """column name"""
  vulnerability_package_id
}

"""
input type for updating data in table "findings"
"""
input findings_set_input {
  build_id: uuid
  created_at: timestamp
  dedupe_slug: String
  fix_state: fix_state_enum
  fix_versions: _text
  id: uuid
  language: String
  locations: _text
  matcher: String
  package_name: String
  package_version_id: uuid
  purl: String
  scan_id: uuid
  severity: severity_enum
  type: String
  updated_at: timestamptz
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability_id: uuid
  vulnerability_package_id: uuid
}

"""
update columns of table "findings"
"""
enum findings_update_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  dedupe_slug

  """column name"""
  fix_state

  """column name"""
  fix_versions

  """column name"""
  id

  """column name"""
  language

  """column name"""
  locations

  """column name"""
  matcher

  """column name"""
  package_name

  """column name"""
  package_version_id

  """column name"""
  purl

  """column name"""
  scan_id

  """column name"""
  severity

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  version

  """column name"""
  version_matcher

  """column name"""
  virtual_path

  """column name"""
  vulnerability_id

  """column name"""
  vulnerability_package_id
}

scalar fix_state_enum

"""
Boolean expression to compare columns of type "fix_state_enum". All fields are combined with logical 'AND'.
"""
input fix_state_enum_comparison_exp {
  _eq: fix_state_enum
  _gt: fix_state_enum
  _gte: fix_state_enum
  _in: [fix_state_enum!]
  _is_null: Boolean
  _lt: fix_state_enum
  _lte: fix_state_enum
  _neq: fix_state_enum
  _nin: [fix_state_enum!]
}

"""
Metadata about a github repository and where to find it.


columns and relationships of "github_repositories"

"""
type github_repositories {
  api_response(
    """JSON select path"""
    path: String
  ): jsonb!
  git_url: String!
  github_id: Int!
  id: uuid!

  """An object relationship"""
  project: projects!
  project_id: uuid!
}

"""
aggregated selection of "github_repositories"
"""
type github_repositories_aggregate {
  aggregate: github_repositories_aggregate_fields
  nodes: [github_repositories!]!
}

"""
aggregate fields of "github_repositories"
"""
type github_repositories_aggregate_fields {
  avg: github_repositories_avg_fields
  count(columns: [github_repositories_select_column!], distinct: Boolean): Int!
  max: github_repositories_max_fields
  min: github_repositories_min_fields
  stddev: github_repositories_stddev_fields
  stddev_pop: github_repositories_stddev_pop_fields
  stddev_samp: github_repositories_stddev_samp_fields
  sum: github_repositories_sum_fields
  var_pop: github_repositories_var_pop_fields
  var_samp: github_repositories_var_samp_fields
  variance: github_repositories_variance_fields
}

"""
order by aggregate values of table "github_repositories"
"""
input github_repositories_aggregate_order_by {
  avg: github_repositories_avg_order_by
  count: order_by
  max: github_repositories_max_order_by
  min: github_repositories_min_order_by
  stddev: github_repositories_stddev_order_by
  stddev_pop: github_repositories_stddev_pop_order_by
  stddev_samp: github_repositories_stddev_samp_order_by
  sum: github_repositories_sum_order_by
  var_pop: github_repositories_var_pop_order_by
  var_samp: github_repositories_var_samp_order_by
  variance: github_repositories_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input github_repositories_append_input {
  api_response: jsonb
}

"""
input type for inserting array relation for remote table "github_repositories"
"""
input github_repositories_arr_rel_insert_input {
  data: [github_repositories_insert_input!]!

  """upsert condition"""
  on_conflict: github_repositories_on_conflict
}

"""aggregate avg on columns"""
type github_repositories_avg_fields {
  github_id: Float
}

"""
order by avg() on columns of table "github_repositories"
"""
input github_repositories_avg_order_by {
  github_id: order_by
}

"""
Boolean expression to filter rows from the table "github_repositories". All fields are combined with a logical 'AND'.
"""
input github_repositories_bool_exp {
  _and: [github_repositories_bool_exp!]
  _not: github_repositories_bool_exp
  _or: [github_repositories_bool_exp!]
  api_response: jsonb_comparison_exp
  git_url: String_comparison_exp
  github_id: Int_comparison_exp
  id: uuid_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "github_repositories"
"""
enum github_repositories_constraint {
  """unique or primary key constraint"""
  github_repositories_github_id_key

  """unique or primary key constraint"""
  github_repositories_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input github_repositories_delete_at_path_input {
  api_response: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input github_repositories_delete_elem_input {
  api_response: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input github_repositories_delete_key_input {
  api_response: String
}

"""
input type for incrementing numeric columns in table "github_repositories"
"""
input github_repositories_inc_input {
  github_id: Int
}

"""
input type for inserting data into table "github_repositories"
"""
input github_repositories_insert_input {
  api_response: jsonb
  git_url: String
  github_id: Int
  id: uuid
  project: projects_obj_rel_insert_input
  project_id: uuid
}

"""aggregate max on columns"""
type github_repositories_max_fields {
  git_url: String
  github_id: Int
  id: uuid
  project_id: uuid
}

"""
order by max() on columns of table "github_repositories"
"""
input github_repositories_max_order_by {
  git_url: order_by
  github_id: order_by
  id: order_by
  project_id: order_by
}

"""aggregate min on columns"""
type github_repositories_min_fields {
  git_url: String
  github_id: Int
  id: uuid
  project_id: uuid
}

"""
order by min() on columns of table "github_repositories"
"""
input github_repositories_min_order_by {
  git_url: order_by
  github_id: order_by
  id: order_by
  project_id: order_by
}

"""
response of any mutation on the table "github_repositories"
"""
type github_repositories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [github_repositories!]!
}

"""
on_conflict condition type for table "github_repositories"
"""
input github_repositories_on_conflict {
  constraint: github_repositories_constraint!
  update_columns: [github_repositories_update_column!]! = []
  where: github_repositories_bool_exp
}

"""Ordering options when selecting data from "github_repositories"."""
input github_repositories_order_by {
  api_response: order_by
  git_url: order_by
  github_id: order_by
  id: order_by
  project: projects_order_by
  project_id: order_by
}

"""primary key columns input for table: github_repositories"""
input github_repositories_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input github_repositories_prepend_input {
  api_response: jsonb
}

"""
select columns of table "github_repositories"
"""
enum github_repositories_select_column {
  """column name"""
  api_response

  """column name"""
  git_url

  """column name"""
  github_id

  """column name"""
  id

  """column name"""
  project_id
}

"""
input type for updating data in table "github_repositories"
"""
input github_repositories_set_input {
  api_response: jsonb
  git_url: String
  github_id: Int
  id: uuid
  project_id: uuid
}

"""aggregate stddev on columns"""
type github_repositories_stddev_fields {
  github_id: Float
}

"""
order by stddev() on columns of table "github_repositories"
"""
input github_repositories_stddev_order_by {
  github_id: order_by
}

"""aggregate stddev_pop on columns"""
type github_repositories_stddev_pop_fields {
  github_id: Float
}

"""
order by stddev_pop() on columns of table "github_repositories"
"""
input github_repositories_stddev_pop_order_by {
  github_id: order_by
}

"""aggregate stddev_samp on columns"""
type github_repositories_stddev_samp_fields {
  github_id: Float
}

"""
order by stddev_samp() on columns of table "github_repositories"
"""
input github_repositories_stddev_samp_order_by {
  github_id: order_by
}

"""aggregate sum on columns"""
type github_repositories_sum_fields {
  github_id: Int
}

"""
order by sum() on columns of table "github_repositories"
"""
input github_repositories_sum_order_by {
  github_id: order_by
}

"""
update columns of table "github_repositories"
"""
enum github_repositories_update_column {
  """column name"""
  api_response

  """column name"""
  git_url

  """column name"""
  github_id

  """column name"""
  id

  """column name"""
  project_id
}

"""aggregate var_pop on columns"""
type github_repositories_var_pop_fields {
  github_id: Float
}

"""
order by var_pop() on columns of table "github_repositories"
"""
input github_repositories_var_pop_order_by {
  github_id: order_by
}

"""aggregate var_samp on columns"""
type github_repositories_var_samp_fields {
  github_id: Float
}

"""
order by var_samp() on columns of table "github_repositories"
"""
input github_repositories_var_samp_order_by {
  github_id: order_by
}

"""aggregate variance on columns"""
type github_repositories_variance_fields {
  github_id: Float
}

"""
order by variance() on columns of table "github_repositories"
"""
input github_repositories_variance_order_by {
  github_id: order_by
}

"""
columns and relationships of "identities"
"""
type identities {
  created_at: timestamp!
  id: uuid!

  """An array relationship"""
  identity_verifiable_addresses(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): [identity_verifiable_addresses!]!

  """An aggregate relationship"""
  identity_verifiable_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): identity_verifiable_addresses_aggregate!
  nid: uuid

  """An array relationship"""
  organization_users(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """An aggregate relationship"""
  organization_users_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): organization_user_aggregate!
  schema_id: String!
  state: String!
  state_changed_at: timestamp
  traits(
    """JSON select path"""
    path: String
  ): jsonb!
  updated_at: timestamp!
}

"""
aggregated selection of "identities"
"""
type identities_aggregate {
  aggregate: identities_aggregate_fields
  nodes: [identities!]!
}

"""
aggregate fields of "identities"
"""
type identities_aggregate_fields {
  count(columns: [identities_select_column!], distinct: Boolean): Int!
  max: identities_max_fields
  min: identities_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input identities_append_input {
  traits: jsonb
}

"""
Boolean expression to filter rows from the table "identities". All fields are combined with a logical 'AND'.
"""
input identities_bool_exp {
  _and: [identities_bool_exp!]
  _not: identities_bool_exp
  _or: [identities_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  identity_verifiable_addresses: identity_verifiable_addresses_bool_exp
  nid: uuid_comparison_exp
  organization_users: organization_user_bool_exp
  schema_id: String_comparison_exp
  state: String_comparison_exp
  state_changed_at: timestamp_comparison_exp
  traits: jsonb_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "identities"
"""
enum identities_constraint {
  """unique or primary key constraint"""
  identities_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input identities_delete_at_path_input {
  traits: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input identities_delete_elem_input {
  traits: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input identities_delete_key_input {
  traits: String
}

"""
input type for inserting data into table "identities"
"""
input identities_insert_input {
  created_at: timestamp
  id: uuid
  identity_verifiable_addresses: identity_verifiable_addresses_arr_rel_insert_input
  nid: uuid
  organization_users: organization_user_arr_rel_insert_input
  schema_id: String
  state: String
  state_changed_at: timestamp
  traits: jsonb
  updated_at: timestamp
}

"""aggregate max on columns"""
type identities_max_fields {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  updated_at: timestamp
}

"""aggregate min on columns"""
type identities_min_fields {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  updated_at: timestamp
}

"""
response of any mutation on the table "identities"
"""
type identities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identities!]!
}

"""
input type for inserting object relation for remote table "identities"
"""
input identities_obj_rel_insert_input {
  data: identities_insert_input!

  """upsert condition"""
  on_conflict: identities_on_conflict
}

"""
on_conflict condition type for table "identities"
"""
input identities_on_conflict {
  constraint: identities_constraint!
  update_columns: [identities_update_column!]! = []
  where: identities_bool_exp
}

"""Ordering options when selecting data from "identities"."""
input identities_order_by {
  created_at: order_by
  id: order_by
  identity_verifiable_addresses_aggregate: identity_verifiable_addresses_aggregate_order_by
  nid: order_by
  organization_users_aggregate: organization_user_aggregate_order_by
  schema_id: order_by
  state: order_by
  state_changed_at: order_by
  traits: order_by
  updated_at: order_by
}

"""primary key columns input for table: identities"""
input identities_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input identities_prepend_input {
  traits: jsonb
}

"""
select columns of table "identities"
"""
enum identities_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nid

  """column name"""
  schema_id

  """column name"""
  state

  """column name"""
  state_changed_at

  """column name"""
  traits

  """column name"""
  updated_at
}

"""
input type for updating data in table "identities"
"""
input identities_set_input {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  traits: jsonb
  updated_at: timestamp
}

"""
update columns of table "identities"
"""
enum identities_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nid

  """column name"""
  schema_id

  """column name"""
  state

  """column name"""
  state_changed_at

  """column name"""
  traits

  """column name"""
  updated_at
}

"""
columns and relationships of "identity_verifiable_addresses"
"""
type identity_verifiable_addresses {
  created_at: timestamp!
  id: uuid!

  """An object relationship"""
  identity: identities!
  identity_id: uuid!
  nid: uuid
  status: String!
  updated_at: timestamp!
  value: String!
  verified: Boolean!
  verified_at: timestamp
  via: String!
}

"""
aggregated selection of "identity_verifiable_addresses"
"""
type identity_verifiable_addresses_aggregate {
  aggregate: identity_verifiable_addresses_aggregate_fields
  nodes: [identity_verifiable_addresses!]!
}

"""
aggregate fields of "identity_verifiable_addresses"
"""
type identity_verifiable_addresses_aggregate_fields {
  count(columns: [identity_verifiable_addresses_select_column!], distinct: Boolean): Int!
  max: identity_verifiable_addresses_max_fields
  min: identity_verifiable_addresses_min_fields
}

"""
order by aggregate values of table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_aggregate_order_by {
  count: order_by
  max: identity_verifiable_addresses_max_order_by
  min: identity_verifiable_addresses_min_order_by
}

"""
input type for inserting array relation for remote table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_arr_rel_insert_input {
  data: [identity_verifiable_addresses_insert_input!]!

  """upsert condition"""
  on_conflict: identity_verifiable_addresses_on_conflict
}

"""
Boolean expression to filter rows from the table "identity_verifiable_addresses". All fields are combined with a logical 'AND'.
"""
input identity_verifiable_addresses_bool_exp {
  _and: [identity_verifiable_addresses_bool_exp!]
  _not: identity_verifiable_addresses_bool_exp
  _or: [identity_verifiable_addresses_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  identity: identities_bool_exp
  identity_id: uuid_comparison_exp
  nid: uuid_comparison_exp
  status: String_comparison_exp
  updated_at: timestamp_comparison_exp
  value: String_comparison_exp
  verified: Boolean_comparison_exp
  verified_at: timestamp_comparison_exp
  via: String_comparison_exp
}

"""
unique or primary key constraints on table "identity_verifiable_addresses"
"""
enum identity_verifiable_addresses_constraint {
  """unique or primary key constraint"""
  identity_verifiable_addresses_pkey

  """unique or primary key constraint"""
  identity_verifiable_addresses_status_via_uq_idx
}

"""
input type for inserting data into table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_insert_input {
  created_at: timestamp
  id: uuid
  identity: identities_obj_rel_insert_input
  identity_id: uuid
  nid: uuid
  status: String
  updated_at: timestamp
  value: String
  verified: Boolean
  verified_at: timestamp
  via: String
}

"""aggregate max on columns"""
type identity_verifiable_addresses_max_fields {
  created_at: timestamp
  id: uuid
  identity_id: uuid
  nid: uuid
  status: String
  updated_at: timestamp
  value: String
  verified_at: timestamp
  via: String
}

"""
order by max() on columns of table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_max_order_by {
  created_at: order_by
  id: order_by
  identity_id: order_by
  nid: order_by
  status: order_by
  updated_at: order_by
  value: order_by
  verified_at: order_by
  via: order_by
}

"""aggregate min on columns"""
type identity_verifiable_addresses_min_fields {
  created_at: timestamp
  id: uuid
  identity_id: uuid
  nid: uuid
  status: String
  updated_at: timestamp
  value: String
  verified_at: timestamp
  via: String
}

"""
order by min() on columns of table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_min_order_by {
  created_at: order_by
  id: order_by
  identity_id: order_by
  nid: order_by
  status: order_by
  updated_at: order_by
  value: order_by
  verified_at: order_by
  via: order_by
}

"""
response of any mutation on the table "identity_verifiable_addresses"
"""
type identity_verifiable_addresses_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identity_verifiable_addresses!]!
}

"""
on_conflict condition type for table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_on_conflict {
  constraint: identity_verifiable_addresses_constraint!
  update_columns: [identity_verifiable_addresses_update_column!]! = []
  where: identity_verifiable_addresses_bool_exp
}

"""
Ordering options when selecting data from "identity_verifiable_addresses".
"""
input identity_verifiable_addresses_order_by {
  created_at: order_by
  id: order_by
  identity: identities_order_by
  identity_id: order_by
  nid: order_by
  status: order_by
  updated_at: order_by
  value: order_by
  verified: order_by
  verified_at: order_by
  via: order_by
}

"""primary key columns input for table: identity_verifiable_addresses"""
input identity_verifiable_addresses_pk_columns_input {
  id: uuid!
}

"""
select columns of table "identity_verifiable_addresses"
"""
enum identity_verifiable_addresses_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  identity_id

  """column name"""
  nid

  """column name"""
  status

  """column name"""
  updated_at

  """column name"""
  value

  """column name"""
  verified

  """column name"""
  verified_at

  """column name"""
  via
}

"""
input type for updating data in table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_set_input {
  created_at: timestamp
  id: uuid
  identity_id: uuid
  nid: uuid
  status: String
  updated_at: timestamp
  value: String
  verified: Boolean
  verified_at: timestamp
  via: String
}

"""
update columns of table "identity_verifiable_addresses"
"""
enum identity_verifiable_addresses_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  identity_id

  """column name"""
  nid

  """column name"""
  status

  """column name"""
  updated_at

  """column name"""
  value

  """column name"""
  verified

  """column name"""
  verified_at

  """column name"""
  via
}

"""
columns and relationships of "instances"
"""
type instances {
  agent_access_token: uuid

  """An object relationship"""
  build: builds
  created_at: timestamp!
  instance_id: uuid!
  last_heartbeat: timestamp!
}

"""
aggregated selection of "instances"
"""
type instances_aggregate {
  aggregate: instances_aggregate_fields
  nodes: [instances!]!
}

"""
aggregate fields of "instances"
"""
type instances_aggregate_fields {
  count(columns: [instances_select_column!], distinct: Boolean): Int!
  max: instances_max_fields
  min: instances_min_fields
}

"""
Boolean expression to filter rows from the table "instances". All fields are combined with a logical 'AND'.
"""
input instances_bool_exp {
  _and: [instances_bool_exp!]
  _not: instances_bool_exp
  _or: [instances_bool_exp!]
  agent_access_token: uuid_comparison_exp
  build: builds_bool_exp
  created_at: timestamp_comparison_exp
  instance_id: uuid_comparison_exp
  last_heartbeat: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "instances"
"""
enum instances_constraint {
  """unique or primary key constraint"""
  instances_pkey
}

"""
input type for inserting data into table "instances"
"""
input instances_insert_input {
  agent_access_token: uuid
  build: builds_obj_rel_insert_input
  created_at: timestamp
  instance_id: uuid
  last_heartbeat: timestamp
}

"""aggregate max on columns"""
type instances_max_fields {
  agent_access_token: uuid
  created_at: timestamp
  instance_id: uuid
  last_heartbeat: timestamp
}

"""aggregate min on columns"""
type instances_min_fields {
  agent_access_token: uuid
  created_at: timestamp
  instance_id: uuid
  last_heartbeat: timestamp
}

"""
response of any mutation on the table "instances"
"""
type instances_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [instances!]!
}

"""
on_conflict condition type for table "instances"
"""
input instances_on_conflict {
  constraint: instances_constraint!
  update_columns: [instances_update_column!]! = []
  where: instances_bool_exp
}

"""Ordering options when selecting data from "instances"."""
input instances_order_by {
  agent_access_token: order_by
  build: builds_order_by
  created_at: order_by
  instance_id: order_by
  last_heartbeat: order_by
}

"""primary key columns input for table: instances"""
input instances_pk_columns_input {
  instance_id: uuid!
}

"""
select columns of table "instances"
"""
enum instances_select_column {
  """column name"""
  agent_access_token

  """column name"""
  created_at

  """column name"""
  instance_id

  """column name"""
  last_heartbeat
}

"""
input type for updating data in table "instances"
"""
input instances_set_input {
  agent_access_token: uuid
  created_at: timestamp
  instance_id: uuid
  last_heartbeat: timestamp
}

"""
update columns of table "instances"
"""
enum instances_update_column {
  """column name"""
  agent_access_token

  """column name"""
  created_at

  """column name"""
  instance_id

  """column name"""
  last_heartbeat
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "manifests"
"""
type manifests {
  """An object relationship"""
  build: builds
  build_id: uuid
  created_at: timestamp!
  filename: String!
  id: uuid!
  message: String

  """An object relationship"""
  project: projects!
  project_id: uuid!
  s3_key: String!
  s3_url: String!
  status: String
}

"""
aggregated selection of "manifests"
"""
type manifests_aggregate {
  aggregate: manifests_aggregate_fields
  nodes: [manifests!]!
}

"""
aggregate fields of "manifests"
"""
type manifests_aggregate_fields {
  count(columns: [manifests_select_column!], distinct: Boolean): Int!
  max: manifests_max_fields
  min: manifests_min_fields
}

"""
order by aggregate values of table "manifests"
"""
input manifests_aggregate_order_by {
  count: order_by
  max: manifests_max_order_by
  min: manifests_min_order_by
}

"""
input type for inserting array relation for remote table "manifests"
"""
input manifests_arr_rel_insert_input {
  data: [manifests_insert_input!]!

  """upsert condition"""
  on_conflict: manifests_on_conflict
}

"""
Boolean expression to filter rows from the table "manifests". All fields are combined with a logical 'AND'.
"""
input manifests_bool_exp {
  _and: [manifests_bool_exp!]
  _not: manifests_bool_exp
  _or: [manifests_bool_exp!]
  build: builds_bool_exp
  build_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  filename: String_comparison_exp
  id: uuid_comparison_exp
  message: String_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  s3_key: String_comparison_exp
  s3_url: String_comparison_exp
  status: String_comparison_exp
}

"""
unique or primary key constraints on table "manifests"
"""
enum manifests_constraint {
  """unique or primary key constraint"""
  manifests_pkey

  """unique or primary key constraint"""
  manifests_s3_url_key
}

"""
input type for inserting data into table "manifests"
"""
input manifests_insert_input {
  build: builds_obj_rel_insert_input
  build_id: uuid
  created_at: timestamp
  filename: String
  id: uuid
  message: String
  project: projects_obj_rel_insert_input
  project_id: uuid
  s3_key: String
  s3_url: String
  status: String
}

"""aggregate max on columns"""
type manifests_max_fields {
  build_id: uuid
  created_at: timestamp
  filename: String
  id: uuid
  message: String
  project_id: uuid
  s3_key: String
  s3_url: String
  status: String
}

"""
order by max() on columns of table "manifests"
"""
input manifests_max_order_by {
  build_id: order_by
  created_at: order_by
  filename: order_by
  id: order_by
  message: order_by
  project_id: order_by
  s3_key: order_by
  s3_url: order_by
  status: order_by
}

"""aggregate min on columns"""
type manifests_min_fields {
  build_id: uuid
  created_at: timestamp
  filename: String
  id: uuid
  message: String
  project_id: uuid
  s3_key: String
  s3_url: String
  status: String
}

"""
order by min() on columns of table "manifests"
"""
input manifests_min_order_by {
  build_id: order_by
  created_at: order_by
  filename: order_by
  id: order_by
  message: order_by
  project_id: order_by
  s3_key: order_by
  s3_url: order_by
  status: order_by
}

"""
response of any mutation on the table "manifests"
"""
type manifests_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [manifests!]!
}

"""
on_conflict condition type for table "manifests"
"""
input manifests_on_conflict {
  constraint: manifests_constraint!
  update_columns: [manifests_update_column!]! = []
  where: manifests_bool_exp
}

"""Ordering options when selecting data from "manifests"."""
input manifests_order_by {
  build: builds_order_by
  build_id: order_by
  created_at: order_by
  filename: order_by
  id: order_by
  message: order_by
  project: projects_order_by
  project_id: order_by
  s3_key: order_by
  s3_url: order_by
  status: order_by
}

"""primary key columns input for table: manifests"""
input manifests_pk_columns_input {
  id: uuid!
}

"""
select columns of table "manifests"
"""
enum manifests_select_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  filename

  """column name"""
  id

  """column name"""
  message

  """column name"""
  project_id

  """column name"""
  s3_key

  """column name"""
  s3_url

  """column name"""
  status
}

"""
input type for updating data in table "manifests"
"""
input manifests_set_input {
  build_id: uuid
  created_at: timestamp
  filename: String
  id: uuid
  message: String
  project_id: uuid
  s3_key: String
  s3_url: String
  status: String
}

"""
update columns of table "manifests"
"""
enum manifests_update_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  filename

  """column name"""
  id

  """column name"""
  message

  """column name"""
  project_id

  """column name"""
  s3_key

  """column name"""
  s3_url

  """column name"""
  status
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "builds"
  """
  delete_builds(
    """filter the rows which have to be deleted"""
    where: builds_bool_exp!
  ): builds_mutation_response

  """
  delete single row from the table: "builds"
  """
  delete_builds_by_pk(id: uuid!): builds

  """
  delete data from the table: "findings"
  """
  delete_findings(
    """filter the rows which have to be deleted"""
    where: findings_bool_exp!
  ): findings_mutation_response

  """
  delete single row from the table: "findings"
  """
  delete_findings_by_pk(id: uuid!): findings

  """
  delete data from the table: "github_repositories"
  """
  delete_github_repositories(
    """filter the rows which have to be deleted"""
    where: github_repositories_bool_exp!
  ): github_repositories_mutation_response

  """
  delete single row from the table: "github_repositories"
  """
  delete_github_repositories_by_pk(id: uuid!): github_repositories

  """
  delete data from the table: "identities"
  """
  delete_identities(
    """filter the rows which have to be deleted"""
    where: identities_bool_exp!
  ): identities_mutation_response

  """
  delete single row from the table: "identities"
  """
  delete_identities_by_pk(id: uuid!): identities

  """
  delete data from the table: "identity_verifiable_addresses"
  """
  delete_identity_verifiable_addresses(
    """filter the rows which have to be deleted"""
    where: identity_verifiable_addresses_bool_exp!
  ): identity_verifiable_addresses_mutation_response

  """
  delete single row from the table: "identity_verifiable_addresses"
  """
  delete_identity_verifiable_addresses_by_pk(id: uuid!): identity_verifiable_addresses

  """
  delete data from the table: "instances"
  """
  delete_instances(
    """filter the rows which have to be deleted"""
    where: instances_bool_exp!
  ): instances_mutation_response

  """
  delete single row from the table: "instances"
  """
  delete_instances_by_pk(instance_id: uuid!): instances

  """
  delete data from the table: "manifests"
  """
  delete_manifests(
    """filter the rows which have to be deleted"""
    where: manifests_bool_exp!
  ): manifests_mutation_response

  """
  delete single row from the table: "manifests"
  """
  delete_manifests_by_pk(id: uuid!): manifests

  """
  delete data from the table: "organization_user"
  """
  delete_organization_user(
    """filter the rows which have to be deleted"""
    where: organization_user_bool_exp!
  ): organization_user_mutation_response

  """
  delete single row from the table: "organization_user"
  """
  delete_organization_user_by_pk(id: uuid!): organization_user

  """
  delete data from the table: "organizations"
  """
  delete_organizations(
    """filter the rows which have to be deleted"""
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  delete single row from the table: "organizations"
  """
  delete_organizations_by_pk(id: uuid!): organizations

  """
  delete data from the table: "package_versions"
  """
  delete_package_versions(
    """filter the rows which have to be deleted"""
    where: package_versions_bool_exp!
  ): package_versions_mutation_response

  """
  delete single row from the table: "package_versions"
  """
  delete_package_versions_by_pk(id: uuid!): package_versions

  """
  delete data from the table: "project_access_tokens"
  """
  delete_project_access_tokens(
    """filter the rows which have to be deleted"""
    where: project_access_tokens_bool_exp!
  ): project_access_tokens_mutation_response

  """
  delete single row from the table: "project_access_tokens"
  """
  delete_project_access_tokens_by_pk(id: uuid!): project_access_tokens

  """
  delete data from the table: "projects"
  """
  delete_projects(
    """filter the rows which have to be deleted"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  delete single row from the table: "projects"
  """
  delete_projects_by_pk(id: uuid!): projects

  """
  delete data from the table: "related_vulnerabilities"
  """
  delete_related_vulnerabilities(
    """filter the rows which have to be deleted"""
    where: related_vulnerabilities_bool_exp!
  ): related_vulnerabilities_mutation_response

  """
  delete single row from the table: "related_vulnerabilities"
  """
  delete_related_vulnerabilities_by_pk(id: uuid!): related_vulnerabilities

  """
  delete data from the table: "scans"
  """
  delete_scans(
    """filter the rows which have to be deleted"""
    where: scans_bool_exp!
  ): scans_mutation_response

  """
  delete single row from the table: "scans"
  """
  delete_scans_by_pk(id: uuid!): scans

  """
  delete data from the table: "settings"
  """
  delete_settings(
    """filter the rows which have to be deleted"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  delete single row from the table: "settings"
  """
  delete_settings_by_pk(id: uuid!): settings

  """
  delete data from the table: "vulnerabilities"
  """
  delete_vulnerabilities(
    """filter the rows which have to be deleted"""
    where: vulnerabilities_bool_exp!
  ): vulnerabilities_mutation_response

  """
  delete single row from the table: "vulnerabilities"
  """
  delete_vulnerabilities_by_pk(id: uuid!): vulnerabilities

  """
  delete data from the table: "vulnerability_packages"
  """
  delete_vulnerability_packages(
    """filter the rows which have to be deleted"""
    where: vulnerability_packages_bool_exp!
  ): vulnerability_packages_mutation_response

  """
  delete single row from the table: "vulnerability_packages"
  """
  delete_vulnerability_packages_by_pk(id: uuid!): vulnerability_packages

  """
  insert data into the table: "builds"
  """
  insert_builds(
    """the rows to be inserted"""
    objects: [builds_insert_input!]!

    """upsert condition"""
    on_conflict: builds_on_conflict
  ): builds_mutation_response

  """
  insert a single row into the table: "builds"
  """
  insert_builds_one(
    """the row to be inserted"""
    object: builds_insert_input!

    """upsert condition"""
    on_conflict: builds_on_conflict
  ): builds

  """
  insert data into the table: "findings"
  """
  insert_findings(
    """the rows to be inserted"""
    objects: [findings_insert_input!]!

    """upsert condition"""
    on_conflict: findings_on_conflict
  ): findings_mutation_response

  """
  insert a single row into the table: "findings"
  """
  insert_findings_one(
    """the row to be inserted"""
    object: findings_insert_input!

    """upsert condition"""
    on_conflict: findings_on_conflict
  ): findings

  """
  insert data into the table: "github_repositories"
  """
  insert_github_repositories(
    """the rows to be inserted"""
    objects: [github_repositories_insert_input!]!

    """upsert condition"""
    on_conflict: github_repositories_on_conflict
  ): github_repositories_mutation_response

  """
  insert a single row into the table: "github_repositories"
  """
  insert_github_repositories_one(
    """the row to be inserted"""
    object: github_repositories_insert_input!

    """upsert condition"""
    on_conflict: github_repositories_on_conflict
  ): github_repositories

  """
  insert data into the table: "identities"
  """
  insert_identities(
    """the rows to be inserted"""
    objects: [identities_insert_input!]!

    """upsert condition"""
    on_conflict: identities_on_conflict
  ): identities_mutation_response

  """
  insert a single row into the table: "identities"
  """
  insert_identities_one(
    """the row to be inserted"""
    object: identities_insert_input!

    """upsert condition"""
    on_conflict: identities_on_conflict
  ): identities

  """
  insert data into the table: "identity_verifiable_addresses"
  """
  insert_identity_verifiable_addresses(
    """the rows to be inserted"""
    objects: [identity_verifiable_addresses_insert_input!]!

    """upsert condition"""
    on_conflict: identity_verifiable_addresses_on_conflict
  ): identity_verifiable_addresses_mutation_response

  """
  insert a single row into the table: "identity_verifiable_addresses"
  """
  insert_identity_verifiable_addresses_one(
    """the row to be inserted"""
    object: identity_verifiable_addresses_insert_input!

    """upsert condition"""
    on_conflict: identity_verifiable_addresses_on_conflict
  ): identity_verifiable_addresses

  """
  insert data into the table: "instances"
  """
  insert_instances(
    """the rows to be inserted"""
    objects: [instances_insert_input!]!

    """upsert condition"""
    on_conflict: instances_on_conflict
  ): instances_mutation_response

  """
  insert a single row into the table: "instances"
  """
  insert_instances_one(
    """the row to be inserted"""
    object: instances_insert_input!

    """upsert condition"""
    on_conflict: instances_on_conflict
  ): instances

  """
  insert data into the table: "manifests"
  """
  insert_manifests(
    """the rows to be inserted"""
    objects: [manifests_insert_input!]!

    """upsert condition"""
    on_conflict: manifests_on_conflict
  ): manifests_mutation_response

  """
  insert a single row into the table: "manifests"
  """
  insert_manifests_one(
    """the row to be inserted"""
    object: manifests_insert_input!

    """upsert condition"""
    on_conflict: manifests_on_conflict
  ): manifests

  """
  insert data into the table: "organization_user"
  """
  insert_organization_user(
    """the rows to be inserted"""
    objects: [organization_user_insert_input!]!

    """upsert condition"""
    on_conflict: organization_user_on_conflict
  ): organization_user_mutation_response

  """
  insert a single row into the table: "organization_user"
  """
  insert_organization_user_one(
    """the row to be inserted"""
    object: organization_user_insert_input!

    """upsert condition"""
    on_conflict: organization_user_on_conflict
  ): organization_user

  """
  insert data into the table: "organizations"
  """
  insert_organizations(
    """the rows to be inserted"""
    objects: [organizations_insert_input!]!

    """upsert condition"""
    on_conflict: organizations_on_conflict
  ): organizations_mutation_response

  """
  insert a single row into the table: "organizations"
  """
  insert_organizations_one(
    """the row to be inserted"""
    object: organizations_insert_input!

    """upsert condition"""
    on_conflict: organizations_on_conflict
  ): organizations

  """
  insert data into the table: "package_versions"
  """
  insert_package_versions(
    """the rows to be inserted"""
    objects: [package_versions_insert_input!]!

    """upsert condition"""
    on_conflict: package_versions_on_conflict
  ): package_versions_mutation_response

  """
  insert a single row into the table: "package_versions"
  """
  insert_package_versions_one(
    """the row to be inserted"""
    object: package_versions_insert_input!

    """upsert condition"""
    on_conflict: package_versions_on_conflict
  ): package_versions

  """
  insert data into the table: "project_access_tokens"
  """
  insert_project_access_tokens(
    """the rows to be inserted"""
    objects: [project_access_tokens_insert_input!]!

    """upsert condition"""
    on_conflict: project_access_tokens_on_conflict
  ): project_access_tokens_mutation_response

  """
  insert a single row into the table: "project_access_tokens"
  """
  insert_project_access_tokens_one(
    """the row to be inserted"""
    object: project_access_tokens_insert_input!

    """upsert condition"""
    on_conflict: project_access_tokens_on_conflict
  ): project_access_tokens

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """upsert condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """upsert condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  insert data into the table: "related_vulnerabilities"
  """
  insert_related_vulnerabilities(
    """the rows to be inserted"""
    objects: [related_vulnerabilities_insert_input!]!

    """upsert condition"""
    on_conflict: related_vulnerabilities_on_conflict
  ): related_vulnerabilities_mutation_response

  """
  insert a single row into the table: "related_vulnerabilities"
  """
  insert_related_vulnerabilities_one(
    """the row to be inserted"""
    object: related_vulnerabilities_insert_input!

    """upsert condition"""
    on_conflict: related_vulnerabilities_on_conflict
  ): related_vulnerabilities

  """
  insert data into the table: "scans"
  """
  insert_scans(
    """the rows to be inserted"""
    objects: [scans_insert_input!]!

    """upsert condition"""
    on_conflict: scans_on_conflict
  ): scans_mutation_response

  """
  insert a single row into the table: "scans"
  """
  insert_scans_one(
    """the row to be inserted"""
    object: scans_insert_input!

    """upsert condition"""
    on_conflict: scans_on_conflict
  ): scans

  """
  insert data into the table: "settings"
  """
  insert_settings(
    """the rows to be inserted"""
    objects: [settings_insert_input!]!

    """upsert condition"""
    on_conflict: settings_on_conflict
  ):