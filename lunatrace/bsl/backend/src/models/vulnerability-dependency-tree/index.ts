/*
 * Copyright by LunaSec (owned by Refinery Labs, Inc)
 *
 * Licensed under the Business Source License v1.1
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 * https://github.com/lunasec-io/lunasec/blob/master/licenses/BSL-LunaTrace.txt
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import { randomUUID } from 'crypto';
import util from 'util';

import { SeverityNamesOsv } from '@lunatrace/lunatrace-common/build/main';

import { Analysis_Finding_Type_Enum } from '../../hasura-api/generated';
import { notEmpty } from '../../utils/predicates';

import { Graph } from './graph';
import {
  DependencyChain,
  IgnoredVulnerability,
  Manifest,
  ManifestNode,
  TriagedPackageVulnerability,
  VulnerableEdge,
  VulnerableRelease,
} from './types';
import {
  createOrMergeVulnerablePackageRelease,
  isReleaseTriviallyUpdateable,
  VulnerabilityLoader,
} from './vulnerabilities';

const rootNode = '00000000-0000-0000-0000-000000000000';
const nilEdge = '00000000-0000-0000-0000-000000000000';

export default class VulnerabilityDependencyTree {
  public readonly graph: Graph;
  private packageReleaseIdToTriagedVulnerabilities: Map<string, TriagedPackageVulnerability[]> = new Map();
  private nodeIdToNode: Map<string, ManifestNode> = new Map();
  private vulnerableNodes: Set<string> = new Set();
  private nodeReachability: Map<string, Analysis_Finding_Type_Enum> = new Map();

  constructor(
    sourceManifests: Array<Manifest>,
    ignoredVulnerabilities?: IgnoredVulnerability[],
    minimumSeverity?: SeverityNamesOsv
  ) {
    this.graph = new Graph();

    const vulnLoader = new VulnerabilityLoader(ignoredVulnerabilities || [], minimumSeverity || 'Unknown');

    sourceManifests.forEach((manifest) => {
      manifest.child_edges_recursive?.forEach((edge) => {
        const child = edge.child;
        const childId = edge.child_id;
        const parentId = edge.parent_id;

        this.nodeIdToNode.set(childId, child);

        const packageReleaseVulnerabilities = vulnLoader.loadPackageReleaseVulnerabilities(
          child,
          manifest.path || 'Unknown'
        );

        // get existing vulnerabilities for a release, and extend them to include the newly built release vulnerabilities
        const existingReleaseVulnerabilities = this.packageReleaseIdToTriagedVulnerabilities.get(child.release_id);
        this.packageReleaseIdToTriagedVulnerabilities.set(
          child.release_id,
          existingReleaseVulnerabilities
            ? existingReleaseVulnerabilities.concat(packageReleaseVulnerabilities)
            : packageReleaseVulnerabilities
        );

        if (packageReleaseVulnerabilities.length > 0) {
          this.vulnerableNodes.add(childId);
        }

        /*
         find analysis results proving that a path is "not vulnerable" or "not reachable". in other words, we say a node is
         _not_ reachable _only_ when we have explicit analysis results that say that it is not reachable.
         */
        const reachable =
          edge.analysis_results.length > 0 ? edge.analysis_results[0].finding_type : Analysis_Finding_Type_Enum.Unknown;
        this.nodeReachability.set(childId, reachable);

        // TODO (cthompson) the recursive query should return a non-nil edge
        const edgeId = edge.id === nilEdge ? randomUUID() : edge.id;
        //
        // if (childId === 'd0497744-f55c-0e6c-0c6a-313b74571fbc') {
        //   console.log('SETTING HTML WEBPACK PLUGIN EDGE');
        // }
        if (edge.child.release.id === '744ff210-3f78-4c3f-910b-b34d397d70fb') {
          // console.log('SETTING TERSER EDGE TO PARENT ID ', parentId);
          // console.log('edge info is ', util.inspect(edge, { depth: Infinity }));
          // const parentInfo = manifest.child_edges_recursive?.filter((edge) => edge.child.id === parentId);
          // console.log('parent info is ', util.inspect(parentInfo, { depth: Infinity }));
          //
          console.log('node id is ', edge.child.id);
        }
        this.graph.insertEdge(edgeId, parentId, childId);
      });
    });
  }

  private allDependencyPathsToNodeId(nodeId: string): string[][] {
    const chainsToTraverse: string[][] = [];

    this.graph.getParentEdges(nodeId).forEach((parent) => chainsToTraverse.push([parent, nodeId]));

    const dependencyChains = [];
    while (chainsToTraverse.length > 0) {
      const chain = chainsToTraverse.pop();
      if (!chain) {
        continue;
      }

      if (chain[0] === rootNode) {
        dependencyChains.push([rootNode, ...chain]);
        continue;
      }
      const parentNodes = this.graph.getParentEdges(chain[0]);
      parentNodes.forEach((parentNode) => chainsToTraverse.push([parentNode, ...chain]));
    }
    return dependencyChains;
  }

  public getEdgesWhereChildIsVulnerable(): VulnerableEdge[] {
    const vulnerableEdges: VulnerableEdge[] = [];

    this.vulnerableNodes.forEach((childId) => {
      const node = this.nodeIdToNode.get(childId);
      if (!node) {
        return;
      }
      const vulnerabilityIds = node.release.package.affected_by_vulnerability.map((v) => v.vulnerability.id);
      const edgesWithVulnerabilities: VulnerableEdge[] = [];
      this.graph.getNodeEdgeIds(childId).forEach((edgeId) => {
        if (edgeId === nilEdge) {
          return;
        }
        return {
          edgeId,
          vulnerabilityIds,
        };
      });

      vulnerableEdges.concat(edgesWithVulnerabilities);
    });
    return vulnerableEdges;
  }

  public getVulnerableReleases(): VulnerableRelease[] {
    const vulnerableReleasesById: Map<string, VulnerableRelease> = new Map();

    this.vulnerableNodes.forEach((nodeId) => {
      const node = this.nodeIdToNode.get(nodeId);
      if (!node) {
        return;
      }

      const packageReleaseVulnerabilities = this.packageReleaseIdToTriagedVulnerabilities.get(node.release_id);
      if (!packageReleaseVulnerabilities) {
        return;
      }

      const vulnerableChains = this.allDependencyPathsToNodeId(nodeId);

      // TODO (cthompson) we should be able to respond with just the node ids for the chain
      // all nodes should be sent back as an array
      const vulnerableNodeChains: DependencyChain[] = vulnerableChains.map((chain) => {
        return chain
          .map((nodeId) => {
            const node = this.nodeIdToNode.get(nodeId);
            const reachable = this.nodeReachability.get(nodeId);
            if (!node) {
              return null;
            }
            return {
              ...node,
              reachable: reachable || Analysis_Finding_Type_Enum.Unknown,
            };
          })
          .filter(notEmpty);
      });

      const devOnly = vulnerableChains.every((chain) => {
        const node = this.nodeIdToNode.get(chain[0]);
        if (!node) {
          return false;
        }
        return node.labels && node.labels.scope === 'dev';
      });

      const triviallyUpdatable = isReleaseTriviallyUpdateable(packageReleaseVulnerabilities);

      const existingRelease = vulnerableReleasesById.get(node.release_id);
      packageReleaseVulnerabilities.forEach((releaseVulnerability) => {
        const updatedRelease = createOrMergeVulnerablePackageRelease(
          existingRelease,
          node.release,
          releaseVulnerability,
          vulnerableNodeChains,
          devOnly,
          triviallyUpdatable
        );
        vulnerableReleasesById.set(node.release_id, updatedRelease);
      });
    });
    return Array.from(vulnerableReleasesById.values());
  }
}
