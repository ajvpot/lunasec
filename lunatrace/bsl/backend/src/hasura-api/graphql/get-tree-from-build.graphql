fragment ManifestDependencyEdge on manifest_dependency_edge {
    id
    parent_id
    child_id
    analysis_results(where: $analysis_results_where, order_by: {finding_source_version: desc}) {
        id
        finding_source_version
        finding_source
        finding_type
#   todo: limit this count before it gets to the frontend
        locations {
            id
            path
            start_row
            start_column
            end_row
            end_column
        }
    }
}

# TODO: Why do we have this where clause here, it doesnt seem like we use it
query GetTreeFromBuild($build_id: uuid!, $analysis_results_where: analysis_manifest_dependency_edge_result_bool_exp = {}) {
    builds_by_pk(id: $build_id) {
        resolved_manifests {
            id
            path
            manifest_dependency_node {
                id
            }
            child_edges_recursive {
                ...ManifestDependencyEdge
            }
        }
        project {
            name
            ignored_vulnerabilities {
                id
                creator_id
                locations
                note
                project_id
                vulnerability_id
            }
            project_folder_settings (order_by: {precedence: asc_nulls_last}) {
                precedence
                ignore
                path_glob
                root
                folder_environmental_adjustments {
                    cvss_environmental_adjustment {
                        attack_complexity
                        attack_vector
                        availability_impact
                        availability_requirement
                        confidentiality_impact
                        confidentiality_requirement
                        group_name
                        name
                        integrity_impact
                        integrity_requirement
                        privileges_required
                        user_interaction
                        scope
                    }
                }
            }
        }
    }
}
