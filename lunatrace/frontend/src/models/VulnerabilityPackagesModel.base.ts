/* This is a mst-gql generated file, don't modify it manually */
/* eslint-disable */
/* tslint:disable */

import { types } from "mobx-state-tree"
import { QueryBuilder } from "mst-gql"
import { ModelBase } from "./ModelBase"
import { FindingsAggregateModel, FindingsAggregateModelType } from "./FindingsAggregateModel"
import { FindingsAggregateModelSelector } from "./FindingsAggregateModel.base"
import { FindingsModel, FindingsModelType } from "./FindingsModel"
import { FindingsModelSelector } from "./FindingsModel.base"
import { VulnerabilitiesModel, VulnerabilitiesModelType } from "./VulnerabilitiesModel"
import { VulnerabilitiesModelSelector } from "./VulnerabilitiesModel.base"
import { RootStoreType } from "./index"


/**
 * VulnerabilityPackagesBase
 * auto generated base class for the model VulnerabilityPackagesModel.
 *
 * All of the package vulnerabilities belonging to a given vulnerability   columns and relationships of "vulnerability_packages"
 */
export const VulnerabilityPackagesModelBase = ModelBase
  .named('VulnerabilityPackages')
  .props({
    __typename: types.optional(types.literal("vulnerability_packages"), "vulnerability_packages"),
    advisories: types.union(types.undefined, types.string),
    /** An array relationship */
    findings: types.union(types.undefined, types.array(types.late((): any => FindingsModel))),
    /** An aggregate relationship */
    findings_aggregate: types.union(types.undefined, types.late((): any => FindingsAggregateModel)),
    id: types.union(types.undefined, types.frozen()),
    name: types.union(types.undefined, types.null, types.string),
    slug: types.union(types.undefined, types.string),
    vuln_slug: types.union(types.undefined, types.string),
    /** An object relationship */
    vulnerability: types.union(types.undefined, types.late((): any => VulnerabilitiesModel)),
  })
  .views(self => ({
    get store() {
      return self.__getStore<RootStoreType>()
    }
  }))

export class VulnerabilityPackagesModelSelector extends QueryBuilder {
  get advisories() { return this.__attr(`advisories`) }
  get id() { return this.__attr(`id`) }
  get name() { return this.__attr(`name`) }
  get slug() { return this.__attr(`slug`) }
  get vuln_slug() { return this.__attr(`vuln_slug`) }
  findings(builder?: string | FindingsModelSelector | ((selector: FindingsModelSelector) => FindingsModelSelector)) { return this.__child(`findings`, FindingsModelSelector, builder) }
  findings_aggregate(builder?: string | FindingsAggregateModelSelector | ((selector: FindingsAggregateModelSelector) => FindingsAggregateModelSelector)) { return this.__child(`findings_aggregate`, FindingsAggregateModelSelector, builder) }
  vulnerability(builder?: string | VulnerabilitiesModelSelector | ((selector: VulnerabilitiesModelSelector) => VulnerabilitiesModelSelector)) { return this.__child(`vulnerability`, VulnerabilitiesModelSelector, builder) }
}
export function selectFromVulnerabilityPackages() {
  return new VulnerabilityPackagesModelSelector()
}

export const vulnerabilityPackagesModelPrimitives = selectFromVulnerabilityPackages().advisories.name.slug.vuln_slug
