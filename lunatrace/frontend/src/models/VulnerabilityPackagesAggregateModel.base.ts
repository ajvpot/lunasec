/* This is a mst-gql generated file, don't modify it manually */
/* eslint-disable */
/* tslint:disable */

import { types } from "mobx-state-tree"
import { QueryBuilder } from "mst-gql"
import { ModelBase } from "./ModelBase"
import { VulnerabilityPackagesAggregateFieldsModel, VulnerabilityPackagesAggregateFieldsModelType } from "./VulnerabilityPackagesAggregateFieldsModel"
import { VulnerabilityPackagesAggregateFieldsModelSelector } from "./VulnerabilityPackagesAggregateFieldsModel.base"
import { VulnerabilityPackagesModel, VulnerabilityPackagesModelType } from "./VulnerabilityPackagesModel"
import { VulnerabilityPackagesModelSelector } from "./VulnerabilityPackagesModel.base"
import { RootStoreType } from "./index"


/**
 * VulnerabilityPackagesAggregateBase
 * auto generated base class for the model VulnerabilityPackagesAggregateModel.
 *
 * aggregated selection of "vulnerability_packages"
 */
export const VulnerabilityPackagesAggregateModelBase = ModelBase
  .named('VulnerabilityPackagesAggregate')
  .props({
    __typename: types.optional(types.literal("vulnerability_packages_aggregate"), "vulnerability_packages_aggregate"),
    aggregate: types.union(types.undefined, types.null, types.late((): any => VulnerabilityPackagesAggregateFieldsModel)),
    nodes: types.union(types.undefined, types.array(types.late((): any => VulnerabilityPackagesModel))),
  })
  .views(self => ({
    get store() {
      return self.__getStore<RootStoreType>()
    }
  }))

export class VulnerabilityPackagesAggregateModelSelector extends QueryBuilder {
  aggregate(builder?: string | VulnerabilityPackagesAggregateFieldsModelSelector | ((selector: VulnerabilityPackagesAggregateFieldsModelSelector) => VulnerabilityPackagesAggregateFieldsModelSelector)) { return this.__child(`aggregate`, VulnerabilityPackagesAggregateFieldsModelSelector, builder) }
  nodes(builder?: string | VulnerabilityPackagesModelSelector | ((selector: VulnerabilityPackagesModelSelector) => VulnerabilityPackagesModelSelector)) { return this.__child(`nodes`, VulnerabilityPackagesModelSelector, builder) }
}
export function selectFromVulnerabilityPackagesAggregate() {
  return new VulnerabilityPackagesAggregateModelSelector()
}

export const vulnerabilityPackagesAggregateModelPrimitives = selectFromVulnerabilityPackagesAggregate()
