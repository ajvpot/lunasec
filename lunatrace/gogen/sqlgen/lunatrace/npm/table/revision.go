// Copyright 2022 by LunaSec (owned by Refinery Labs, Inc)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Revision = newRevisionTable("npm", "revision", "")

type revisionTable struct {
	postgres.Table

	//Columns
	Rev     postgres.ColumnString
	ID      postgres.ColumnString
	Doc     postgres.ColumnString
	Deleted postgres.ColumnBool
	Seq     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RevisionTable struct {
	revisionTable

	EXCLUDED revisionTable
}

// AS creates new RevisionTable with assigned alias
func (a RevisionTable) AS(alias string) *RevisionTable {
	return newRevisionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RevisionTable with assigned schema name
func (a RevisionTable) FromSchema(schemaName string) *RevisionTable {
	return newRevisionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RevisionTable with assigned table prefix
func (a RevisionTable) WithPrefix(prefix string) *RevisionTable {
	return newRevisionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RevisionTable with assigned table suffix
func (a RevisionTable) WithSuffix(suffix string) *RevisionTable {
	return newRevisionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRevisionTable(schemaName, tableName, alias string) *RevisionTable {
	return &RevisionTable{
		revisionTable: newRevisionTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newRevisionTableImpl("", "excluded", ""),
	}
}

func newRevisionTableImpl(schemaName, tableName, alias string) revisionTable {
	var (
		RevColumn      = postgres.StringColumn("rev")
		IDColumn       = postgres.StringColumn("id")
		DocColumn      = postgres.StringColumn("doc")
		DeletedColumn  = postgres.BoolColumn("deleted")
		SeqColumn      = postgres.IntegerColumn("seq")
		allColumns     = postgres.ColumnList{RevColumn, IDColumn, DocColumn, DeletedColumn, SeqColumn}
		mutableColumns = postgres.ColumnList{RevColumn, IDColumn, DocColumn, DeletedColumn}
	)

	return revisionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Rev:     RevColumn,
		ID:      IDColumn,
		Doc:     DocColumn,
		Deleted: DeletedColumn,
		Seq:     SeqColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
