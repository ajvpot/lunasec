//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AffectedAnalysisConfig = newAffectedAnalysisConfigTable("vulnerability", "affected_analysis_config", "")

type affectedAnalysisConfigTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnString
	Config     postgres.ColumnString
	AffectedID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AffectedAnalysisConfigTable struct {
	affectedAnalysisConfigTable

	EXCLUDED affectedAnalysisConfigTable
}

// AS creates new AffectedAnalysisConfigTable with assigned alias
func (a AffectedAnalysisConfigTable) AS(alias string) *AffectedAnalysisConfigTable {
	return newAffectedAnalysisConfigTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AffectedAnalysisConfigTable with assigned schema name
func (a AffectedAnalysisConfigTable) FromSchema(schemaName string) *AffectedAnalysisConfigTable {
	return newAffectedAnalysisConfigTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AffectedAnalysisConfigTable with assigned table prefix
func (a AffectedAnalysisConfigTable) WithPrefix(prefix string) *AffectedAnalysisConfigTable {
	return newAffectedAnalysisConfigTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AffectedAnalysisConfigTable with assigned table suffix
func (a AffectedAnalysisConfigTable) WithSuffix(suffix string) *AffectedAnalysisConfigTable {
	return newAffectedAnalysisConfigTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAffectedAnalysisConfigTable(schemaName, tableName, alias string) *AffectedAnalysisConfigTable {
	return &AffectedAnalysisConfigTable{
		affectedAnalysisConfigTable: newAffectedAnalysisConfigTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newAffectedAnalysisConfigTableImpl("", "excluded", ""),
	}
}

func newAffectedAnalysisConfigTableImpl(schemaName, tableName, alias string) affectedAnalysisConfigTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		ConfigColumn     = postgres.StringColumn("config")
		AffectedIDColumn = postgres.StringColumn("affected_id")
		allColumns       = postgres.ColumnList{IDColumn, ConfigColumn, AffectedIDColumn}
		mutableColumns   = postgres.ColumnList{ConfigColumn, AffectedIDColumn}
	)

	return affectedAnalysisConfigTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Config:     ConfigColumn,
		AffectedID: AffectedIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
