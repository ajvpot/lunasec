//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Cwe = newCweTable("vulnerability", "cwe", "")

type cweTable struct {
	postgres.Table

	//Columns
	ID                  postgres.ColumnInteger
	Name                postgres.ColumnString
	Description         postgres.ColumnString
	ExtendedDescription postgres.ColumnString
	CommonName          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CweTable struct {
	cweTable

	EXCLUDED cweTable
}

// AS creates new CweTable with assigned alias
func (a CweTable) AS(alias string) *CweTable {
	return newCweTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CweTable with assigned schema name
func (a CweTable) FromSchema(schemaName string) *CweTable {
	return newCweTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CweTable with assigned table prefix
func (a CweTable) WithPrefix(prefix string) *CweTable {
	return newCweTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CweTable with assigned table suffix
func (a CweTable) WithSuffix(suffix string) *CweTable {
	return newCweTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCweTable(schemaName, tableName, alias string) *CweTable {
	return &CweTable{
		cweTable: newCweTableImpl(schemaName, tableName, alias),
		EXCLUDED: newCweTableImpl("", "excluded", ""),
	}
}

func newCweTableImpl(schemaName, tableName, alias string) cweTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		NameColumn                = postgres.StringColumn("name")
		DescriptionColumn         = postgres.StringColumn("description")
		ExtendedDescriptionColumn = postgres.StringColumn("extended_description")
		CommonNameColumn          = postgres.StringColumn("common_name")
		allColumns                = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, ExtendedDescriptionColumn, CommonNameColumn}
		mutableColumns            = postgres.ColumnList{NameColumn, DescriptionColumn, ExtendedDescriptionColumn, CommonNameColumn}
	)

	return cweTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		Name:                NameColumn,
		Description:         DescriptionColumn,
		ExtendedDescription: ExtendedDescriptionColumn,
		CommonName:          CommonNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
