//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AffectedVersion = newAffectedVersionTable("vulnerability", "affected_version", "")

type affectedVersionTable struct {
	postgres.Table

	//Columns
	ID               postgres.ColumnString
	AffectedID       postgres.ColumnString
	Version          postgres.ColumnString
	DatabaseSpecific postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AffectedVersionTable struct {
	affectedVersionTable

	EXCLUDED affectedVersionTable
}

// AS creates new AffectedVersionTable with assigned alias
func (a AffectedVersionTable) AS(alias string) *AffectedVersionTable {
	return newAffectedVersionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AffectedVersionTable with assigned schema name
func (a AffectedVersionTable) FromSchema(schemaName string) *AffectedVersionTable {
	return newAffectedVersionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AffectedVersionTable with assigned table prefix
func (a AffectedVersionTable) WithPrefix(prefix string) *AffectedVersionTable {
	return newAffectedVersionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AffectedVersionTable with assigned table suffix
func (a AffectedVersionTable) WithSuffix(suffix string) *AffectedVersionTable {
	return newAffectedVersionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAffectedVersionTable(schemaName, tableName, alias string) *AffectedVersionTable {
	return &AffectedVersionTable{
		affectedVersionTable: newAffectedVersionTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newAffectedVersionTableImpl("", "excluded", ""),
	}
}

func newAffectedVersionTableImpl(schemaName, tableName, alias string) affectedVersionTable {
	var (
		IDColumn               = postgres.StringColumn("id")
		AffectedIDColumn       = postgres.StringColumn("affected_id")
		VersionColumn          = postgres.StringColumn("version")
		DatabaseSpecificColumn = postgres.StringColumn("database_specific")
		allColumns             = postgres.ColumnList{IDColumn, AffectedIDColumn, VersionColumn, DatabaseSpecificColumn}
		mutableColumns         = postgres.ColumnList{AffectedIDColumn, VersionColumn, DatabaseSpecificColumn}
	)

	return affectedVersionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		AffectedID:       AffectedIDColumn,
		Version:          VersionColumn,
		DatabaseSpecific: DatabaseSpecificColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
