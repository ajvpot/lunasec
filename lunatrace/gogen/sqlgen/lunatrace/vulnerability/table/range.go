//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Range = newRangeTable("vulnerability", "range", "")

type rangeTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnString
	Introduced postgres.ColumnString
	Fixed      postgres.ColumnString
	AffectedID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RangeTable struct {
	rangeTable

	EXCLUDED rangeTable
}

// AS creates new RangeTable with assigned alias
func (a RangeTable) AS(alias string) *RangeTable {
	return newRangeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RangeTable with assigned schema name
func (a RangeTable) FromSchema(schemaName string) *RangeTable {
	return newRangeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RangeTable with assigned table prefix
func (a RangeTable) WithPrefix(prefix string) *RangeTable {
	return newRangeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RangeTable with assigned table suffix
func (a RangeTable) WithSuffix(suffix string) *RangeTable {
	return newRangeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRangeTable(schemaName, tableName, alias string) *RangeTable {
	return &RangeTable{
		rangeTable: newRangeTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newRangeTableImpl("", "excluded", ""),
	}
}

func newRangeTableImpl(schemaName, tableName, alias string) rangeTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		IntroducedColumn = postgres.StringColumn("introduced")
		FixedColumn      = postgres.StringColumn("fixed")
		AffectedIDColumn = postgres.StringColumn("affected_id")
		allColumns       = postgres.ColumnList{IDColumn, IntroducedColumn, FixedColumn, AffectedIDColumn}
		mutableColumns   = postgres.ColumnList{IntroducedColumn, FixedColumn, AffectedIDColumn}
	)

	return rangeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Introduced: IntroducedColumn,
		Fixed:      FixedColumn,
		AffectedID: AffectedIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
