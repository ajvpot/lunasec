//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CodeSnippet = newCodeSnippetTable("vulnerability", "code_snippet", "")

type codeSnippetTable struct {
	postgres.Table

	//Columns
	ID            postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz
	ReferenceID   postgres.ColumnString
	SourceURL     postgres.ColumnString
	Vulnerability postgres.ColumnString
	Code          postgres.ColumnString
	Score         postgres.ColumnInteger
	Summary       postgres.ColumnString
	Type          postgres.ColumnString
	Language      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CodeSnippetTable struct {
	codeSnippetTable

	EXCLUDED codeSnippetTable
}

// AS creates new CodeSnippetTable with assigned alias
func (a CodeSnippetTable) AS(alias string) *CodeSnippetTable {
	return newCodeSnippetTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CodeSnippetTable with assigned schema name
func (a CodeSnippetTable) FromSchema(schemaName string) *CodeSnippetTable {
	return newCodeSnippetTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CodeSnippetTable with assigned table prefix
func (a CodeSnippetTable) WithPrefix(prefix string) *CodeSnippetTable {
	return newCodeSnippetTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CodeSnippetTable with assigned table suffix
func (a CodeSnippetTable) WithSuffix(suffix string) *CodeSnippetTable {
	return newCodeSnippetTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCodeSnippetTable(schemaName, tableName, alias string) *CodeSnippetTable {
	return &CodeSnippetTable{
		codeSnippetTable: newCodeSnippetTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newCodeSnippetTableImpl("", "excluded", ""),
	}
}

func newCodeSnippetTableImpl(schemaName, tableName, alias string) codeSnippetTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		ReferenceIDColumn   = postgres.StringColumn("reference_id")
		SourceURLColumn     = postgres.StringColumn("source_url")
		VulnerabilityColumn = postgres.StringColumn("vulnerability")
		CodeColumn          = postgres.StringColumn("code")
		ScoreColumn         = postgres.IntegerColumn("score")
		SummaryColumn       = postgres.StringColumn("summary")
		TypeColumn          = postgres.StringColumn("type")
		LanguageColumn      = postgres.StringColumn("language")
		allColumns          = postgres.ColumnList{IDColumn, CreatedAtColumn, ReferenceIDColumn, SourceURLColumn, VulnerabilityColumn, CodeColumn, ScoreColumn, SummaryColumn, TypeColumn, LanguageColumn}
		mutableColumns      = postgres.ColumnList{CreatedAtColumn, ReferenceIDColumn, SourceURLColumn, VulnerabilityColumn, CodeColumn, ScoreColumn, SummaryColumn, TypeColumn, LanguageColumn}
	)

	return codeSnippetTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CreatedAt:     CreatedAtColumn,
		ReferenceID:   ReferenceIDColumn,
		SourceURL:     SourceURLColumn,
		Vulnerability: VulnerabilityColumn,
		Code:          CodeColumn,
		Score:         ScoreColumn,
		Summary:       SummaryColumn,
		Type:          TypeColumn,
		Language:      LanguageColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
