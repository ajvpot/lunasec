//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Equivalent = newEquivalentTable("vulnerability", "equivalent", "")

type equivalentTable struct {
	postgres.Table

	//Columns
	A postgres.ColumnString
	B postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EquivalentTable struct {
	equivalentTable

	EXCLUDED equivalentTable
}

// AS creates new EquivalentTable with assigned alias
func (a EquivalentTable) AS(alias string) *EquivalentTable {
	return newEquivalentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EquivalentTable with assigned schema name
func (a EquivalentTable) FromSchema(schemaName string) *EquivalentTable {
	return newEquivalentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EquivalentTable with assigned table prefix
func (a EquivalentTable) WithPrefix(prefix string) *EquivalentTable {
	return newEquivalentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EquivalentTable with assigned table suffix
func (a EquivalentTable) WithSuffix(suffix string) *EquivalentTable {
	return newEquivalentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEquivalentTable(schemaName, tableName, alias string) *EquivalentTable {
	return &EquivalentTable{
		equivalentTable: newEquivalentTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newEquivalentTableImpl("", "excluded", ""),
	}
}

func newEquivalentTableImpl(schemaName, tableName, alias string) equivalentTable {
	var (
		AColumn        = postgres.StringColumn("a")
		BColumn        = postgres.StringColumn("b")
		allColumns     = postgres.ColumnList{AColumn, BColumn}
		mutableColumns = postgres.ColumnList{AColumn, BColumn}
	)

	return equivalentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		A: AColumn,
		B: BColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
