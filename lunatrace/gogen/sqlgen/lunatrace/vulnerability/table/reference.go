//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Reference = newReferenceTable("vulnerability", "reference", "")

type referenceTable struct {
	postgres.Table

	//Columns
	ID              postgres.ColumnString
	VulnerabilityID postgres.ColumnString
	Type            postgres.ColumnString
	URL             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReferenceTable struct {
	referenceTable

	EXCLUDED referenceTable
}

// AS creates new ReferenceTable with assigned alias
func (a ReferenceTable) AS(alias string) *ReferenceTable {
	return newReferenceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReferenceTable with assigned schema name
func (a ReferenceTable) FromSchema(schemaName string) *ReferenceTable {
	return newReferenceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReferenceTable with assigned table prefix
func (a ReferenceTable) WithPrefix(prefix string) *ReferenceTable {
	return newReferenceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReferenceTable with assigned table suffix
func (a ReferenceTable) WithSuffix(suffix string) *ReferenceTable {
	return newReferenceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReferenceTable(schemaName, tableName, alias string) *ReferenceTable {
	return &ReferenceTable{
		referenceTable: newReferenceTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newReferenceTableImpl("", "excluded", ""),
	}
}

func newReferenceTableImpl(schemaName, tableName, alias string) referenceTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		VulnerabilityIDColumn = postgres.StringColumn("vulnerability_id")
		TypeColumn            = postgres.StringColumn("type")
		URLColumn             = postgres.StringColumn("url")
		allColumns            = postgres.ColumnList{IDColumn, VulnerabilityIDColumn, TypeColumn, URLColumn}
		mutableColumns        = postgres.ColumnList{VulnerabilityIDColumn, TypeColumn, URLColumn}
	)

	return referenceTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		VulnerabilityID: VulnerabilityIDColumn,
		Type:            TypeColumn,
		URL:             URLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
