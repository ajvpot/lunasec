//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AffectedRangeEvent = newAffectedRangeEventTable("vulnerability", "affected_range_event", "")

type affectedRangeEventTable struct {
	postgres.Table

	//Columns
	ID               postgres.ColumnString
	AffectedID       postgres.ColumnString
	Type             postgres.ColumnString
	Event            postgres.ColumnString
	Version          postgres.ColumnString
	DatabaseSpecific postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AffectedRangeEventTable struct {
	affectedRangeEventTable

	EXCLUDED affectedRangeEventTable
}

// AS creates new AffectedRangeEventTable with assigned alias
func (a AffectedRangeEventTable) AS(alias string) *AffectedRangeEventTable {
	return newAffectedRangeEventTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AffectedRangeEventTable with assigned schema name
func (a AffectedRangeEventTable) FromSchema(schemaName string) *AffectedRangeEventTable {
	return newAffectedRangeEventTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AffectedRangeEventTable with assigned table prefix
func (a AffectedRangeEventTable) WithPrefix(prefix string) *AffectedRangeEventTable {
	return newAffectedRangeEventTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AffectedRangeEventTable with assigned table suffix
func (a AffectedRangeEventTable) WithSuffix(suffix string) *AffectedRangeEventTable {
	return newAffectedRangeEventTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAffectedRangeEventTable(schemaName, tableName, alias string) *AffectedRangeEventTable {
	return &AffectedRangeEventTable{
		affectedRangeEventTable: newAffectedRangeEventTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newAffectedRangeEventTableImpl("", "excluded", ""),
	}
}

func newAffectedRangeEventTableImpl(schemaName, tableName, alias string) affectedRangeEventTable {
	var (
		IDColumn               = postgres.StringColumn("id")
		AffectedIDColumn       = postgres.StringColumn("affected_id")
		TypeColumn             = postgres.StringColumn("type")
		EventColumn            = postgres.StringColumn("event")
		VersionColumn          = postgres.StringColumn("version")
		DatabaseSpecificColumn = postgres.StringColumn("database_specific")
		allColumns             = postgres.ColumnList{IDColumn, AffectedIDColumn, TypeColumn, EventColumn, VersionColumn, DatabaseSpecificColumn}
		mutableColumns         = postgres.ColumnList{AffectedIDColumn, TypeColumn, EventColumn, VersionColumn, DatabaseSpecificColumn}
	)

	return affectedRangeEventTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		AffectedID:       AffectedIDColumn,
		Type:             TypeColumn,
		Event:            EventColumn,
		Version:          VersionColumn,
		DatabaseSpecific: DatabaseSpecificColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
