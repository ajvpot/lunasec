//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Vulnerability = newVulnerabilityTable("vulnerability", "vulnerability", "")

type vulnerabilityTable struct {
	postgres.Table

	//Columns
	ID               postgres.ColumnString
	Source           postgres.ColumnString
	SourceID         postgres.ColumnString
	Modified         postgres.ColumnTimestampz
	Published        postgres.ColumnTimestampz
	Withdrawn        postgres.ColumnTimestampz
	Summary          postgres.ColumnString
	Details          postgres.ColumnString
	DatabaseSpecific postgres.ColumnString
	UpstreamData     postgres.ColumnString
	CvssScore        postgres.ColumnFloat
	ReviewedBySource postgres.ColumnBool
	SeverityName     postgres.ColumnString
	LastFetched      postgres.ColumnTimestampz
	CreatedAt        postgres.ColumnTimestampz
	EpssScore        postgres.ColumnFloat
	EpssPercentile   postgres.ColumnFloat
	CveID            postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VulnerabilityTable struct {
	vulnerabilityTable

	EXCLUDED vulnerabilityTable
}

// AS creates new VulnerabilityTable with assigned alias
func (a VulnerabilityTable) AS(alias string) *VulnerabilityTable {
	return newVulnerabilityTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VulnerabilityTable with assigned schema name
func (a VulnerabilityTable) FromSchema(schemaName string) *VulnerabilityTable {
	return newVulnerabilityTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VulnerabilityTable with assigned table prefix
func (a VulnerabilityTable) WithPrefix(prefix string) *VulnerabilityTable {
	return newVulnerabilityTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VulnerabilityTable with assigned table suffix
func (a VulnerabilityTable) WithSuffix(suffix string) *VulnerabilityTable {
	return newVulnerabilityTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVulnerabilityTable(schemaName, tableName, alias string) *VulnerabilityTable {
	return &VulnerabilityTable{
		vulnerabilityTable: newVulnerabilityTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newVulnerabilityTableImpl("", "excluded", ""),
	}
}

func newVulnerabilityTableImpl(schemaName, tableName, alias string) vulnerabilityTable {
	var (
		IDColumn               = postgres.StringColumn("id")
		SourceColumn           = postgres.StringColumn("source")
		SourceIDColumn         = postgres.StringColumn("source_id")
		ModifiedColumn         = postgres.TimestampzColumn("modified")
		PublishedColumn        = postgres.TimestampzColumn("published")
		WithdrawnColumn        = postgres.TimestampzColumn("withdrawn")
		SummaryColumn          = postgres.StringColumn("summary")
		DetailsColumn          = postgres.StringColumn("details")
		DatabaseSpecificColumn = postgres.StringColumn("database_specific")
		UpstreamDataColumn     = postgres.StringColumn("upstream_data")
		CvssScoreColumn        = postgres.FloatColumn("cvss_score")
		ReviewedBySourceColumn = postgres.BoolColumn("reviewed_by_source")
		SeverityNameColumn     = postgres.StringColumn("severity_name")
		LastFetchedColumn      = postgres.TimestampzColumn("last_fetched")
		CreatedAtColumn        = postgres.TimestampzColumn("created_at")
		EpssScoreColumn        = postgres.FloatColumn("epss_score")
		EpssPercentileColumn   = postgres.FloatColumn("epss_percentile")
		CveIDColumn            = postgres.StringColumn("cve_id")
		allColumns             = postgres.ColumnList{IDColumn, SourceColumn, SourceIDColumn, ModifiedColumn, PublishedColumn, WithdrawnColumn, SummaryColumn, DetailsColumn, DatabaseSpecificColumn, UpstreamDataColumn, CvssScoreColumn, ReviewedBySourceColumn, SeverityNameColumn, LastFetchedColumn, CreatedAtColumn, EpssScoreColumn, EpssPercentileColumn, CveIDColumn}
		mutableColumns         = postgres.ColumnList{SourceColumn, SourceIDColumn, ModifiedColumn, PublishedColumn, WithdrawnColumn, SummaryColumn, DetailsColumn, DatabaseSpecificColumn, UpstreamDataColumn, CvssScoreColumn, ReviewedBySourceColumn, SeverityNameColumn, LastFetchedColumn, CreatedAtColumn, EpssScoreColumn, EpssPercentileColumn, CveIDColumn}
	)

	return vulnerabilityTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		Source:           SourceColumn,
		SourceID:         SourceIDColumn,
		Modified:         ModifiedColumn,
		Published:        PublishedColumn,
		Withdrawn:        WithdrawnColumn,
		Summary:          SummaryColumn,
		Details:          DetailsColumn,
		DatabaseSpecific: DatabaseSpecificColumn,
		UpstreamData:     UpstreamDataColumn,
		CvssScore:        CvssScoreColumn,
		ReviewedBySource: ReviewedBySourceColumn,
		SeverityName:     SeverityNameColumn,
		LastFetched:      LastFetchedColumn,
		CreatedAt:        CreatedAtColumn,
		EpssScore:        EpssScoreColumn,
		EpssPercentile:   EpssPercentileColumn,
		CveID:            CveIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
