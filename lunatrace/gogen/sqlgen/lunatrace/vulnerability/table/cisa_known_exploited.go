//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CisaKnownExploited = newCisaKnownExploitedTable("vulnerability", "cisa_known_exploited", "")

type cisaKnownExploitedTable struct {
	postgres.Table

	//Columns
	ID                postgres.ColumnString
	Cve               postgres.ColumnString
	VendorProject     postgres.ColumnString
	Product           postgres.ColumnString
	VulnerabilityName postgres.ColumnString
	DateAdded         postgres.ColumnDate
	ShortDescription  postgres.ColumnString
	RequiredAction    postgres.ColumnString
	DueDate           postgres.ColumnDate
	Notes             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CisaKnownExploitedTable struct {
	cisaKnownExploitedTable

	EXCLUDED cisaKnownExploitedTable
}

// AS creates new CisaKnownExploitedTable with assigned alias
func (a CisaKnownExploitedTable) AS(alias string) *CisaKnownExploitedTable {
	return newCisaKnownExploitedTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CisaKnownExploitedTable with assigned schema name
func (a CisaKnownExploitedTable) FromSchema(schemaName string) *CisaKnownExploitedTable {
	return newCisaKnownExploitedTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CisaKnownExploitedTable with assigned table prefix
func (a CisaKnownExploitedTable) WithPrefix(prefix string) *CisaKnownExploitedTable {
	return newCisaKnownExploitedTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CisaKnownExploitedTable with assigned table suffix
func (a CisaKnownExploitedTable) WithSuffix(suffix string) *CisaKnownExploitedTable {
	return newCisaKnownExploitedTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCisaKnownExploitedTable(schemaName, tableName, alias string) *CisaKnownExploitedTable {
	return &CisaKnownExploitedTable{
		cisaKnownExploitedTable: newCisaKnownExploitedTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newCisaKnownExploitedTableImpl("", "excluded", ""),
	}
}

func newCisaKnownExploitedTableImpl(schemaName, tableName, alias string) cisaKnownExploitedTable {
	var (
		IDColumn                = postgres.StringColumn("id")
		CveColumn               = postgres.StringColumn("cve")
		VendorProjectColumn     = postgres.StringColumn("vendor_project")
		ProductColumn           = postgres.StringColumn("product")
		VulnerabilityNameColumn = postgres.StringColumn("vulnerability_name")
		DateAddedColumn         = postgres.DateColumn("date_added")
		ShortDescriptionColumn  = postgres.StringColumn("short_description")
		RequiredActionColumn    = postgres.StringColumn("required_action")
		DueDateColumn           = postgres.DateColumn("due_date")
		NotesColumn             = postgres.StringColumn("notes")
		allColumns              = postgres.ColumnList{IDColumn, CveColumn, VendorProjectColumn, ProductColumn, VulnerabilityNameColumn, DateAddedColumn, ShortDescriptionColumn, RequiredActionColumn, DueDateColumn, NotesColumn}
		mutableColumns          = postgres.ColumnList{CveColumn, VendorProjectColumn, ProductColumn, VulnerabilityNameColumn, DateAddedColumn, ShortDescriptionColumn, RequiredActionColumn, DueDateColumn, NotesColumn}
	)

	return cisaKnownExploitedTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Cve:               CveColumn,
		VendorProject:     VendorProjectColumn,
		Product:           ProductColumn,
		VulnerabilityName: VulnerabilityNameColumn,
		DateAdded:         DateAddedColumn,
		ShortDescription:  ShortDescriptionColumn,
		RequiredAction:    RequiredActionColumn,
		DueDate:           DueDateColumn,
		Notes:             NotesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
