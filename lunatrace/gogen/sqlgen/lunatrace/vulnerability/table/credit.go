//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Credit = newCreditTable("vulnerability", "credit", "")

type creditTable struct {
	postgres.Table

	//Columns
	ID              postgres.ColumnString
	VulnerabilityID postgres.ColumnString
	Name            postgres.ColumnString
	Contact         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CreditTable struct {
	creditTable

	EXCLUDED creditTable
}

// AS creates new CreditTable with assigned alias
func (a CreditTable) AS(alias string) *CreditTable {
	return newCreditTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CreditTable with assigned schema name
func (a CreditTable) FromSchema(schemaName string) *CreditTable {
	return newCreditTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CreditTable with assigned table prefix
func (a CreditTable) WithPrefix(prefix string) *CreditTable {
	return newCreditTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CreditTable with assigned table suffix
func (a CreditTable) WithSuffix(suffix string) *CreditTable {
	return newCreditTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCreditTable(schemaName, tableName, alias string) *CreditTable {
	return &CreditTable{
		creditTable: newCreditTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newCreditTableImpl("", "excluded", ""),
	}
}

func newCreditTableImpl(schemaName, tableName, alias string) creditTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		VulnerabilityIDColumn = postgres.StringColumn("vulnerability_id")
		NameColumn            = postgres.StringColumn("name")
		ContactColumn         = postgres.StringColumn("contact")
		allColumns            = postgres.ColumnList{IDColumn, VulnerabilityIDColumn, NameColumn, ContactColumn}
		mutableColumns        = postgres.ColumnList{VulnerabilityIDColumn, NameColumn, ContactColumn}
	)

	return creditTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		VulnerabilityID: VulnerabilityIDColumn,
		Name:            NameColumn,
		Contact:         ContactColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
