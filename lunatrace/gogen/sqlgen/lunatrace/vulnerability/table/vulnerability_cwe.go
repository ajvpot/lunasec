//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VulnerabilityCwe = newVulnerabilityCweTable("vulnerability", "vulnerability_cwe", "")

type vulnerabilityCweTable struct {
	postgres.Table

	//Columns
	ID              postgres.ColumnString
	VulnerabilityID postgres.ColumnString
	CweID           postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VulnerabilityCweTable struct {
	vulnerabilityCweTable

	EXCLUDED vulnerabilityCweTable
}

// AS creates new VulnerabilityCweTable with assigned alias
func (a VulnerabilityCweTable) AS(alias string) *VulnerabilityCweTable {
	return newVulnerabilityCweTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VulnerabilityCweTable with assigned schema name
func (a VulnerabilityCweTable) FromSchema(schemaName string) *VulnerabilityCweTable {
	return newVulnerabilityCweTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VulnerabilityCweTable with assigned table prefix
func (a VulnerabilityCweTable) WithPrefix(prefix string) *VulnerabilityCweTable {
	return newVulnerabilityCweTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VulnerabilityCweTable with assigned table suffix
func (a VulnerabilityCweTable) WithSuffix(suffix string) *VulnerabilityCweTable {
	return newVulnerabilityCweTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVulnerabilityCweTable(schemaName, tableName, alias string) *VulnerabilityCweTable {
	return &VulnerabilityCweTable{
		vulnerabilityCweTable: newVulnerabilityCweTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newVulnerabilityCweTableImpl("", "excluded", ""),
	}
}

func newVulnerabilityCweTableImpl(schemaName, tableName, alias string) vulnerabilityCweTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		VulnerabilityIDColumn = postgres.StringColumn("vulnerability_id")
		CweIDColumn           = postgres.IntegerColumn("cwe_id")
		allColumns            = postgres.ColumnList{IDColumn, VulnerabilityIDColumn, CweIDColumn}
		mutableColumns        = postgres.ColumnList{VulnerabilityIDColumn, CweIDColumn}
	)

	return vulnerabilityCweTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		VulnerabilityID: VulnerabilityIDColumn,
		CweID:           CweIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
