//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Affected = newAffectedTable("vulnerability", "affected", "")

type affectedTable struct {
	postgres.Table

	//Columns
	ID                postgres.ColumnString
	VulnerabilityID   postgres.ColumnString
	PackageID         postgres.ColumnString
	EcosystemSpecific postgres.ColumnString
	DatabaseSpecific  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AffectedTable struct {
	affectedTable

	EXCLUDED affectedTable
}

// AS creates new AffectedTable with assigned alias
func (a AffectedTable) AS(alias string) *AffectedTable {
	return newAffectedTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AffectedTable with assigned schema name
func (a AffectedTable) FromSchema(schemaName string) *AffectedTable {
	return newAffectedTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AffectedTable with assigned table prefix
func (a AffectedTable) WithPrefix(prefix string) *AffectedTable {
	return newAffectedTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AffectedTable with assigned table suffix
func (a AffectedTable) WithSuffix(suffix string) *AffectedTable {
	return newAffectedTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAffectedTable(schemaName, tableName, alias string) *AffectedTable {
	return &AffectedTable{
		affectedTable: newAffectedTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newAffectedTableImpl("", "excluded", ""),
	}
}

func newAffectedTableImpl(schemaName, tableName, alias string) affectedTable {
	var (
		IDColumn                = postgres.StringColumn("id")
		VulnerabilityIDColumn   = postgres.StringColumn("vulnerability_id")
		PackageIDColumn         = postgres.StringColumn("package_id")
		EcosystemSpecificColumn = postgres.StringColumn("ecosystem_specific")
		DatabaseSpecificColumn  = postgres.StringColumn("database_specific")
		allColumns              = postgres.ColumnList{IDColumn, VulnerabilityIDColumn, PackageIDColumn, EcosystemSpecificColumn, DatabaseSpecificColumn}
		mutableColumns          = postgres.ColumnList{VulnerabilityIDColumn, PackageIDColumn, EcosystemSpecificColumn, DatabaseSpecificColumn}
	)

	return affectedTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		VulnerabilityID:   VulnerabilityIDColumn,
		PackageID:         PackageIDColumn,
		EcosystemSpecific: EcosystemSpecificColumn,
		DatabaseSpecific:  DatabaseSpecificColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
