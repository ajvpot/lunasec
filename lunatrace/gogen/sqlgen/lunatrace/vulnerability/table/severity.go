//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Severity = newSeverityTable("vulnerability", "severity", "")

type severityTable struct {
	postgres.Table

	//Columns
	ID              postgres.ColumnString
	VulnerabilityID postgres.ColumnString
	Source          postgres.ColumnString
	Type            postgres.ColumnString
	Score           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SeverityTable struct {
	severityTable

	EXCLUDED severityTable
}

// AS creates new SeverityTable with assigned alias
func (a SeverityTable) AS(alias string) *SeverityTable {
	return newSeverityTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeverityTable with assigned schema name
func (a SeverityTable) FromSchema(schemaName string) *SeverityTable {
	return newSeverityTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeverityTable with assigned table prefix
func (a SeverityTable) WithPrefix(prefix string) *SeverityTable {
	return newSeverityTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeverityTable with assigned table suffix
func (a SeverityTable) WithSuffix(suffix string) *SeverityTable {
	return newSeverityTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeverityTable(schemaName, tableName, alias string) *SeverityTable {
	return &SeverityTable{
		severityTable: newSeverityTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newSeverityTableImpl("", "excluded", ""),
	}
}

func newSeverityTableImpl(schemaName, tableName, alias string) severityTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		VulnerabilityIDColumn = postgres.StringColumn("vulnerability_id")
		SourceColumn          = postgres.StringColumn("source")
		TypeColumn            = postgres.StringColumn("type")
		ScoreColumn           = postgres.StringColumn("score")
		allColumns            = postgres.ColumnList{IDColumn, VulnerabilityIDColumn, SourceColumn, TypeColumn, ScoreColumn}
		mutableColumns        = postgres.ColumnList{VulnerabilityIDColumn, SourceColumn, TypeColumn, ScoreColumn}
	)

	return severityTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		VulnerabilityID: VulnerabilityIDColumn,
		Source:          SourceColumn,
		Type:            TypeColumn,
		Score:           ScoreColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
