//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PackageMaintainer = newPackageMaintainerTable("package", "package_maintainer", "")

type packageMaintainerTable struct {
	postgres.Table

	//Columns
	PackageID    postgres.ColumnString
	MaintainerID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PackageMaintainerTable struct {
	packageMaintainerTable

	EXCLUDED packageMaintainerTable
}

// AS creates new PackageMaintainerTable with assigned alias
func (a PackageMaintainerTable) AS(alias string) *PackageMaintainerTable {
	return newPackageMaintainerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PackageMaintainerTable with assigned schema name
func (a PackageMaintainerTable) FromSchema(schemaName string) *PackageMaintainerTable {
	return newPackageMaintainerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PackageMaintainerTable with assigned table prefix
func (a PackageMaintainerTable) WithPrefix(prefix string) *PackageMaintainerTable {
	return newPackageMaintainerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PackageMaintainerTable with assigned table suffix
func (a PackageMaintainerTable) WithSuffix(suffix string) *PackageMaintainerTable {
	return newPackageMaintainerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPackageMaintainerTable(schemaName, tableName, alias string) *PackageMaintainerTable {
	return &PackageMaintainerTable{
		packageMaintainerTable: newPackageMaintainerTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newPackageMaintainerTableImpl("", "excluded", ""),
	}
}

func newPackageMaintainerTableImpl(schemaName, tableName, alias string) packageMaintainerTable {
	var (
		PackageIDColumn    = postgres.StringColumn("package_id")
		MaintainerIDColumn = postgres.StringColumn("maintainer_id")
		allColumns         = postgres.ColumnList{PackageIDColumn, MaintainerIDColumn}
		mutableColumns     = postgres.ColumnList{PackageIDColumn, MaintainerIDColumn}
	)

	return packageMaintainerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PackageID:    PackageIDColumn,
		MaintainerID: MaintainerIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
