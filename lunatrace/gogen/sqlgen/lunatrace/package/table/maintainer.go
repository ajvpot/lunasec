//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Maintainer = newMaintainerTable("package", "maintainer", "")

type maintainerTable struct {
	postgres.Table

	//Columns
	ID             postgres.ColumnString
	PackageManager postgres.ColumnString
	Email          postgres.ColumnString
	Name           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MaintainerTable struct {
	maintainerTable

	EXCLUDED maintainerTable
}

// AS creates new MaintainerTable with assigned alias
func (a MaintainerTable) AS(alias string) *MaintainerTable {
	return newMaintainerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MaintainerTable with assigned schema name
func (a MaintainerTable) FromSchema(schemaName string) *MaintainerTable {
	return newMaintainerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MaintainerTable with assigned table prefix
func (a MaintainerTable) WithPrefix(prefix string) *MaintainerTable {
	return newMaintainerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MaintainerTable with assigned table suffix
func (a MaintainerTable) WithSuffix(suffix string) *MaintainerTable {
	return newMaintainerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMaintainerTable(schemaName, tableName, alias string) *MaintainerTable {
	return &MaintainerTable{
		maintainerTable: newMaintainerTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newMaintainerTableImpl("", "excluded", ""),
	}
}

func newMaintainerTableImpl(schemaName, tableName, alias string) maintainerTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		PackageManagerColumn = postgres.StringColumn("package_manager")
		EmailColumn          = postgres.StringColumn("email")
		NameColumn           = postgres.StringColumn("name")
		allColumns           = postgres.ColumnList{IDColumn, PackageManagerColumn, EmailColumn, NameColumn}
		mutableColumns       = postgres.ColumnList{PackageManagerColumn, EmailColumn, NameColumn}
	)

	return maintainerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		PackageManager: PackageManagerColumn,
		Email:          EmailColumn,
		Name:           NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
