//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Release = newReleaseTable("package", "release", "")

type releaseTable struct {
	postgres.Table

	//Columns
	ID                     postgres.ColumnString
	PackageID              postgres.ColumnString
	PublishingMaintainerID postgres.ColumnString
	Version                postgres.ColumnString
	UpstreamData           postgres.ColumnString
	ReleaseTime            postgres.ColumnTimestampz
	ObservedTime           postgres.ColumnTimestampz
	BlobHash               postgres.ColumnString
	UpstreamBlobURL        postgres.ColumnString
	MirroredBlobURL        postgres.ColumnString
	FetchedTime            postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReleaseTable struct {
	releaseTable

	EXCLUDED releaseTable
}

// AS creates new ReleaseTable with assigned alias
func (a ReleaseTable) AS(alias string) *ReleaseTable {
	return newReleaseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReleaseTable with assigned schema name
func (a ReleaseTable) FromSchema(schemaName string) *ReleaseTable {
	return newReleaseTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReleaseTable with assigned table prefix
func (a ReleaseTable) WithPrefix(prefix string) *ReleaseTable {
	return newReleaseTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReleaseTable with assigned table suffix
func (a ReleaseTable) WithSuffix(suffix string) *ReleaseTable {
	return newReleaseTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReleaseTable(schemaName, tableName, alias string) *ReleaseTable {
	return &ReleaseTable{
		releaseTable: newReleaseTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newReleaseTableImpl("", "excluded", ""),
	}
}

func newReleaseTableImpl(schemaName, tableName, alias string) releaseTable {
	var (
		IDColumn                     = postgres.StringColumn("id")
		PackageIDColumn              = postgres.StringColumn("package_id")
		PublishingMaintainerIDColumn = postgres.StringColumn("publishing_maintainer_id")
		VersionColumn                = postgres.StringColumn("version")
		UpstreamDataColumn           = postgres.StringColumn("upstream_data")
		ReleaseTimeColumn            = postgres.TimestampzColumn("release_time")
		ObservedTimeColumn           = postgres.TimestampzColumn("observed_time")
		BlobHashColumn               = postgres.StringColumn("blob_hash")
		UpstreamBlobURLColumn        = postgres.StringColumn("upstream_blob_url")
		MirroredBlobURLColumn        = postgres.StringColumn("mirrored_blob_url")
		FetchedTimeColumn            = postgres.TimestampzColumn("fetched_time")
		allColumns                   = postgres.ColumnList{IDColumn, PackageIDColumn, PublishingMaintainerIDColumn, VersionColumn, UpstreamDataColumn, ReleaseTimeColumn, ObservedTimeColumn, BlobHashColumn, UpstreamBlobURLColumn, MirroredBlobURLColumn, FetchedTimeColumn}
		mutableColumns               = postgres.ColumnList{PackageIDColumn, PublishingMaintainerIDColumn, VersionColumn, UpstreamDataColumn, ReleaseTimeColumn, ObservedTimeColumn, BlobHashColumn, UpstreamBlobURLColumn, MirroredBlobURLColumn, FetchedTimeColumn}
	)

	return releaseTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                     IDColumn,
		PackageID:              PackageIDColumn,
		PublishingMaintainerID: PublishingMaintainerIDColumn,
		Version:                VersionColumn,
		UpstreamData:           UpstreamDataColumn,
		ReleaseTime:            ReleaseTimeColumn,
		ObservedTime:           ObservedTimeColumn,
		BlobHash:               BlobHashColumn,
		UpstreamBlobURL:        UpstreamBlobURLColumn,
		MirroredBlobURL:        MirroredBlobURLColumn,
		FetchedTime:            FetchedTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
