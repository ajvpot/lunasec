"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lunaSec = void 0;
/*
 * Copyright 2021 by LunaSec (owned by Refinery Labs, Inc)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
const node_sdk_1 = require("@lunasec/node-sdk");
const auth_helpers_1 = require("./auth-helpers");
if (!process.env.TOKENIZER_URL) {
    throw new Error('Secure frame url env var is not set');
}
const publicTokenizerUrl = process.env.REACT_APP_TOKENIZER_URL;
exports.lunaSec = new node_sdk_1.LunaSec({
    tokenizerURL: process.env.TOKENIZER_URL,
    auth: {
        secrets: { provider: 'environment' },
        // pluginBaseUrl: '/api', This prepends the .lunasec routes with any string you wish, useful if your API lives behind a base route
        // Provide a small middleware(ours is called lunaSecSessionIdProvider) that takes in the req object and returns a promise containing a session token
        // or null if a user is not logged in.  LunaSec uses this to automatically create and verify token grants
        sessionIdProvider: auth_helpers_1.readSessionFromRequest,
        publicTokenizerUrl,
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlLWx1bmFzZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZGVkaWNhdGVkLXRva2VuaXplci9wYXNzcG9ydC1ncmFwaHFsL2NvbmZpZy9jb25maWd1cmUtbHVuYXNlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxnREFBNEM7QUFFNUMsaURBQXdEO0FBRXhELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRTtJQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7Q0FDeEQ7QUFFRCxNQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUM7QUFFbEQsUUFBQSxPQUFPLEdBQUcsSUFBSSxrQkFBTyxDQUFDO0lBQ2pDLFlBQVksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWE7SUFDdkMsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRTtRQUNwQyxrSUFBa0k7UUFFbEksb0pBQW9KO1FBQ3BKLHlHQUF5RztRQUN6RyxpQkFBaUIsRUFBRSxxQ0FBc0I7UUFDekMsa0JBQWtCO0tBQ25CO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIxIGJ5IEx1bmFTZWMgKG93bmVkIGJ5IFJlZmluZXJ5IExhYnMsIEluYylcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbmltcG9ydCB7IEx1bmFTZWMgfSBmcm9tICdAbHVuYXNlYy9ub2RlLXNkayc7XG5cbmltcG9ydCB7IHJlYWRTZXNzaW9uRnJvbVJlcXVlc3QgfSBmcm9tICcuL2F1dGgtaGVscGVycyc7XG5cbmlmICghcHJvY2Vzcy5lbnYuVE9LRU5JWkVSX1VSTCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3VyZSBmcmFtZSB1cmwgZW52IHZhciBpcyBub3Qgc2V0Jyk7XG59XG5cbmNvbnN0IHB1YmxpY1Rva2VuaXplclVybCA9IHByb2Nlc3MuZW52LlJFQUNUX0FQUF9UT0tFTklaRVJfVVJMO1xuXG5leHBvcnQgY29uc3QgbHVuYVNlYyA9IG5ldyBMdW5hU2VjKHtcbiAgdG9rZW5pemVyVVJMOiBwcm9jZXNzLmVudi5UT0tFTklaRVJfVVJMLFxuICBhdXRoOiB7XG4gICAgc2VjcmV0czogeyBwcm92aWRlcjogJ2Vudmlyb25tZW50JyB9LFxuICAgIC8vIHBsdWdpbkJhc2VVcmw6ICcvYXBpJywgVGhpcyBwcmVwZW5kcyB0aGUgLmx1bmFzZWMgcm91dGVzIHdpdGggYW55IHN0cmluZyB5b3Ugd2lzaCwgdXNlZnVsIGlmIHlvdXIgQVBJIGxpdmVzIGJlaGluZCBhIGJhc2Ugcm91dGVcblxuICAgIC8vIFByb3ZpZGUgYSBzbWFsbCBtaWRkbGV3YXJlKG91cnMgaXMgY2FsbGVkIGx1bmFTZWNTZXNzaW9uSWRQcm92aWRlcikgdGhhdCB0YWtlcyBpbiB0aGUgcmVxIG9iamVjdCBhbmQgcmV0dXJucyBhIHByb21pc2UgY29udGFpbmluZyBhIHNlc3Npb24gdG9rZW5cbiAgICAvLyBvciBudWxsIGlmIGEgdXNlciBpcyBub3QgbG9nZ2VkIGluLiAgTHVuYVNlYyB1c2VzIHRoaXMgdG8gYXV0b21hdGljYWxseSBjcmVhdGUgYW5kIHZlcmlmeSB0b2tlbiBncmFudHNcbiAgICBzZXNzaW9uSWRQcm92aWRlcjogcmVhZFNlc3Npb25Gcm9tUmVxdWVzdCxcbiAgICBwdWJsaWNUb2tlbml6ZXJVcmwsXG4gIH0sXG59KTtcbiJdfQ==